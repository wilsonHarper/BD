)]}'
{"version": 3, "sources": ["/web_studio/static/src/client_action/action_editor/action_editor.js", "/web_studio/static/src/client_action/app_creator/app_creator.js", "/web_studio/static/src/client_action/components/menu_creator.js", "/web_studio/static/src/client_action/components/sidebar.js", "/web_studio/static/src/client_action/editor/app_menu_editor/app_menu_editor.js", "/web_studio/static/src/client_action/editor/editor.js", "/web_studio/static/src/client_action/editor/editor_adapter.js", "/web_studio/static/src/client_action/editor/editor_menu/editor_menu.js", "/web_studio/static/src/client_action/editor/new_model_item/new_model_item.js", "/web_studio/static/src/client_action/editor/new_view_dialogs/map_new_view_dialog.js", "/web_studio/static/src/client_action/editor/new_view_dialogs/new_view_dialog.js", "/web_studio/static/src/client_action/editor/report_editor_adapter.js", "/web_studio/static/src/client_action/icon_creator/icon_creator.js", "/web_studio/static/src/client_action/model_configurator/model_configurator.js", "/web_studio/static/src/client_action/navbar/home_menu_customizer/home_menu_customizer.js", "/web_studio/static/src/client_action/navbar/navbar.js", "/web_studio/static/src/client_action/studio_action_container.js", "/web_studio/static/src/client_action/studio_client_action.js", "/web_studio/static/src/client_action/studio_home_menu/icon_creator_dialog/icon_creator_dialog.js", "/web_studio/static/src/client_action/studio_home_menu/studio_home_menu.js", "/web_studio/static/src/client_action/studio_view.js", "/web_studio/static/src/client_action/utils.js", "/web_studio/static/src/client_action/view_editors/components/field_content_overlay.js", "/web_studio/static/src/client_action/view_editors/components/field_selector_dialog.js", "/web_studio/static/src/client_action/view_editors/components/field_studio.js", "/web_studio/static/src/client_action/view_editors/components/studio_hook_component.js", "/web_studio/static/src/client_action/view_editors/components/view_button_studio.js", "/web_studio/static/src/client_action/view_editors/components/widget_studio.js", "/web_studio/static/src/client_action/view_editors/editor_wrappers.js", "/web_studio/static/src/client_action/view_editors/form/chatter_container.js", "/web_studio/static/src/client_action/view_editors/form/form_editor.js", "/web_studio/static/src/client_action/view_editors/form/form_editor_compiler.js", "/web_studio/static/src/client_action/view_editors/form/form_editor_controller/form_editor_controller.js", "/web_studio/static/src/client_action/view_editors/form/form_editor_renderer/form_editor_groups.js", "/web_studio/static/src/client_action/view_editors/form/form_editor_renderer/form_editor_renderer.js", "/web_studio/static/src/client_action/view_editors/form/form_editor_renderer/form_editor_renderer_components.js", "/web_studio/static/src/client_action/view_editors/kanban/kanban_editor.js", "/web_studio/static/src/client_action/view_editors/kanban/kanban_editor_compiler.js", "/web_studio/static/src/client_action/view_editors/kanban/kanban_editor_record.js", "/web_studio/static/src/client_action/view_editors/kanban/kanban_editor_renderer.js", "/web_studio/static/src/client_action/view_editors/list/list_editor.js", "/web_studio/static/src/client_action/view_editors/list/list_editor_renderer.js", "/web_studio/static/src/client_action/view_editors/utils.js", "/web_studio/static/src/client_action/view_editors/xml_utils.js", "/web_studio/static/src/views/kanban_report/new_report_dialog.js", "/web_studio/static/src/views/kanban_report/report_kanban_view.js", "/web_studio/static/src/legacy/action_editor_main.js", "/web_studio/static/src/legacy/js/py.js", "/web_studio/static/src/legacy/js/common/abstract_editor_manager.js", "/web_studio/static/src/legacy/js/common/field_selector_dialog.js", "/web_studio/static/src/legacy/js/common/new_field_dialog.js", "/web_studio/static/src/legacy/js/common/xml_editor.js", "/web_studio/static/src/legacy/js/reports/report_editor.js", "/web_studio/static/src/legacy/js/reports/report_editor_fields.js", "/web_studio/static/src/legacy/js/reports/report_editor_manager.js", "/web_studio/static/src/legacy/js/reports/report_editor_sidebar.js", "/web_studio/static/src/legacy/js/reports/sidebar_components/abstract_report_component.js", "/web_studio/static/src/legacy/js/reports/sidebar_components/edit_components.js", "/web_studio/static/src/legacy/js/reports/sidebar_components/edit_components_registry.js", "/web_studio/static/src/legacy/js/reports/sidebar_components/report_building_blocks.js", "/web_studio/static/src/legacy/js/reports/sidebar_components/report_building_blocks_registry.js", "/web_studio/static/src/legacy/js/views/view_components.js", "/web_studio/static/src/legacy/js/views/view_editor_manager.js", "/web_studio/static/src/legacy/js/views/view_editor_sidebar.js", "/web_studio/static/src/legacy/js/views/sidebar_safe_fields.js", "/web_studio/static/src/legacy/js/views/renderers/search_renderer.js", "/web_studio/static/src/legacy/js/views/view_editors/editor_mixin.js", "/web_studio/static/src/legacy/js/views/view_editors/editor_mixin_owl.js", "/web_studio/static/src/legacy/js/views/view_editors/form_editor_hook.js", "/web_studio/static/src/legacy/js/views/view_editors/new_buttonbox_dialog.js", "/web_studio/static/src/legacy/js/views/view_editors/search_editor.js", "/website_studio/static/src/js/editor_menu.js", "/website_studio/static/src/js/form_manager.js", "/website_studio/static/src/js/form_manager_adapter.js"], "mappings": "AAAA;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AClnNA;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;ACpHA;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;ACfzjlnLA;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;ACnFA;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;ACtCA;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;ACnrhllGA;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AC1EA;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;ACpFA;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AClFA;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AC5EA;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AC7HA;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;ACjDA;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;ACvDA;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AC1BA;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;ACrBA;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AC3FA;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;ACtCA;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;ACxCA;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;ACbhJA;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;ACzCA;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AC3DA;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;ACpOA;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AC9DA;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;ACxjLA;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;ACxEA;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AC7PA;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AC5QA;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;ACvrjlhJA;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AC3CA;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;ACzvcveA;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACntlxlvhjlBA;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACpvjnjDA;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;ACxxIA;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACdA;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACxlxaA;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;ACRA;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACtIA;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA", "sourcesContent": ["/** @odoo-module */\nimport { Component } from \"@odoo/owl\";\nimport { useService } from \"@web/core/utils/hooks\";\nimport { registry } from \"@web/core/registry\";\nimport { _lt } from \"@web/core/l10n/translation\";\nimport { sortBy } from \"@web/core/utils/arrays\";\nimport { Dropdown } from \"@web/core/dropdown/dropdown\";\nimport { DropdownItem } from \"@web/core/dropdown/dropdown_item\";\nimport { AlertDialog } from \"@web/core/confirmation_dialog/confirmation_dialog\";\nimport { standardActionServiceProps } from \"@web/webclient/actions/action_service\";\n\nimport { Record } from \"@web/views/record\";\nimport {\n    Many2ManyTagsField,\n    many2ManyTagsField,\n} from \"@web/views/fields/many2many_tags/many2many_tags_field\";\nimport { CharField } from \"@web/views/fields/char/char_field\";\nimport { TextField } from \"@web/views/fields/text/text_field\";\n\nimport { viewTypeToString, useStudioServiceAsReactive } from \"@web_studio/studio_service\";\nimport { Sidebar } from \"../components/sidebar\";\nimport { NewViewDialog } from \"../editor/new_view_dialogs/new_view_dialog\";\nimport { MapNewViewDialog } from \"../editor/new_view_dialogs/map_new_view_dialog\";\n\nfunction getViewCategories() {\n    return {\n        general: {\n            title: _lt(\"General views\"),\n            viewTypes: [\"form\", \"search\", \"activity\"],\n        },\n        multiple: {\n            title: _lt(\"Multiple records views\"),\n            viewTypes: [\"list\", \"kanban\", \"map\"],\n        },\n        timeline: {\n            title: _lt(\"Timeline views\"),\n            viewTypes: [\"calendar\", \"cohort\", \"gantt\"],\n        },\n        reporting: {\n            title: _lt(\"Reporting views\"),\n            viewTypes: [\"graph\", \"pivot\"],\n        },\n    };\n}\n\nconst actionFieldsGet = {\n    id: { type: \"integer\" },\n    name: { type: \"char\" },\n    help: { type: \"text\" },\n    groups_id: { type: \"many2many\", relation: \"res.groups\", string: \"Groups\" },\n};\n\nfunction getActionActiveFields() {\n    const activeFields = {};\n    for (const fName of Object.keys(actionFieldsGet)) {\n        activeFields[fName] = {};\n    }\n    activeFields.groups_id.relatedFields = Object.fromEntries(\n        many2ManyTagsField.relatedFields({ options: {} }).map((f) => [f.name, f])\n    );\n    return activeFields;\n}\n\nfunction getActionValues(action) {\n    const values = {};\n    for (const fName of Object.keys(actionFieldsGet)) {\n        values[fName] = action[fName];\n    }\n    return values;\n}\n\nclass ActionEditor extends Component {\n    setup() {\n        this.studio = useStudioServiceAsReactive();\n        this.action = useService(\"action\");\n        this.dialog = useService(\"dialog\");\n        this.notification = useService(\"notification\");\n        this.rpc = useService(\"rpc\");\n        this.user = useService(\"user\");\n        this.viewCategories = getViewCategories();\n\n        this.actionFieldsGet = { ...actionFieldsGet };\n    }\n\n    get actionRecordProps() {\n        const values = getActionValues(this.studio.editedAction);\n        return {\n            fields: this.actionFieldsGet,\n            resModel: \"ir.actions.act_window\",\n            resId: values.id,\n            mode: \"edit\",\n            values,\n            activeFields: getActionActiveFields(),\n            onRecordChanged: (record, changes) => {\n                return this.editAction(changes);\n            },\n        };\n    }\n\n    get activeViews() {\n        return this.studio.editedAction.views.map(([, name]) => name);\n    }\n\n    getOrderedViewTypes(viewTypes) {\n        const activeViews = this.activeViews;\n        const currentDefaultView = activeViews[0];\n        const viewInfos = viewTypes.map((viewType) => {\n            return {\n                name: viewType,\n                title: viewTypeToString(viewType),\n                isActive: activeViews.includes(viewType),\n                isDefault: currentDefaultView === viewType,\n                imgUrl: `/web_studio/static/src/img/view_type/${viewType}.png`,\n                canBeDefault: ![\"form\", \"search\"].includes(viewType),\n                canBeDisabled: viewType !== \"search\",\n            };\n        });\n        return sortBy(\n            viewInfos,\n            ({ isDefault, isActive }) => {\n                return isDefault ? 2 : isActive ? 1 : 0;\n            },\n            \"desc\"\n        );\n    }\n\n    setDefaultView(viewType) {\n        viewType = viewType === \"tree\" ? \"list\" : viewType;\n        let viewModes = this.studio.editedAction.view_mode.split(\",\");\n        viewModes = viewModes.filter((m) => m !== viewType);\n        viewModes.unshift(viewType);\n        return this.editAction({ view_mode: viewModes.join(\",\") });\n    }\n\n    disableView(viewType) {\n        const viewMode = this.studio.editedAction.view_mode\n            .split(\",\")\n            .filter((m) => m !== viewType);\n\n        if (!viewMode.length) {\n            this.dialog.add(AlertDialog, {\n                body: this.env._t(\"You cannot deactivate this view as it is the last one active.\"),\n            });\n        } else {\n            return this.editAction({ view_mode: viewMode.join(\",\") });\n        }\n    }\n\n    restoreDefaultView(viewType) {\n        return this.env.editionFlow.restoreDefaultView(null, viewType);\n    }\n\n    async addViewType(viewType) {\n        const action = this.studio.editedAction;\n        const viewMode = action.view_mode.split(\",\");\n        viewMode.push(viewType);\n        let viewAdded = await this.rpc(\"/web_studio/add_view_type\", {\n            action_type: action.type,\n            action_id: action.id,\n            res_model: action.res_model,\n            view_type: viewType,\n            args: { view_mode: viewMode.join(\",\") },\n            context: this.user.context,\n        });\n\n        if (viewAdded !== true) {\n            viewAdded = await new Promise((resolve) => {\n                let DialogClass;\n                const dialogProps = {\n                    confirm: async () => {\n                        resolve(true);\n                    },\n                    cancel: () => resolve(false),\n                };\n                if ([\"gantt\", \"calendar\", \"cohort\"].includes(viewType)) {\n                    DialogClass = NewViewDialog;\n                    dialogProps.viewType = viewType;\n                } else if (viewType === \"map\") {\n                    DialogClass = MapNewViewDialog;\n                } else {\n                    this.dialog.add(AlertDialog, {\n                        body: this.env._t(\n                            \"Creating this type of view is not currently supported in Studio.\"\n                        ),\n                    });\n                    resolve(false);\n                }\n                this.dialog.add(DialogClass, dialogProps);\n            });\n        }\n        if (viewAdded) {\n            await this.editAction({ view_mode: viewMode.join(\",\") });\n        }\n        return viewAdded;\n    }\n\n    editView(viewType) {\n        this.studio.setParams({ viewType, editorTab: \"views\" });\n    }\n\n    async onThumbnailClicked(viewType) {\n        if (this.activeViews.includes(viewType)) {\n            return this.editView(viewType);\n        }\n        const resModel = this.studio.editedAction.res_model;\n        if (viewType === \"activity\") {\n            const activityAllowed = await this.studio.isAllowed(\"activity\", resModel);\n            if (!activityAllowed) {\n                this.notification.add({\n                    title: false,\n                    type: \"danger\",\n                    message: this.env._t(\"Activity view unavailable on this model\"),\n                });\n                return;\n            }\n        }\n        if (await this.addViewType(viewType)) {\n            return this.editView(viewType);\n        }\n    }\n\n    openFormAction() {\n        return this.action.doAction(\n            {\n                type: \"ir.actions.act_window\",\n                res_model: \"ir.actions.act_window\",\n                res_id: this.studio.editedAction.id,\n                views: [[false, \"form\"]],\n                target: \"current\",\n            },\n            {\n                stackPosition: \"replacePreviousAction\",\n            }\n        );\n    }\n\n    async editAction(changes) {\n        await this.rpc(\"/web_studio/edit_action\", {\n            action_id: this.studio.editedAction.id,\n            action_type: \"ir.actions.act_window\",\n            args: changes,\n        });\n        return this.studio.reload({}, false);\n    }\n}\nActionEditor.template = \"web_studio.ActionEditor\";\nActionEditor.components = {\n    Sidebar,\n    Dropdown,\n    DropdownItem,\n    Record,\n    CharField,\n    TextField,\n    Many2ManyTagsField,\n};\nActionEditor.props = { ...standardActionServiceProps };\n\nregistry.category(\"actions\").add(\"web_studio.action_editor\", ActionEditor);\n", "/** @odoo-module **/\n\nimport { Component, reactive, useExternalListener, useState } from \"@odoo/owl\";\nimport { useAutofocus, useService } from \"@web/core/utils/hooks\";\nimport { BG_COLORS, COLORS, ICONS } from \"@web_studio/utils\";\nimport { ModelConfigurator } from \"@web_studio/client_action/model_configurator/model_configurator\";\nimport { IconCreator } from \"../icon_creator/icon_creator\";\nimport { MenuCreator, MenuCreatorModel } from \"@web_studio/client_action/components/menu_creator\";\n\nclass AppCreatorState {\n    /**\n     * @param {Function} onFinished\n     */\n    constructor({ onFinished }) {\n        this._onFinished = onFinished;\n        // ==================== Misc ====================\n        this.step = \"welcome\";\n\n        // ================== Fields ==================\n        this.fieldsValidators = {\n            appName: () => !!this.data.appName,\n            menu: (_this) => _this.menuCreatorModel.isValid,\n        };\n        this.menuCreatorModel = reactive(new MenuCreatorModel());\n\n        this.data = {\n            appName: \"\",\n            iconData: {\n                backgroundColor: BG_COLORS[5],\n                color: COLORS[4],\n                iconClass: ICONS[0],\n                type: \"custom_icon\",\n            },\n            menu: this.menuCreatorModel.data,\n            modelOptions: [],\n        };\n\n        // ================== Steps ==================\n        this._steps = {\n            welcome: {\n                next: () => \"app\",\n            },\n            app: {\n                previous: \"welcome\",\n                next: () => \"model\",\n                fields: [\"appName\"],\n            },\n            model: {\n                previous: \"app\",\n                next: (data) => {\n                    return data.menu.modelChoice === \"new\" ? \"model_configuration\" : \"\";\n                },\n                fields: [\"menu\"],\n            },\n            model_configuration: {\n                previous: \"model\",\n            },\n        };\n    }\n\n    //--------------------------------------------------------------------------\n    // Getters\n    //--------------------------------------------------------------------------\n\n    get step() {\n        return this._step;\n    }\n\n    set step(step) {\n        this._step = step;\n        this.showValidation = false;\n    }\n\n    get nextStep() {\n        const next = this._next;\n        return this._stepInvalidFields.length ? false : next;\n    }\n\n    get hasPrevious() {\n        return \"previous\" in this._currentStep;\n    }\n\n    //--------------------------------------------------------------------------\n    // Public\n    //--------------------------------------------------------------------------\n\n    isFieldValid(fieldName) {\n        return this.showValidation ? this.fieldsValidators[fieldName](this) : true;\n    }\n\n    next() {\n        this.showValidation = true;\n        const invalidFields = this._stepInvalidFields;\n        if (invalidFields.length) {\n            return;\n        }\n        const next = this._next;\n        if (next) {\n            this.step = next;\n        } else {\n            return this._onFinished();\n        }\n    }\n\n    previous() {\n        if (this._currentStep.previous) {\n            this.step = this._currentStep.previous;\n        }\n    }\n\n    //--------------------------------------------------------------------------\n    // Private\n    //--------------------------------------------------------------------------\n\n    get _currentStep() {\n        return this._steps[this._step];\n    }\n\n    get _next() {\n        return this._currentStep.next ? this._currentStep.next(this.data) : \"\";\n    }\n\n    get _stepInvalidFields() {\n        return (this._currentStep.fields || []).filter((fName) => {\n            return !this.fieldsValidators[fName](this);\n        });\n    }\n}\n\nexport class AppCreator extends Component {\n    static template = \"web_studio.AppCreator\";\n    static components = { IconCreator, ModelConfigurator, MenuCreator };\n    static props = {\n        onNewAppCreated: { type: Function },\n    };\n\n    setup() {\n        this.state = useState(\n            new AppCreatorState({\n                onFinished: this.createNewApp.bind(this),\n            })\n        );\n\n        this.uiService = useService(\"ui\");\n        this.rpc = useService(\"rpc\");\n        this.user = useService(\"user\");\n\n        useAutofocus();\n        useExternalListener(window, \"keydown\", this.onKeydown);\n    }\n\n    /**\n     * @returns {Promise}\n     */\n    async createNewApp() {\n        this.uiService.block();\n        const data = this.state.data;\n        const iconData = data.iconData;\n\n        const iconValue =\n            iconData.type === \"custom_icon\"\n                ? // custom icon data\n                  [iconData.iconClass, iconData.color, iconData.backgroundColor]\n                : // attachment\n                  iconData.uploaded_attachment_id;\n\n        try {\n            const result = await this.rpc(\"/web_studio/create_new_app\", {\n                app_name: data.appName,\n                menu_name: data.menu.menuName,\n                model_choice: data.menu.modelChoice,\n                model_id: data.menu.modelChoice && data.menu.modelId[0],\n                model_options: data.modelOptions,\n                icon: iconValue,\n                context: this.user.context,\n            });\n            await this.props.onNewAppCreated(result);\n        } finally {\n            this.uiService.unblock();\n        }\n    }\n\n    //--------------------------------------------------------------------------\n    // Handlers\n    //--------------------------------------------------------------------------\n\n    /**\n     * @param {KeyboardEvent} ev\n     */\n    onKeydown(ev) {\n        if (\n            ev.key === \"Enter\" &&\n            !(\n                ev.target.classList &&\n                ev.target.classList.contains(\"o_web_studio_app_creator_previous\")\n            )\n        ) {\n            ev.preventDefault();\n            this.state.next();\n        }\n    }\n\n    /**\n     * Handle the confirmation of options in the modelconfigurator\n     * @param {Object} options\n     */\n    onConfirmOptions(options) {\n        this.state.data.modelOptions = options;\n        return this.state.next();\n    }\n}\n", "/** @odoo-module */\nimport { Component, useState } from \"@odoo/owl\";\nimport { useOwnedDialogs } from \"@web/core/utils/hooks\";\nimport { Dialog } from \"@web/core/dialog/dialog\";\n\nimport { Many2OneField } from \"@web/views/fields/many2one/many2one_field\";\nimport { Record } from \"@web/views/record\";\nimport { _t } from \"@web/core/l10n/translation\";\n\nimport { useDialogConfirmation } from \"@web_studio/client_action/utils\";\nimport { ModelConfiguratorDialog } from \"../model_configurator/model_configurator\";\n\nexport class MenuCreatorModel {\n    constructor({ allowNoModel } = {}) {\n        this.data = {\n            modelId: false,\n            menuName: \"\",\n            modelChoice: \"new\",\n        };\n\n        // Info to instantiate the many2one to select an existing model\n        this.modelIdfieldsInfo = {\n            modelId: {\n                relation: \"ir.model\",\n                domain: [\n                    [\"transient\", \"=\", false],\n                    [\"abstract\", \"=\", false],\n                ],\n                type: \"many2one\",\n            },\n        };\n\n        // Info to select what kind of model is linked to the menu\n        this.modelChoiceSelection = {\n            new: _t(\"New Model\"),\n            existing: _t(\"Existing Model\"),\n        };\n\n        if (allowNoModel) {\n            this.modelChoiceSelection.parent = _t(\"Parent Menu\");\n        }\n    }\n\n    validateField(fieldName) {\n        if (fieldName === \"menuName\") {\n            return !!this.data.menuName;\n        } else if (fieldName === \"modelId\") {\n            return this.data.modelChoice === \"existing\" ? !!this.data.modelId : true;\n        }\n    }\n\n    get isValid() {\n        return [\"menuName\", \"modelId\"].every((fName) => this.validateField(fName));\n    }\n}\n\nexport class MenuCreator extends Component {\n    static template = \"web_studio.MenuCreator\";\n    static components = { Record, Many2OneField };\n    static props = {\n        menuCreatorModel: { type: Object },\n        showValidation: { type: Boolean, optional: true },\n    };\n    static defaultProps = {\n        showValidation: false,\n    };\n\n    setup() {\n        this.state = useState(this.props.menuCreatorModel);\n    }\n\n    isValid(fieldName) {\n        return this.props.showValidation ? this.state.validateField(fieldName) : true;\n    }\n}\n\nexport class MenuCreatorDialog extends Component {\n    static template = \"web_studio.MenuCreatorDialog\";\n    static components = { Dialog, MenuCreator };\n    static props = { confirm: { type: Function }, close: { type: Function } };\n\n    setup() {\n        this.addDialog = useOwnedDialogs();\n        this.menuCreatorModel = useState(new MenuCreatorModel({ allowNoModel: true }));\n        this.state = useState({ showValidation: false });\n        this.title = _t(\"Create your menu\");\n        const { confirm, cancel } = useDialogConfirmation({\n            confirm: async (data = {}) => {\n                if (!this.menuCreatorModel.isValid) {\n                    this.state.showValidation = true;\n                    return false;\n                }\n                await this.props.confirm(data);\n            },\n        });\n        this._confirm = confirm;\n        this._cancel = cancel;\n    }\n\n    confirm(data = {}) {\n        this._confirm({ ...this.menuCreatorModel.data, ...data });\n    }\n\n    onCreateNewModel() {\n        if (!this.menuCreatorModel.isValid) {\n            this.state.showValidation = true;\n            return;\n        }\n        this.addDialog(ModelConfiguratorDialog, {\n            confirmLabel: _t(\"Create Menu\"),\n            confirm: (data) => {\n                this.confirm({ modelOptions: data });\n            },\n        });\n    }\n}\n", "/** @odoo-module */\nimport { Component, xml } from \"@odoo/owl\";\n\nexport class Sidebar extends Component {}\nSidebar.template = xml`\n    <div class=\"o_web_studio_sidebar flex-grow-0 flex-shrink-0 overflow-auto\">\n      <div class=\"o_web_studio_sidebar_header\">\n        <t t-slot=\"header\" />\n      </div>\n      <div class=\"o_web_studio_sidebar_content d-flex flex-column\" style=\"gap: 12px;\">\n        <t t-slot=\"content\" />\n      </div>\n    </div>\n`;\nSidebar.props = [\"slots?\"];\n", "/** @odoo-module */\nimport { Component, useEffect, useRef, useState, useSubEnv } from \"@odoo/owl\";\nimport { useBus, useService, useOwnedDialogs } from \"@web/core/utils/hooks\";\nimport { Dialog } from \"@web/core/dialog/dialog\";\nimport { localization } from \"@web/core/l10n/localization\";\nimport { FormViewDialog } from \"@web/views/view_dialogs/form_view_dialog\";\nimport { MenuCreatorDialog } from \"@web_studio/client_action/components/menu_creator\";\nimport { useDialogConfirmation } from \"@web_studio/client_action/utils\";\nimport { _t } from \"@web/core/l10n/translation\";\n\nfunction useSubEnvAndServices(env) {\n    const services = env.services;\n    const bus = env.bus;\n    useSubEnv(env);\n    useSubEnv({ services, bus });\n}\n\nclass FormViewDialogWithEnv extends FormViewDialog {\n    static props = { ...FormViewDialog.props, env: { type: Object } };\n    setup() {\n        useSubEnvAndServices(this.props.env);\n        super.setup();\n    }\n}\n\nconst EditMenuDialogProps = { ...Dialog.props };\nEditMenuDialogProps.env = { type: Object };\nEditMenuDialogProps.close = { type: Function };\ndelete EditMenuDialogProps.slots;\nclass EditMenuDialog extends Component {\n    static components = { Dialog };\n    static template = \"web_studio.AppMenuEditor.EditMenuDialog\";\n    static props = EditMenuDialogProps;\n\n    setup() {\n        // Keep the bus from the WebClient\n        const originalBus = this.env.bus;\n        useBus(originalBus, \"MENUS:APP-CHANGED\", () => (this.state.tree = this.getTree()));\n\n        // We receive the env from the editor in Props\n        useSubEnvAndServices(this.props.env);\n        this.menus = useService(\"menu\");\n        this.addDialog = useOwnedDialogs();\n        this.orm = useService(\"orm\");\n        this.user = useService(\"user\");\n        this.rpc = useService(\"rpc\");\n\n        useBus(this.env.bus, \"ACTION_MANAGER:UPDATE\", () => this.cancel());\n\n        this.title = _t(\"Edit Menu\");\n\n        // States and data\n        this.state = useState({ tree: {}, flatMenus: {}, renderId: 1 });\n        this.state.tree = this.getTree();\n        this.toMove = {};\n        this.toDelete = [];\n\n        // DragAndDrop to move menus around\n        const root = useRef(\"root\");\n        // Bug in owl: t-ref with t-key\n        const itemsList = {\n            get el() {\n                return root.el.querySelector(\".oe_menu_editor\");\n            },\n        };\n\n        useEffect(() => {\n            const el = itemsList.el;\n            if (!el) {\n                return;\n            }\n\n            // FIXME: useSortable doesn't handle this use case yet\n            // use JQuery UI with lead feet instead.\n            $(el).nestedSortable({\n                listType: \"ul\",\n                handle: \".o-draggable-handle\",\n                items: \"li\",\n                maxLevels: 5,\n                toleranceElement: \"> div\",\n                forcePlaceholderSize: true,\n                opacity: 0.6,\n                placeholder: \"oe_menu_placeholder\",\n                doNotClear: true,\n                tolerance: \"pointer\",\n                attribute: \"data-item-id\",\n                relocate: this.moveMenu.bind(this),\n                rtl: localization.direction === \"rtl\",\n            });\n            return () => {\n                $(el).nestedSortable(\"destroy\");\n            };\n        });\n\n        const { confirm, cancel } = useDialogConfirmation({\n            confirm: async () => {\n                await this.saveChanges();\n            },\n        });\n        this.confirm = confirm;\n        this.cancel = cancel;\n    }\n\n    get flatMenus() {\n        return this.state.flatMenus;\n    }\n\n    get mainItem() {\n        return this.state.tree;\n    }\n\n    getTree() {\n        let currentApp = this.menus.getCurrentApp();\n        if (!currentApp) {\n            return null;\n        }\n        currentApp = this.menus.getMenuAsTree(currentApp.id);\n        const item = this._getItemFromMenu(currentApp, null);\n        item.isDraggable = false;\n        item.isRemovable = false;\n        return item;\n    }\n\n    _getItemFromMenu(menu, parentId) {\n        const item = {\n            id: menu.id,\n            name: menu.name,\n            isDraggable: true,\n            isRemovable: true,\n            parentId,\n        };\n        item.children = menu.childrenTree.map((menu) => this._getItemFromMenu(menu, item.id));\n        this.flatMenus[item.id] = item;\n        return item;\n    }\n\n    moveMenu(ev, uiHelper) {\n        const menuId = parseInt(uiHelper.item[0].dataset.itemId);\n        const menu = this.flatMenus[menuId];\n\n        // Remove element from parent's children (since we are moving it, this is the mandatory first step)\n        let parentMenu = this.flatMenus[menu.parentId];\n        parentMenu.children = parentMenu.children.filter((m) => m.id !== menuId);\n\n        // Determine next parent\n        const parentLi = uiHelper.item[0].parentElement.closest(\"li\");\n        if (parseInt(parentLi.dataset.itemId) !== parentMenu.id) {\n            parentMenu = this.flatMenus[parentLi.dataset.itemId];\n            menu.parentId = parentMenu.id;\n        }\n\n        // Determine at which position we should place the element\n        let previous = uiHelper.item[0].previousElementSibling;\n        let next = uiHelper.item[0].nextElementSibling;\n\n        if (previous) {\n            previous = this.flatMenus[previous.dataset.itemId];\n            const index = parentMenu.children.findIndex((child) => child === previous);\n            parentMenu.children.splice(index + 1, 0, menu);\n        } else if (next) {\n            next = this.flatMenus[next.dataset.itemId];\n            const index = parentMenu.children.findIndex((child) => child === next);\n            parentMenu.children.splice(index, 0, menu);\n        } else {\n            parentMenu.children.push(menu);\n        }\n        // Forces nestedSortable to reinstantiate to avoid conflicts with owl\n        this.state.renderId++;\n\n        // Last step: prepare the data that can be sent to the server.\n        this.toMove[menuId] = {\n            parent_menu_id: menu.parentId,\n        };\n\n        parentMenu.children.forEach((m, index) => {\n            this.toMove[m.id] = this.toMove[m.id] || {};\n            this.toMove[m.id].sequence = index + 1;\n        });\n    }\n\n    removeItem(menu) {\n        const parentMenu = this.flatMenus[menu.parentId];\n        if (!parentMenu) {\n            return;\n        }\n        parentMenu.children = parentMenu.children.filter((m) => m.id !== menu.id);\n        this.toDelete.push(menu.id);\n        this.state.renderId++;\n    }\n\n    editItem(menu) {\n        this.addDialog(FormViewDialogWithEnv, {\n            resModel: \"ir.ui.menu\",\n            resId: menu.id,\n            env: this.props.env,\n            onRecordSaved: async () => {\n                await this.saveChanges(true);\n            },\n        });\n    }\n\n    async saveChanges(reload = false) {\n        if (Object.keys(this.toMove).length || this.toDelete.length) {\n            await this.orm.call(\"ir.ui.menu\", \"customize\", [], {\n                to_move: this.toMove,\n                to_delete: this.toDelete,\n            });\n            reload = true;\n        }\n        if (reload) {\n            await this.menus.reload();\n        }\n    }\n\n    onNewMenu() {\n        this.addDialog(MenuCreatorDialog, {\n            confirm: async (data) => {\n                await this.rpc(\"/web_studio/create_new_menu\", {\n                    menu_name: data.menuName,\n                    model_id: data.modelId[0],\n                    model_choice: data.modelChoice,\n                    model_options: data.modelOptions || {},\n                    parent_menu_id: this.mainItem.id,\n                    context: this.user.context,\n                });\n                this.env.bus.trigger(\"CLEAR-CACHES\");\n                this.menus.reload();\n            },\n        });\n    }\n}\n\nexport class AppMenuEditor extends Component {\n    static props = {\n        env: { type: Object },\n    };\n    static template = \"web_studio.AppMenuEditor\";\n\n    setup() {\n        this.menus = useService(\"menu\");\n        this.addDialog = useOwnedDialogs();\n        useBus(this.env.bus, \"MENUS:APP-CHANGED\", () => this.render());\n    }\n\n    onClick(ev) {\n        ev.preventDefault();\n        this.addDialog(EditMenuDialog, { env: this.props.env });\n    }\n}\n", "/** @odoo-module **/\nimport { Component, EventBus, onWillDestroy, useSubEnv, reactive } from \"@odoo/owl\";\n\nimport { registry } from \"@web/core/registry\";\nimport { useBus, useService } from \"@web/core/utils/hooks\";\n\nimport { StudioActionContainer } from \"../studio_action_container\";\nimport { actionService } from \"@web/webclient/actions/action_service\";\nimport { EditorMenu } from \"./editor_menu/editor_menu\";\nimport { mapDoActionOptionAPI } from \"@web/legacy/backend_utils\";\nimport { ConfirmationDialog } from \"@web/core/confirmation_dialog/confirmation_dialog\";\nimport { AppMenuEditor } from \"./app_menu_editor/app_menu_editor\";\nimport { NewModelItem } from \"./new_model_item/new_model_item\";\n\nconst actionServiceStudio = {\n    dependencies: [\"studio\"],\n    start(env, { studio }) {\n        const action = actionService.start(env);\n        const _doAction = action.doAction;\n\n        async function doAction(actionRequest, options) {\n            if (actionRequest === \"web_studio.action_edit_report\") {\n                return studio.setParams({\n                    editedReport: options.report,\n                });\n            }\n            return _doAction(...arguments);\n        }\n\n        return Object.assign(action, { doAction });\n    },\n};\n\nclass EditionFlow {\n    constructor(env, services) {\n        this.env = env;\n        for (const [servName, serv] of Object.entries(services)) {\n            this[servName] = serv;\n        }\n    }\n    loadViews() {\n        const { context, views, res_model, id } = this.studio.editedAction;\n        const newContext = { ...context, studio: true, lang: false };\n        const options = { loadIrFilters: true, loadActionMenus: false, id };\n        return this.view.loadViews({ resModel: res_model, views, context: newContext }, options);\n    }\n    restoreDefaultView(viewId, viewType) {\n        return new Promise((resolve) => {\n            const confirm = async () => {\n                if (!viewId && viewType) {\n                    // To restore the default view from an inherited one, we need first to retrieve the default view id\n                    const result = await this.loadViews();\n                    viewId = result.views[viewType].id;\n                }\n                const res = await this.rpc(\"/web_studio/restore_default_view\", {\n                    view_id: viewId,\n                });\n                this.env.bus.trigger(\"CLEAR-CACHES\");\n                resolve(res);\n            };\n            this.dialog.add(ConfirmationDialog, {\n                body: this.env._t(\n                    \"Are you sure you want to restore the default view?\\r\\nAll customization done with studio on this view will be lost.\"\n                ),\n                confirm,\n                cancel: () => resolve(false),\n            });\n        });\n    }\n}\n\nconst menuButtonsRegistry = registry.category(\"studio_navbar_menubuttons\");\nexport class Editor extends Component {\n    static menuButtonsId = 1;\n    setup() {\n        const services = Object.create(this.env.services);\n\n        const globalBus = this.env.bus;\n        const newBus = new EventBus();\n        newBus.on(\"CLEAR-CACHES\", this, () => globalBus.trigger(\"CLEAR-CACHES\"));\n\n        useSubEnv({\n            bus: newBus,\n            services,\n        });\n\n        // Assuming synchronousness for all services instanciation\n        services.router = {\n            current: { hash: {} },\n            pushState() {},\n        };\n        this.studio = useService(\"studio\");\n\n        services.action = actionServiceStudio.start(this.env, { studio: this.studio });\n\n        const editionFlow = new EditionFlow(this.env, {\n            rpc: useService(\"rpc\"),\n            dialog: useService(\"dialog\"),\n            studio: this.studio,\n            view: useService(\"view\"),\n        });\n        useSubEnv({\n            editionFlow: reactive(editionFlow),\n        });\n\n        this.actionService = useService(\"action\");\n        this.rpc = useService(\"rpc\");\n\n        this.state = owl.useState({ actionContainerId: 1 });\n        useBus(this.studio.bus, \"UPDATE\", async () => {\n            this.state.actionContainerId++;\n        });\n\n        // Push instance-specific components in the navbar. Because we want those elements\n        // immediately, we add them at setup time, not onMounted.\n        // Also, because they are Editor instance-specific, and that Destroyed is mostly called\n        // after the new instance is created, we need to remove the old entries before adding the new ones\n        menuButtonsRegistry.getEntries().forEach(([name]) => {\n            if (name.startsWith(\"app_menu_editor_\") || name.startsWith(\"new_model_item_\")) {\n                menuButtonsRegistry.remove(name);\n            }\n        });\n        const menuButtonsId = this.constructor.menuButtonsId++;\n        menuButtonsRegistry.add(`app_menu_editor_${menuButtonsId}`, {\n            Component: AppMenuEditor,\n            props: { env: this.env },\n        });\n        menuButtonsRegistry.add(`new_model_item_${menuButtonsId}`, { Component: NewModelItem });\n        onWillDestroy(() => {\n            menuButtonsRegistry.remove(`app_menu_editor_${menuButtonsId}`);\n            menuButtonsRegistry.remove(`new_model_item_${menuButtonsId}`);\n        });\n    }\n\n    switchView({ viewType }) {\n        this.studio.setParams({ viewType, editorTab: \"views\" });\n    }\n    switchViewLegacy(ev) {\n        this.studio.setParams({ viewType: ev.detail.view_type });\n    }\n\n    switchTab({ tab }) {\n        this.studio.setParams({ editorTab: tab });\n    }\n\n    onDoAction(ev) {\n        // @legacy;\n        const payload = ev.detail;\n        const legacyOptions = mapDoActionOptionAPI(payload.options);\n        this.actionService.doAction(\n            payload.action,\n            Object.assign(legacyOptions || {}, { clearBreadcrumbs: true })\n        );\n    }\n}\nEditor.template = \"web_studio.Editor\";\nEditor.props = {};\nEditor.components = {\n    EditorMenu,\n    StudioActionContainer,\n};\n", "/** @odoo-module **/\nimport { ComponentAdapter } from \"web.OwlCompatibility\";\nimport { useService } from \"@web/core/utils/hooks\";\nimport { registry } from \"@web/core/registry\";\nimport { NewViewDialog } from \"@web_studio/client_action/editor/new_view_dialogs/new_view_dialog\";\nimport { MapNewViewDialog } from \"@web_studio/client_action/editor/new_view_dialogs/map_new_view_dialog\";\nimport { ConfirmationDialog, AlertDialog } from \"@web/core/confirmation_dialog/confirmation_dialog\";\nimport { ActionEditorMain } from \"../../legacy/action_editor_main\";\n\nimport { Component } from \"@odoo/owl\";\n\nexport class EditorAdapter extends ComponentAdapter {\n    constructor(props) {\n        // force dummy Component not to crash\n        props.Component = Component;\n        super(...arguments);\n    }\n\n    setup() {\n        super.setup();\n        this.studio = useService(\"studio\");\n\n        if (this.studio.editedViewType) {\n            this.props.Component = ActionEditorMain;\n        }\n\n        this.dialog = useService(\"dialog\");\n        this.user = useService(\"user\");\n        this.dialog = useService(\"dialog\");\n        this.viewService = useService(\"view\");\n        this.rpc = useService(\"rpc\");\n        this.wowlEnv = this.env;\n        this.env = Component.env; // use the legacy env\n    }\n\n    _trigger_up(ev) {\n        const { name, data } = ev;\n        if (name === \"studio_new_view\") {\n            return this._onNewView(data);\n        }\n        if (name === \"studio_disable_view\") {\n            return this._onDisableView(data);\n        }\n        if (name === \"studio_default_view\") {\n            return this._onSetDefaultView(data);\n        }\n        if (name === \"studio_restore_default_view\") {\n            return this._onRestoreDefaultView(data);\n        }\n        if (name === \"studio_edit_action\") {\n            return this._onEditAction(data);\n        }\n        return super._trigger_up(...arguments);\n    }\n\n    async _onNewView(data) {\n        const viewType = data.view_type;\n        const activityAllowed = await this.rpc(\"/web_studio/activity_allowed\", {\n            model: this.studio.editedAction.res_model,\n        });\n        if (viewType === \"activity\" && !activityAllowed) {\n            this.env.services.notification.notify({\n                title: false,\n                type: \"danger\",\n                message: this.env._t(\"Activity view unavailable on this model\"),\n            });\n            return;\n        }\n\n        const viewMode = this.studio.editedAction.view_mode + \",\" + viewType;\n        const viewAdded = await this.addViewType(this.studio.editedAction, viewType, {\n            view_mode: viewMode,\n        });\n        if (viewAdded) {\n            return this.studio.reload({ viewType });\n        }\n    }\n\n    /**\n     * @private\n     * @param {Object} action\n     * @param {String} view_type\n     * @param {Object} args\n     * @returns {Promise}\n     */\n    async addViewType(action, viewType, args) {\n        let viewAdded = await this.rpc(\"/web_studio/add_view_type\", {\n            action_type: action.type,\n            action_id: action.id,\n            res_model: action.res_model,\n            view_type: viewType,\n            args: args,\n            context: this.user.context,\n        });\n\n        if (viewAdded !== true) {\n            viewAdded = new Promise((resolve) => {\n                let DialogClass;\n                const dialogProps = {\n                    confirm: async () => {\n                        await this.editAction(action, args);\n                        resolve(true);\n                    },\n                    cancel: () => resolve(false),\n                };\n                if ([\"gantt\", \"calendar\", \"cohort\"].includes(viewType)) {\n                    DialogClass = NewViewDialog;\n                    dialogProps.viewType = viewType;\n                } else if (viewType === \"map\") {\n                    DialogClass = MapNewViewDialog;\n                } else {\n                    this.dialog.add(AlertDialog, {\n                        body: this.env._lt(\n                            \"Creating this type of view is not currently supported in Studio.\"\n                        ),\n                    });\n                    resolve(false);\n                }\n                this.dialog.add(DialogClass, dialogProps);\n            });\n        }\n        return viewAdded;\n    }\n\n    /**\n     * @private\n     * @param {OdooEvent} event\n     */\n    async _onEditAction(data) {\n        const args = data.args;\n        if (!args) {\n            return;\n        }\n        await this.editAction(this.studio.editedAction, args);\n        this.studio.reload();\n    }\n\n    /**\n     * @private\n     * @param {Object} action\n     * @param {Object} args\n     * @returns {Promise}\n     */\n    async editAction(action, args) {\n        this.env.bus.trigger(\"clear_cache\");\n        const result = await this.rpc(\"/web_studio/edit_action\", {\n            action_type: action.type,\n            action_id: action.id,\n            args: args,\n            context: this.user.context,\n        });\n        if (result !== true) {\n            this.dialog.add(AlertDialog, {\n                body: result,\n            });\n        }\n    }\n\n    /**\n     * @private\n     * @param {String} view_mode\n     * @returns {Promise}\n     */\n    async _writeViewMode(viewMode) {\n        await this.editAction(this.studio.editedAction, { view_mode: viewMode });\n        this.studio.reload({ viewType: null });\n    }\n\n    _onDisableView(data) {\n        const viewType = data.view_type;\n        const viewMode = this.studio.editedAction.view_mode\n            .split(\",\")\n            .filter((m) => m !== viewType);\n\n        if (!viewMode.length) {\n            this.dialog.add(AlertDialog, {\n                body: this.env._t(\"You cannot deactivate this view as it is the last one active.\"),\n            });\n        } else {\n            this._writeViewMode(viewMode.toString());\n        }\n    }\n\n    _onSetDefaultView(data) {\n        const viewType = data.view_type;\n        const actionViewModes = this.studio.editedAction.view_mode.split(\",\");\n\n        const viewMode = actionViewModes.filter((vt) => vt !== viewType);\n        viewMode.unshift(viewType);\n\n        return this._writeViewMode(viewMode.toString());\n    }\n\n    _onRestoreDefaultView(data) {\n        const message = this.env._t(\n            \"Are you sure you want to restore the default view?\\r\\nAll customization done with studio on this view will be lost.\"\n        );\n        const { context, views, res_model } = this.studio.editedAction;\n        const viewType = data.view_type;\n\n        const confirm = async () => {\n            const newContext = Object.assign({}, context, {\n                studio: true,\n                lang: false,\n            });\n            this.env.bus.trigger(\"clear_cache\");\n            // To restore the default view from an inherited one, we need first to retrieve the default view id\n            const result = await this.viewService.loadViews(\n                {\n                    resModel: res_model,\n                    views,\n                    context: newContext,\n                },\n                { loadIrFilters: true }\n            );\n\n            return this.rpc(\"/web_studio/restore_default_view\", {\n                view_id: result.views[viewType].id,\n            });\n        };\n\n        this.dialog.add(ConfirmationDialog, {\n            body: message,\n            confirm,\n        });\n    }\n\n    get widgetArgs() {\n        const { editedAction, editedViewType, editedControllerState, x2mEditorPath } = this.studio;\n        return [\n            {\n                action: editedAction,\n                viewType: editedViewType,\n                controllerState: editedControllerState,\n                x2mEditorPath: x2mEditorPath,\n                wowlEnv: this.wowlEnv,\n            },\n        ];\n    }\n}\n\nregistry.category(\"actions\").add(\"web_studio.view_editor\", EditorAdapter);\n", "/** @odoo-module */\n\nimport { useBus, useService } from \"@web/core/utils/hooks\";\nimport { _lt } from \"@web/core/l10n/translation\";\nimport { sprintf } from \"@web/core/utils/strings\";\nimport { localization } from \"@web/core/l10n/localization\";\nimport { registry } from \"@web/core/registry\";\n\nimport { Component, useState } from \"@odoo/owl\";\nconst editorTabRegistry = registry.category(\"web_studio.editor_tabs\");\n\nexport class EditorMenu extends Component {\n    setup() {\n        this.l10n = localization;\n        this.studio = useService(\"studio\");\n        this.rpc = useService(\"rpc\");\n        this.state = useState({\n            redo_available: false,\n            undo_available: false,\n            snackbar: undefined,\n        });\n\n        this.nextCrumbId = 1;\n\n        useBus(this.studio.bus, \"UPDATE\", async () => {\n            await this.render(true);\n            this.state.snackbar = \"off\";\n        });\n\n        useBus(this.studio.bus, \"undo_available\", () => {\n            this.state.undo_available = true;\n        });\n        useBus(this.studio.bus, \"undo_not_available\", () => {\n            this.state.undo_available = false;\n        });\n        useBus(this.studio.bus, \"redo_available\", () => {\n            this.state.redo_available = true;\n        });\n        useBus(this.studio.bus, \"redo_not_available\", () => {\n            this.state.redo_available = false;\n        });\n\n        useBus(this.studio.bus, \"toggle_snack_bar\", (e) => {\n            this.state.snackbar = e.detail;\n        });\n    }\n\n    get breadcrumbs() {\n        const { editorTab } = this.studio;\n        const currentTab = this.editorTabs.find((tab) => tab.id === editorTab);\n        const crumbs = [\n            {\n                name: currentTab.name,\n                handler: () => this.openTab(currentTab.id),\n            },\n        ];\n        if (currentTab.id === \"views\") {\n            const { editedViewType, x2mEditorPath } = this.studio;\n            if (editedViewType) {\n                const currentViewType = this.constructor.viewTypes.find(\n                    (vt) => vt.type === editedViewType\n                );\n                crumbs.push({\n                    name: currentViewType.title,\n                    handler: () =>\n                        this.studio.setParams({\n                            x2mEditorPath: [],\n                        }),\n                });\n            }\n            x2mEditorPath.forEach(({ x2mViewType }, index) => {\n                const viewType = this.constructor.viewTypes.find((vt) => vt.type === x2mViewType);\n                crumbs.push({\n                    name: sprintf(\n                        this.env._t(\"Subview %s\"),\n                        (viewType && viewType.title) || this.env._t(\"Other\")\n                    ),\n                    handler: () =>\n                        this.studio.setParams({\n                            x2mEditorPath: x2mEditorPath.slice(0, index + 1),\n                        }),\n                });\n            });\n        } else if (currentTab.id === \"reports\" && this.studio.editedReport) {\n            crumbs.push({\n                name: this.studio.editedReport.data.name,\n                handler: () => this.studio.setParams({}),\n            });\n        }\n        for (const crumb of crumbs) {\n            crumb.id = this.nextCrumbId++;\n        }\n        return crumbs;\n    }\n\n    get activeViews() {\n        const action = this.studio.editedAction;\n        const viewTypes = (action._views || action.views).map(([, type]) => type);\n        return this.constructor.viewTypes.filter((vt) => viewTypes.includes(vt.type));\n    }\n\n    get editorTabs() {\n        const entries = editorTabRegistry.getEntries();\n        return entries.map((entry) => Object.assign({}, entry[1], { id: entry[0] }));\n    }\n\n    openTab(tab) {\n        this.props.switchTab({ tab });\n    }\n}\nEditorMenu.props = {\n    switchTab: Function,\n    switchView: Function,\n};\nEditorMenu.template = \"web_studio.EditorMenu\";\nEditorMenu.viewTypes = [\n    {\n        title: _lt(\"Form\"),\n        type: \"form\",\n        iconClasses: \"fa fa-address-card\",\n    },\n    {\n        title: _lt(\"List\"),\n        type: \"list\",\n        iconClasses: \"oi oi-view-list\",\n    },\n    {\n        title: _lt(\"Kanban\"),\n        type: \"kanban\",\n        iconClasses: \"oi oi-view-kanban\",\n    },\n    {\n        title: _lt(\"Map\"),\n        type: \"map\",\n        iconClasses: \"fa fa-map-marker\",\n    },\n    {\n        title: _lt(\"Calendar\"),\n        type: \"calendar\",\n        iconClasses: \"fa fa-calendar\",\n    },\n    {\n        title: _lt(\"Graph\"),\n        type: \"graph\",\n        iconClasses: \"fa fa-area-chart\",\n    },\n    {\n        title: _lt(\"Pivot\"),\n        type: \"pivot\",\n        iconClasses: \"oi oi-view-pivot\",\n    },\n    {\n        title: _lt(\"Gantt\"),\n        type: \"gantt\",\n        iconClasses: \"fa fa-tasks\",\n    },\n    {\n        title: _lt(\"Cohort\"),\n        type: \"cohort\",\n        iconClasses: \"oi oi-view-cohort\",\n    },\n    {\n        title: _lt(\"Activity\"),\n        type: \"activity\",\n        iconClasses: \"fa fa-clock-o\",\n    },\n    {\n        title: _lt(\"Search\"),\n        type: \"search\",\n        iconClasses: \"oi oi-search\",\n    },\n];\n\neditorTabRegistry\n    .add(\"views\", { name: _lt(\"Views\"), action: \"web_studio.action_editor\" })\n    .add(\"reports\", { name: _lt(\"Reports\") })\n    .add(\"automations\", { name: _lt(\"Automations\") })\n    .add(\"acl\", { name: _lt(\"Access Control\") })\n    .add(\"filters\", { name: _lt(\"Filter Rules\") });\n", "/** @odoo-module */\nimport { Component, useState } from \"@odoo/owl\";\nimport { _t } from \"@web/core/l10n/translation\";\nimport { useBus, useService, useOwnedDialogs } from \"@web/core/utils/hooks\";\nimport { Dialog } from \"@web/core/dialog/dialog\";\nimport { ModelConfiguratorDialog } from \"../../model_configurator/model_configurator\";\nimport { useDialogConfirmation } from \"../../utils\";\n\nclass SimpleNewModelDialog extends Component {\n    static template = \"web_studio.SimpleNewModelDialog\";\n    static components = { Dialog };\n    static props = { close: { type: Function } };\n\n    setup() {\n        this.addDialog = useOwnedDialogs();\n        this.rpc = useService(\"rpc\");\n        this.menus = useService(\"menu\");\n        this.user = useService(\"user\");\n        this.action = useService(\"action\");\n        this.studio = useService(\"studio\");\n        this.state = useState({ modelName: \"\", showValidation: false });\n        const { confirm, cancel } = useDialogConfirmation({\n            confirm: async (data) => {\n                const { menu_id, action_id } = await this.rpc(\"/web_studio/create_new_menu\", {\n                    menu_name: this.state.modelName,\n                    model_id: false,\n                    model_choice: \"new\",\n                    model_options: data.modelOptions,\n                    parent_menu_id: this.menus.getCurrentApp().id,\n                    context: this.user.context,\n                });\n                await this.menus.reload();\n                const action = await this.action.loadAction(action_id);\n                this.menus.setCurrentMenu(menu_id);\n                this.studio.setParams({ action, viewType: \"form\" });\n            },\n        });\n\n        this._confirm = confirm;\n        this._cancel = cancel;\n    }\n\n    get title() {\n        return _t(\"Create a new Model\");\n    }\n\n    confirm(data = {}) {\n        return this._confirm(data);\n    }\n\n    onConfigureModel() {\n        if (!this.state.modelName) {\n            this.state.showValidation = true;\n            return;\n        }\n\n        this.addDialog(ModelConfiguratorDialog, {\n            confirmLabel: _t(\"Create Model\"),\n            confirm: (data) => {\n                this.confirm({ modelOptions: data });\n            },\n        });\n    }\n}\n\nexport class NewModelItem extends Component {\n    static props = {};\n    static template = \"web_studio.NewModelItem\";\n\n    setup() {\n        this.addDialog = useOwnedDialogs();\n        this.menus = useService(\"menu\");\n        this.studio = useService(\"studio\");\n        this.action = useService(\"action\");\n\n        useBus(this.env.bus, \"MENUS:APP-CHANGED\", () => this.render());\n    }\n\n    onClick(ev) {\n        ev.preventDefault();\n        this.addDialog(SimpleNewModelDialog);\n    }\n}\n", "/** @odoo-module */\nimport { NewViewDialog } from \"@web_studio/client_action/editor/new_view_dialogs/new_view_dialog\";\nimport { useService } from \"@web/core/utils/hooks\";\nimport { AlertDialog } from \"@web/core/confirmation_dialog/confirmation_dialog\";\n\nexport class MapNewViewDialog extends NewViewDialog {\n    setup() {\n        super.setup();\n        this.dialog = useService(\"dialog\");\n        this.fieldsChoice = {\n            res_partner: null,\n        };\n    }\n\n    get viewType() {\n        return \"map\";\n    }\n\n    computeSpecificFields(fields) {\n        this.partnerFields = fields.filter(\n            (field) => field.type === \"many2one\" && field.relation === \"res.partner\"\n        );\n        if (!this.partnerFields.length) {\n            this.dialog.add(AlertDialog, {\n                body: this.env._t(\"Contact Field Required\"),\n                contentClass: \"o_web_studio_preserve_space\",\n            });\n            this.props.close();\n        } else {\n            this.fieldsChoice.res_partner = this.partnerFields[0].name;\n        }\n    }\n}\nMapNewViewDialog.template = \"web_studio.MapNewViewDialog\";\nMapNewViewDialog.props = {\n    ...NewViewDialog.props,\n};\ndelete MapNewViewDialog.props.viewType;\n", "/** @odoo-module */\n\nimport { useService } from \"@web/core/utils/hooks\";\nimport { sprintf } from \"@web/core/utils/strings\";\nimport { ConfirmationDialog } from \"@web/core/confirmation_dialog/confirmation_dialog\";\n\nimport { onWillStart } from \"@odoo/owl\";\n\nexport class NewViewDialog extends ConfirmationDialog {\n    setup() {\n        super.setup();\n        this.orm = useService(\"orm\");\n        this.rpc = useService(\"rpc\");\n        this.studio = useService(\"studio\");\n        this.user = useService(\"user\");\n        this.mandatoryStopDate = [\"gantt\", \"cohort\"].includes(this.viewType);\n\n        this.title = sprintf(this.env._t(\"Generate %s View\"), this.viewType);\n\n        this.fieldsChoice = {\n            date_start: null,\n            date_stop: null,\n        };\n\n        onWillStart(async () => {\n            const fieldsGet = await this.orm.call(this.studio.editedAction.res_model, \"fields_get\");\n            const fields = Object.entries(fieldsGet).map(([fName, field]) => {\n                field.name = fName;\n                return field;\n            });\n            fields.sort((first, second) => {\n                if (first.string === second.string) {\n                    return 0;\n                }\n                if (first.string < second.string) {\n                    return -1;\n                }\n                if (first.string > second.string) {\n                    return 1;\n                }\n            });\n            this.computeSpecificFields(fields);\n        });\n    }\n\n    get viewType() {\n        return this.props.viewType;\n    }\n\n    /**\n     * Compute date, row and measure fields.\n     */\n    computeSpecificFields(fields) {\n        this.dateFields = [];\n        this.rowFields = [];\n        this.measureFields = [];\n        fields.forEach((field) => {\n            if (field.store) {\n                // date fields\n                if (field.type === \"date\" || field.type === \"datetime\") {\n                    this.dateFields.push(field);\n                }\n                // row fields\n                if (this.constructor.GROUPABLE_TYPES.includes(field.type)) {\n                    this.rowFields.push(field);\n                }\n                // measure fields\n                if (this.constructor.MEASURABLE_TYPES.includes(field.type)) {\n                    // id and sequence are not measurable\n                    if (field.name !== \"id\" && field.name !== \"sequence\") {\n                        this.measureFields.push(field);\n                    }\n                }\n            }\n        });\n        if (this.dateFields.length) {\n            this.fieldsChoice.date_start = this.dateFields[0].name;\n            this.fieldsChoice.date_stop = this.dateFields[0].name;\n        }\n    }\n\n    async _confirm() {\n        await this.rpc(\"/web_studio/create_default_view\", {\n            model: this.studio.editedAction.res_model,\n            view_type: this.viewType,\n            attrs: this.fieldsChoice,\n            context: this.user.context,\n        });\n        super._confirm();\n    }\n}\nNewViewDialog.template = \"web_studio.NewViewDialog\";\nNewViewDialog.GROUPABLE_TYPES = [\"many2one\", \"char\", \"boolean\", \"selection\", \"date\", \"datetime\"];\nNewViewDialog.MEASURABLE_TYPES = [\"integer\", \"float\"];\nNewViewDialog.props = {\n    ...ConfirmationDialog.props,\n    viewType: String,\n};\ndelete NewViewDialog.props.body;\n", "/** @odoo-module **/\nimport { ComponentAdapter } from \"web.OwlCompatibility\";\nimport ReportEditorManager from \"web_studio.ReportEditorManager\";\nimport { useService } from \"@web/core/utils/hooks\";\nimport { registry } from \"@web/core/registry\";\nimport { standardActionServiceProps } from \"@web/webclient/actions/action_service\";\n\nimport { Component, xml } from \"@odoo/owl\";\n\nclass ReportEditorAdapter extends ComponentAdapter {\n    constructor(props) {\n        props.Component = ReportEditorManager;\n        super(...arguments);\n    }\n\n    setup() {\n        super.setup();\n        this.actionService = useService(\"action\");\n        this.user = useService(\"user\");\n        this.rpc = useService(\"rpc\");\n        this.orm = useService(\"orm\");\n        this.studio = useService(\"studio\");\n        this.reportEnv = {};\n        this.env = Component.env;\n    }\n\n    get handle() {\n        return this.studio.editedReport;\n    }\n\n    async onWillStart() {\n        const proms = [];\n        await this._readReport();\n        await this._loadEnvironment();\n        proms.push(this._readModels());\n        proms.push(this._readWidgetsOptions());\n        proms.push(this._getReportViews());\n        proms.push(this._readPaperFormat());\n        await Promise.all(proms);\n        return super.onWillStart();\n    }\n\n    get widgetArgs() {\n        return [\n            {\n                env: this.reportEnv,\n                //initialState: state,\n                models: this.models,\n                paperFormat: this.paperFormat,\n                report: this.report,\n                reportHTML: this.reportViews.report_html,\n                reportMainViewID: this.reportViews.main_view_id,\n                reportViews: this.reportViews.views,\n                widgetsOptions: this.widgetsOptions,\n            },\n        ];\n    }\n\n    /**\n     * Load and set the report environment.\n     *\n     * If the report is associated to the same model as the Studio action, the\n     * action ids will be used ; otherwise a search on the report model will be\n     * performed.\n     *\n     * @private\n     * @returns {Promise}\n     */\n    async _loadEnvironment() {\n        this.reportEnv.modelName = this.report.model;\n\n        // TODO: Since 13.0, journal entries are also considered as 'account.move',\n        // therefore must filter result to remove them; otherwise not possible\n        // to print invoices and hard to lookup for them if lot of journal entries.\n        let domain = [];\n        if (this.report.model === \"account.move\") {\n            domain = [[\"move_type\", \"!=\", \"entry\"]];\n        }\n\n        const result = await this.orm.search(this.report.model, domain, {\n            context: this.user.context,\n        });\n        this.reportEnv.ids = result;\n        this.reportEnv.currentId = this.reportEnv.ids && this.reportEnv.ids[0];\n    }\n    /**\n     * Read the models (ir.model) name and model to display them in a\n     * user-friendly way in the sidebar (see AbstractReportComponent).\n     *\n     * @private\n     * @returns {Promise}\n     */\n    async _readModels() {\n        const models = await this.orm.searchRead(\n            \"ir.model\",\n            [\n                [\"transient\", \"=\", false],\n                [\"abstract\", \"=\", false],\n            ],\n            [\"name\", \"model\"],\n            { context: this.user.context }\n        );\n        this.models = {};\n        models.forEach((model) => {\n            this.models[model.model] = model.name;\n        });\n    }\n    /**\n     * @private\n     * @returns {Promise}\n     */\n    async _readReport() {\n        const result = await this.orm.read(\"ir.actions.report\", [this.handle.res_id], undefined, {\n            context: this.user.context,\n        });\n        this.report = result[0];\n    }\n    /**\n     * @private\n     * @returns {Promise}\n     */\n    async _readPaperFormat() {\n        this.paperFormat = \"A4\";\n        const result = await this.rpc(\"/web_studio/read_paperformat\", {\n            report_id: this.handle.res_id,\n            context: this.user.context,\n        });\n        this.paperFormat = result[0];\n    }\n    /**\n     * Load the widgets options for t-options directive in sidebar.\n     *\n     * @private\n     * @returns {Promise}\n     */\n    async _readWidgetsOptions() {\n        this.widgetsOptions = await this.rpc(\"/web_studio/get_widgets_available_options\", {\n            context: this.user.context,\n        });\n    }\n    /**\n     * @private\n     * @returns {Promise<Object>}\n     */\n    async _getReportViews() {\n        // SAD: FIXME calling this when there are no record for the model crashes (no currentId)\n        // used to show a danger notification\n        this.reportViews = await this.rpc(\"/web_studio/get_report_views\", {\n            record_id: this.reportEnv.currentId,\n            report_name: this.report.report_name,\n        });\n    }\n\n    _trigger_up(ev) {\n        switch (ev.name) {\n            case \"studio_edit_report\":\n                this._editReport(ev.data);\n                break;\n            case \"open_record_form_view\":\n                this.actionService.doAction(\n                    {\n                        type: \"ir.actions.act_window\",\n                        res_model: \"ir.actions.report\",\n                        res_id: this.handle.res_id,\n                        views: [[false, \"form\"]],\n                        target: \"current\",\n                    },\n                    { clearBreadcrumbs: true }\n                );\n                break;\n        }\n        super._trigger_up(...arguments);\n    }\n\n    /**\n     * @private\n     * @param {Object} values\n     * @returns {Promise}\n     */\n    async _editReport(values) {\n        const result = await this.rpc(\"/web_studio/edit_report\", {\n            report_id: this.report.id,\n            values: values,\n            context: this.user.context,\n        });\n        this.report = result[0];\n        this.render(true);\n    }\n}\n\n// We need this to wrap in a div\n// ViewEditor doesn't need this because it extends AbstractEditor, and defines a template\nexport class ReportEditor extends Component {}\nReportEditor.template = xml`<div class=\"o_web_studio_client_action\"><ReportEditorAdapter /></div>`;\nReportEditor.components = { ReportEditorAdapter };\nReportEditor.props = { ...standardActionServiceProps };\nregistry.category(\"actions\").add(\"web_studio.report_editor\", ReportEditor);\n", "/** @odoo-module **/\nimport { COLORS, BG_COLORS, ICONS } from \"@web_studio/utils\";\nimport { FileInput } from \"@web/core/file_input/file_input\";\nimport CustomFileInput from \"web.CustomFileInput\";\nimport { useService } from \"@web/core/utils/hooks\";\n\nimport { Component, onWillUpdateProps, useRef, useState } from \"@odoo/owl\";\n\nconst DEFAULT_ICON = {\n    backgroundColor: BG_COLORS[5],\n    color: COLORS[4],\n    iconClass: ICONS[0],\n};\n\n/**\n * Icon creator\n *\n * Component which purpose is to design an app icon. It can be an uploaded image\n * which will be displayed as is, or an icon customized with the help of presets\n * of colors and icon symbols (@see web_studio.utils for the full list of colors\n * and icon classes).\n * @extends Component\n */\nexport class IconCreator extends Component {\n    /**\n     * @param {Object} [props]\n     * @param {string} [props.backgroundColor] Background color of the custom\n     *      icon.\n     * @param {string} [props.color] Color of the custom icon.\n     * @param {boolean} props.editable\n     * @param {string} [props.iconClass] Font Awesome class of the custom icon.\n     * @param {string} props.type 'base64' (if an actual image) or 'custom_icon'.\n     * @param {number} [props.uploaded_attachment_id] Databse ID of an uploaded\n     *      attachment\n     * @param {string} [props.webIconData] Base64-encoded string representing\n     *      the icon image.\n     */\n    setup() {\n        this.COLORS = COLORS;\n        this.BG_COLORS = BG_COLORS;\n        this.ICONS = ICONS;\n\n        this.iconRef = useRef(\"app-icon\");\n\n        // FIXME: for now, the IconCreator can be spawned in a pure wowl environment (by clicking\n        // on the 'edit' icon of an existing app) and in the legacy environment (through the app\n        // creator)\n        this.FileInput = FileInput;\n        this.fileInputProps = {\n            acceptedFileExtensions: \"image/png\",\n            resModel: \"res.users\",\n        };\n        try {\n            const user = useService(\"user\");\n            this.orm = useService(\"orm\");\n            this.fileInputProps.resId = user.userId;\n        } catch (e) {\n            if (e.message === \"Service user is not available\") {\n                // we are in a legacy environment, so use the legacy CustomFileInput as\n                // the new one requires the new http service\n                this.FileInput = CustomFileInput;\n                this.fileInputProps = {\n                    accepted_file_extensions: \"image/png\",\n                    action: \"/web/binary/upload_attachment\",\n                    id: this.env.session.uid,\n                    model: \"res.users\",\n                };\n            }\n        }\n        this.rpc = useService(\"rpc\");\n\n        this.state = useState({ iconClass: this.props.iconClass });\n        this.show = useState({\n            backgroundColor: false,\n            color: false,\n            iconClass: false,\n        });\n\n        onWillUpdateProps((nextProps) => {\n            if (\n                this.constructor.enableTransitions &&\n                nextProps.iconClass !== this.props.iconClass\n            ) {\n                this.applyIconTransition(nextProps.iconClass);\n            } else {\n                this.state.iconClass = nextProps.iconClass;\n            }\n        });\n    }\n\n    applyIconTransition(nextIconClass) {\n        const iconEl = this.iconRef.el;\n        if (!iconEl) {\n            return;\n        }\n\n        iconEl.classList.remove(\"o-fading-in\");\n        iconEl.classList.remove(\"o-fading-out\");\n\n        iconEl.onanimationend = () => {\n            this.state.iconClass = nextIconClass;\n            iconEl.onanimationend = () => {\n                iconEl.onanimationend = null;\n                iconEl.classList.remove(\"o-fading-in\");\n            };\n            iconEl.classList.remove(\"o-fading-out\");\n            iconEl.classList.add(\"o-fading-in\");\n        };\n        iconEl.classList.add(\"o-fading-out\");\n    }\n\n    //--------------------------------------------------------------------------\n    // Handlers\n    //--------------------------------------------------------------------------\n\n    onDesignIconClick() {\n        this.props.onIconChange({\n            type: \"custom_icon\",\n            ...DEFAULT_ICON,\n        });\n    }\n\n    /**\n     * @param {Object[]} files\n     */\n    async onFileUploaded([file]) {\n        if (!file) {\n            // Happens when cancelling upload\n            return;\n        }\n        let res;\n        if (this.orm) {\n            res = await this.orm.read(\"ir.attachment\", [file.id], [\"datas\"]);\n        } else {\n            res = await this.rpc({\n                model: \"ir.attachment\",\n                method: \"read\",\n                args: [[file.id], [\"datas\"]],\n            });\n        }\n\n        this.props.onIconChange({\n            type: \"base64\",\n            uploaded_attachment_id: file.id,\n            webIconData: \"data:image/png;base64,\" + res[0].datas.replace(/\\s/g, \"\"),\n        });\n    }\n\n    /**\n     * @param {string} palette\n     * @param {string} value\n     */\n    onPaletteItemClick(palette, value) {\n        if (this.props[palette] === value) {\n            return; // same value\n        }\n        this.props.onIconChange({\n            backgroundColor: this.props.backgroundColor,\n            color: this.props.color,\n            iconClass: this.props.iconClass,\n            type: \"custom_icon\",\n            [palette]: value,\n        });\n    }\n\n    /**\n     * @param {string} palette\n     */\n    onTogglePalette(palette) {\n        for (const pal in this.show) {\n            if (pal === palette) {\n                this.show[pal] = !this.show[pal];\n            } else if (this.show[pal]) {\n                this.show[pal] = false;\n            }\n        }\n    }\n}\n\nIconCreator.defaultProps = DEFAULT_ICON;\nIconCreator.props = {\n    backgroundColor: { type: String, optional: 1 },\n    color: { type: String, optional: 1 },\n    editable: { type: Boolean, optional: 1 },\n    iconClass: { type: String, optional: 1 },\n    type: { validate: (t) => [\"base64\", \"custom_icon\"].includes(t) },\n    uploaded_attachment_id: { type: Number, optional: 1 },\n    webIconData: { type: String, optional: 1 },\n    onIconChange: Function,\n};\nIconCreator.template = \"web_studio.IconCreator\";\nIconCreator.enableTransitions = true;\n", "/** @odoo-module **/\nimport { Dialog } from \"@web/core/dialog/dialog\";\nimport { Component, useState } from \"@odoo/owl\";\nimport { _lt, _t } from \"@web/core/l10n/translation\";\nimport { session } from \"@web/session\";\n\n/** You might wonder why I defined all these strings here and not in the template.\n * The reason is that I wanted clear templates that use a single element to render an option,\n * meaning that the label and helper text had to be defined here in the code.\n */\nfunction getModelOptions() {\n    const modelOptions = {\n        use_partner: {\n            label: _lt(\"Contact details\"),\n            help: _lt(\"Get contact, phone and email fields on records\"),\n            value: false,\n        },\n        use_responsible: {\n            label: _lt(\"User assignment\"),\n            help: _lt(\"Assign a responsible to each record\"),\n            value: false,\n        },\n        use_date: {\n            label: _lt(\"Date & Calendar\"),\n            help: _lt(\"Assign dates and visualize records in a calendar\"),\n            value: false,\n        },\n        use_double_dates: {\n            label: _lt(\"Date range & Gantt\"),\n            help: _lt(\"Define start/end dates and visualize records in a Gantt chart\"),\n            value: false,\n        },\n        use_stages: {\n            label: _lt(\"Pipeline stages\"),\n            help: _lt(\"Stage and visualize records in a custom pipeline\"),\n            value: false,\n        },\n        use_ltags: {\n            label: _lt(\"Tags\"),\n            help: _lt(\"Categorize records with custom tags\"),\n            value: false,\n        },\n        use_image: {\n            label: _lt(\"Picture\"),\n            help: _lt(\"Attach a picture to a record\"),\n            value: false,\n        },\n        lines: {\n            label: _lt(\"Lines\"),\n            help: _lt(\"Add details to your records with an embedded list view\"),\n            value: false,\n        },\n        use_notes: {\n            label: _lt(\"Notes\"),\n            help: _lt(\"Write additional notes or comments\"),\n            value: false,\n        },\n        use_value: {\n            label: _lt(\"Monetary value\"),\n            help: _lt(\"Set a price or cost on records\"),\n            value: false,\n        },\n        use_company: {\n            label: _lt(\"Company\"),\n            help: _lt(\"Restrict a record to a specific company\"),\n            value: false,\n        },\n        use_sequence: {\n            label: _lt(\"Custom Sorting\"),\n            help: _lt(\"Manually sort records in the list view\"),\n            value: true,\n        },\n        use_mail: {\n            label: _lt(\"Chatter\"),\n            help: _lt(\"Send messages, log notes and schedule activities\"),\n            value: true,\n        },\n        use_active: {\n            label: _lt(\"Archiving\"),\n            help: _lt(\"Archive deprecated records\"),\n            value: true,\n        },\n    };\n    if (!session.display_switch_company_menu) {\n        delete modelOptions.use_company;\n    }\n    return modelOptions;\n}\n\nexport class ModelConfigurator extends Component {\n    setup() {\n        this.state = useState({ saving: false });\n        this.options = useState(getModelOptions());\n    }\n\n    /**\n     * Handle the confirmation of the dialog, just fires an event\n     * to whoever instanciated it.\n     */\n    async onConfirm() {\n        try {\n            this.state.saving = true;\n\n            const mappedOptions = Object.entries(this.options)\n                .filter((opt) => opt[1].value)\n                .map((opt) => opt[0]);\n\n            await this.props.onConfirmOptions(mappedOptions);\n        } finally {\n            this.state.saving = false;\n        }\n    }\n}\n\nModelConfigurator.template = \"web_studio.ModelConfigurator\";\nModelConfigurator.components = {};\nModelConfigurator.props = {\n    embed: { type: Boolean, optional: true },\n    label: { type: String },\n    onConfirmOptions: Function,\n    onPrevious: Function,\n};\n\nexport class ModelConfiguratorDialog extends Component {\n    static components = { Dialog, ModelConfigurator };\n    static template = \"web_studio.ModelConfiguratorDialog\";\n\n    static props = {\n        confirm: { type: Function },\n        close: { type: Function },\n        confirmLabel: { type: String, optional: true },\n    };\n\n    async onConfirm(data) {\n        await this.props.confirm(data);\n        this.props.close();\n    }\n\n    onPrevious() {\n        this.props.close();\n    }\n\n    get title() {\n        return _t(\"Suggested features for your new model\");\n    }\n}\n", "/** @odoo-module */\n\nimport { Dropdown } from \"@web/core/dropdown/dropdown\";\nimport { DropdownItem } from \"@web/core/dropdown/dropdown_item\";\nimport { useService } from \"@web/core/utils/hooks\";\nimport { browser } from \"@web/core/browser/browser\";\nimport { download } from \"@web/core/network/download\";\nimport { ConfirmationDialog } from \"@web/core/confirmation_dialog/confirmation_dialog\";\nimport { FileInput } from \"@web/core/file_input/file_input\";\n\nimport { Component } from \"@odoo/owl\";\n\nexport class HomeMenuCustomizer extends Component {\n    setup() {\n        this.rpc = useService(\"rpc\");\n        this.ui = useService(\"ui\");\n        this.notification = useService(\"notification\");\n        this.company = useService(\"company\");\n        this.user = useService(\"user\");\n        this.actionManager = useService(\"action\");\n        this.menus = useService(\"menu\");\n        this.dialogManager = useService(\"dialog\");\n    }\n\n    setBackgroundImage(attachment_id) {\n        return this.rpc(\"/web_studio/set_background_image\", {\n            attachment_id: attachment_id,\n            context: this.user.context,\n        });\n    }\n    /**\n     * Export all customizations done by Studio in a zip file containing Odoo\n     * modules.\n     */\n    exportCusto() {\n        download({ url: \"/web_studio/export\", data: {} });\n    }\n    /**\n     * Open a dialog allowing to import new modules\n     * (e.g. exported customizations).\n     */\n    importCusto() {\n        const action = {\n            name: \"Import modules\",\n            res_model: \"base.import.module\",\n            views: [[false, \"form\"]],\n            type: \"ir.actions.act_window\",\n            target: \"new\",\n            context: {\n                dialog_size: \"medium\",\n            },\n        };\n        const options = {\n            onClose: () => this.menus.reload(),\n        };\n        this.actionManager.doAction(action, options);\n    }\n\n    async confirmReset() {\n        this.ui.block();\n        try {\n            await this.rpc(\"/web_studio/reset_background_image\", {\n                context: this.user.context,\n            });\n            browser.location.reload();\n        } finally {\n            this.ui.unblock();\n        }\n    }\n\n    resetBackground() {\n        this.dialogManager.add(ConfirmationDialog, {\n            body: this.env._t(\"Are you sure you want to reset the background image?\"),\n            title: this.env._t(\"Confirmation\"),\n            confirm: () => this.confirmReset(),\n        });\n    }\n\n    async onBackgroundUpload([file]) {\n        if (!file) {\n            this.notification.add(this.env._t(\"Could not change the background\"), {\n                sticky: true,\n                type: \"warning\",\n            });\n        } else {\n            this.ui.block();\n            try {\n                await this.setBackgroundImage(file.id);\n                browser.location.reload();\n            } finally {\n                this.ui.unblock();\n            }\n        }\n    }\n}\nHomeMenuCustomizer.template = \"web_studio.HomeMenuCustomizer\";\nHomeMenuCustomizer.props = {};\nHomeMenuCustomizer.components = { Dropdown, DropdownItem, FileInput };\n", "/** @odoo-module **/\nimport { onMounted, onWillUnmount } from \"@odoo/owl\";\n\nimport { registry } from \"@web/core/registry\";\nimport { useService } from \"@web/core/utils/hooks\";\nimport { EnterpriseNavBar } from \"@web_enterprise/webclient/navbar/navbar\";\nimport { NotEditableActionError } from \"../../studio_service\";\nimport { HomeMenuCustomizer } from \"./home_menu_customizer/home_menu_customizer\";\nimport { useStudioServiceAsReactive } from \"@web_studio/studio_service\";\n\nconst menuButtonsRegistry = registry.category(\"studio_navbar_menubuttons\");\nexport class StudioNavbar extends EnterpriseNavBar {\n    setup() {\n        super.setup();\n        this.studio = useStudioServiceAsReactive();\n        this.actionManager = useService(\"action\");\n        this.user = useService(\"user\");\n        this.dialogManager = useService(\"dialog\");\n        this.notification = useService(\"notification\");\n        onMounted(() => {\n            this.env.bus.off(\"HOME-MENU:TOGGLED\", this);\n            this._updateMenuAppsIcon();\n        });\n\n        const onMenuButtonsUpdate = () => this.render();\n        menuButtonsRegistry.addEventListener(\"UPDATE\", onMenuButtonsUpdate);\n        onWillUnmount(() => menuButtonsRegistry.removeEventListener(\"UPDATE\", onMenuButtonsUpdate));\n    }\n    onMenuToggle() {\n        this.studio.toggleHomeMenu();\n    }\n    closeStudio() {\n        this.studio.leave();\n    }\n    async onNavBarDropdownItemSelection(menu) {\n        if (menu.actionID) {\n            try {\n                await this.studio.open(this.studio.MODES.EDITOR, menu.actionID);\n            } catch (e) {\n                if (e instanceof NotEditableActionError) {\n                    const options = { type: \"danger\" };\n                    this.notification.add(\n                        this.env._t(\"This action is not editable by Studio\"),\n                        options\n                    );\n                    return;\n                }\n                throw e;\n            }\n        }\n    }\n    get hasBackgroundAction() {\n        return this.studio.editedAction || this.studio.MODES.APP_CREATOR === this.studio.mode;\n    }\n    get isInApp() {\n        return this.studio.mode === this.studio.MODES.EDITOR;\n    }\n    _onNotesClicked() {\n        // LPE fixme: dbuuid should be injected into session_info python side\n        const action = {\n            type: \"ir.actions.act_url\",\n            url: `http://pad.odoo.com/p/customization-${this.user.db.uuid}`,\n        };\n        // LPE Fixme: this could be either the local AM or the GlobalAM\n        // we don(t care i-here as we open an url anyway)\n        this.actionManager.doAction(action);\n    }\n\n    get menuButtons() {\n        return Object.fromEntries(menuButtonsRegistry.getEntries());\n    }\n}\nStudioNavbar.template = \"web_studio.StudioNavbar\";\nStudioNavbar.components.HomeMenuCustomizer = HomeMenuCustomizer;\n", "/** @odoo-module **/\n\nimport { ActionContainer } from \"@web/webclient/actions/action_container\";\nimport { useService } from \"@web/core/utils/hooks\";\nimport { registry } from \"@web/core/registry\";\nimport { KeepLast } from \"@web/core/utils/concurrency\";\nimport { onWillStart, onWillUpdateProps } from \"@odoo/owl\";\nimport { useStudioServiceAsReactive } from \"@web_studio/studio_service\";\n\nconst editorTabRegistry = registry.category(\"web_studio.editor_tabs\");\n\nexport class StudioActionContainer extends ActionContainer {\n    setup() {\n        super.setup();\n        this.actionService = useService(\"action\");\n        this.studio = useStudioServiceAsReactive();\n        this.rpc = useService(\"rpc\");\n\n        let actionKey = 1;\n        const onUiUpdate = () => {\n            actionKey++;\n        };\n        this.env.bus.addEventListener(\"ACTION_MANAGER:UPDATE\", onUiUpdate);\n        owl.onWillUnmount(() =>\n            this.env.bus.removeEventListener(\"ACTION_MANAGER:UPDATE\", onUiUpdate)\n        );\n\n        const doAction = async (action, options) => {\n            try {\n                await this.actionService.doAction(action, options);\n                this.actionKey = actionKey;\n            } catch (e) {\n                if (action !== \"web_studio.action_editor\") {\n                    // Fallback on the actionEditor, except if the actionEditor crashes\n                    this.studio.setParams({ editorTab: \"views\" });\n                }\n                // Rethrow anyway: the error doesn't originates from a user's action\n                throw e;\n            }\n        };\n\n        onWillStart(async () => {\n            const action = await this.getStudioAction();\n            doAction(action);\n            await Promise.resolve();\n        });\n\n        const willUpdateKeepLast = new KeepLast();\n        onWillUpdateProps(async () => {\n            if (this.studio.reset || this.actionKey !== actionKey) {\n                const action = await willUpdateKeepLast.add(this.getStudioAction());\n                doAction(action, { clearBreadcrumbs: true });\n                await Promise.resolve();\n            }\n        });\n    }\n    async getStudioAction() {\n        const { editorTab, editedAction, editedReport, editedViewType } = this.studio;\n        const tab = editorTabRegistry.get(editorTab);\n        if (editorTab === \"views\") {\n            if (editedViewType) {\n                return \"web_studio.view_editor\";\n            }\n            return tab.action;\n        }\n        if (tab.action) {\n            return tab.action;\n        } else if (editorTab === \"reports\" && editedReport) {\n            return \"web_studio.report_editor\";\n        } else {\n            const action = await this.rpc(\"/web_studio/get_studio_action\", {\n                action_name: editorTab,\n                model: editedAction.res_model,\n                view_id: editedAction.view_id && editedAction.view_id[0], // Not sure it is correct or desirable\n            });\n            action.help = action.help && owl.markup(action.help);\n            return action;\n        }\n    }\n}\nStudioActionContainer.props = {\n    ...ActionContainer.props,\n    reloadId: { type: Number },\n};\n", "/** @odoo-module **/\n\nimport { registry } from \"@web/core/registry\";\nimport { useBus, useService } from \"@web/core/utils/hooks\";\nimport { cleanDomFromBootstrap } from \"@web/legacy/utils\";\nimport { standardActionServiceProps } from \"@web/webclient/actions/action_service\";\nimport { computeAppsAndMenuItems } from \"@web/webclient/menus/menu_helpers\";\nimport { AppCreator } from \"./app_creator/app_creator\";\nimport { Editor } from \"./editor/editor\";\nimport { StudioNavbar } from \"./navbar/navbar\";\nimport { StudioHomeMenu } from \"./studio_home_menu/studio_home_menu\";\n\nimport { Component, onWillStart, onMounted, onPatched, onWillUnmount } from \"@odoo/owl\";\n\nexport class StudioClientAction extends Component {\n    setup() {\n        this.studio = useService(\"studio\");\n        useBus(this.studio.bus, \"UPDATE\", () => {\n            this.render();\n            cleanDomFromBootstrap();\n        });\n\n        this.menus = useService(\"menu\");\n        this.actionService = useService(\"action\");\n        this.homeMenuProps = {\n            apps: computeAppsAndMenuItems(this.menus.getMenuAsTree(\"root\")).apps,\n        };\n        useBus(this.env.bus, \"MENUS:APP-CHANGED\", () => {\n            this.homeMenuProps = {\n                apps: computeAppsAndMenuItems(this.menus.getMenuAsTree(\"root\")).apps,\n            };\n            this.render(true);\n        });\n\n        onWillStart(this.onWillStart);\n        onMounted(this.onMounted);\n        onPatched(this.onPatched);\n        onWillUnmount(this.onWillUnmount);\n    }\n\n    onWillStart() {\n        return this.studio.ready;\n    }\n\n    onMounted() {\n        this.studio.pushState();\n        document.body.classList.add(\"o_in_studio\"); // FIXME ?\n    }\n\n    onPatched() {\n        this.studio.pushState();\n    }\n\n    onWillUnmount() {\n        document.body.classList.remove(\"o_in_studio\");\n    }\n\n    async onNewAppCreated({ action_id, menu_id }) {\n        await this.menus.reload();\n        this.menus.setCurrentMenu(menu_id);\n        const action = await this.actionService.loadAction(action_id);\n        this.studio.setParams({\n            mode: this.studio.MODES.EDITOR,\n            editorTab: \"views\",\n            action,\n            viewType: \"form\",\n        });\n    }\n}\nStudioClientAction.template = \"web_studio.StudioClientAction\";\nStudioClientAction.props = { ...standardActionServiceProps };\nStudioClientAction.components = {\n    StudioNavbar,\n    StudioHomeMenu,\n    Editor,\n    AppCreator,\n};\nStudioClientAction.target = \"fullscreen\";\n\nregistry.category(\"lazy_components\").add(\"StudioClientAction\", StudioClientAction);\n// force: true to bypass the studio lazy loading action next time and just use this one directly\nregistry.category(\"actions\").add(\"studio\", StudioClientAction, { force: true });\n", "/** @odoo-module **/\n\nimport { Dialog } from \"@web/core/dialog/dialog\";\nimport { _lt } from \"@web/core/l10n/translation\";\nimport { useService } from \"@web/core/utils/hooks\";\nimport { IconCreator } from \"@web_studio/client_action/icon_creator/icon_creator\";\n\nimport { Component, useState } from \"@odoo/owl\";\n\nexport class IconCreatorDialog extends Component {\n    setup() {\n        this.user = useService(\"user\");\n        this.rpc = useService(\"rpc\");\n        this.menus = useService(\"menu\");\n        this.initialAppData = { ...this.props.editedAppData };\n        this.editedAppData = useState(this.props.editedAppData);\n    }\n\n    /**\n     * @param {Object} icon\n     */\n    onIconChanged(icon) {\n        for (const key in this.editedAppData) {\n            delete this.editedAppData[key];\n        }\n        for (const key in icon) {\n            this.editedAppData[key] = icon[key];\n        }\n    }\n\n    async saveIcon() {\n        const { type } = this.initialAppData;\n        const appId = this.props.appId;\n        let iconValue;\n        if (this.editedAppData.type !== type) {\n            // different type\n            if (this.editedAppData.type === \"base64\") {\n                iconValue = this.editedAppData.uploaded_attachment_id;\n            } else {\n                const { iconClass, color, backgroundColor } = this.editedAppData;\n                iconValue = [iconClass, color, backgroundColor];\n            }\n        } else if (this.editedAppData.type === \"custom_icon\") {\n            // custom icon changed\n            const { iconClass, color, backgroundColor } = this.editedAppData;\n            if (\n                this.initialAppData.iconClass !== iconClass ||\n                this.initialAppData.color !== color ||\n                this.initialAppData.backgroundColor !== backgroundColor\n            ) {\n                iconValue = [iconClass, color, backgroundColor];\n            }\n        } else if (this.editedAppData.uploaded_attachment_id) {\n            // new attachment\n            iconValue = this.editedAppData.uploaded_attachment_id;\n        }\n\n        if (iconValue) {\n            await this.rpc(\"/web_studio/edit_menu_icon\", {\n                context: this.user.context,\n                icon: iconValue,\n                menu_id: appId,\n            });\n            await this.menus.reload();\n        }\n        this.props.close();\n    }\n}\nIconCreatorDialog.title = _lt(\"Edit Application Icon\");\nIconCreatorDialog.props = {\n    editedAppData: Object,\n    appId: Number,\n    close: Function,\n};\nIconCreatorDialog.template = \"web_studio.IconCreatorDialog\";\nIconCreatorDialog.components = { Dialog, IconCreator };\n", "/** @odoo-module **/\nimport { HomeMenu } from \"@web_enterprise/webclient/home_menu/home_menu\";\nimport { useService } from \"@web/core/utils/hooks\";\nimport { NotEditableActionError } from \"../../studio_service\";\nimport { IconCreatorDialog } from \"./icon_creator_dialog/icon_creator_dialog\";\n\nimport { onMounted, onWillUnmount, useRef } from \"@odoo/owl\";\nconst NEW_APP_BUTTON = {\n    isNewAppButton: true,\n    label: \"New App\",\n    webIconData: \"/web_studio/static/src/img/default_icon_app.png\",\n};\n\n/**\n * Studio home menu\n *\n * Studio version of the standard enterprise home menu. It has roughly the same\n * implementation, with the exception of the app icon edition and the app creator.\n * @extends HomeMenu\n */\nexport class StudioHomeMenu extends HomeMenu {\n    /**\n     * @param {Object} props\n     * @param {Object[]} props.apps application icons\n     * @param {string} props.apps[].action\n     * @param {number} props.apps[].id\n     * @param {string} props.apps[].label\n     * @param {string} props.apps[].parents\n     * @param {(boolean|string|Object)} props.apps[].webIcon either:\n     *      - boolean: false (no webIcon)\n     *      - string: path to Odoo icon file\n     *      - Object: customized icon (background, class and color)\n     * @param {string} [props.apps[].webIconData]\n     * @param {string} props.apps[].xmlid\n     */\n    setup() {\n        super.setup(...arguments);\n\n        this.user = useService(\"user\");\n        this.studio = useService(\"studio\");\n        this.notifications = useService(\"notification\");\n        this.dialog = useService(\"dialog\");\n        this.root = useRef(\"root\");\n\n        onMounted(() => {\n            this.canEditIcons = true;\n            document.body.classList.add(\"o_home_menu_background\");\n            document.body.classList.toggle(\"o_home_menu_background_custom\", this.menus.getMenu(\"root\").backgroundImage);\n        });\n\n        onWillUnmount(() => {\n            document.body.classList.remove(\"o_home_menu_background\", \"o_home_menu_background_custom\");\n        })\n    }\n\n    //--------------------------------------------------------------------------\n    // Getters\n    //--------------------------------------------------------------------------\n\n    get displayedApps() {\n        return [...super.displayedApps, NEW_APP_BUTTON];\n    }\n\n    //--------------------------------------------------------------------------\n    // Protected\n    //--------------------------------------------------------------------------\n\n    async _openMenu(menu) {\n        if (menu.isNewAppButton) {\n            this.canEditIcons = false;\n            return this.studio.open(this.studio.MODES.APP_CREATOR);\n        } else {\n            try {\n                await this.studio.open(this.studio.MODES.EDITOR, menu.actionID);\n                this.menus.setCurrentMenu(menu);\n            } catch (e) {\n                if (e instanceof NotEditableActionError) {\n                    const options = { type: \"danger\" };\n                    this.notifications.add(\n                        this.env._t(\"This action is not editable by Studio\"),\n                        options\n                    );\n                    return;\n                }\n                throw e;\n            }\n        }\n    }\n\n    //--------------------------------------------------------------------------\n    // Handlers\n    //--------------------------------------------------------------------------\n\n    /**\n     * @param {Object} app\n     */\n    onEditIconClick(app) {\n        if (!this.canEditIcons) {\n            return;\n        }\n        const editedAppData = {};\n        if (app.webIconData) {\n            Object.assign(editedAppData, {\n                webIconData: app.webIconData,\n                type: \"base64\",\n            });\n        } else {\n            Object.assign(editedAppData, {\n                backgroundColor: app.webIcon.backgroundColor,\n                color: app.webIcon.color,\n                iconClass: app.webIcon.iconClass,\n                type: \"custom_icon\",\n            });\n        }\n\n        const dialogProps = {\n            editedAppData,\n            appId: app.id,\n        };\n        this.dialog.add(IconCreatorDialog, dialogProps);\n    }\n}\n\nStudioHomeMenu.props = { apps: HomeMenu.props.apps };\nStudioHomeMenu.template = \"web_studio.StudioHomeMenu\";\n", "/** @odoo-module */\n\nimport { WithSearch } from \"@web/search/with_search/with_search\";\n\nimport { Component, xml, useSubEnv, onError } from \"@odoo/owl\";\n\nconst HEIGHT = \"height: 100%;\";\n\nexport class StudioView extends Component {\n    setup() {\n        this.style = this.props.setOverlay ? `pointer-events: none; ${HEIGHT}` : HEIGHT;\n        this.withSearchProps = {\n            resModel: this.props.controllerProps.resModel,\n            SearchModel: this.props.SearchModel,\n            context: this.props.context,\n            domain: this.props.domain,\n            globalState: this.props.globalState,\n            searchViewArch: this.props.searchViewArch,\n            searchViewFields: this.props.searchViewFields,\n            irFilters: this.props.searchViewIrFilters,\n        };\n\n        onError(this.env.config.handleRenderingError);\n\n        useSubEnv({\n            config: { ...this.env.config },\n            __beforeLeave__: null,\n            __getGlobalState__: null,\n            __getLocalState__: null,\n            __getContext__: null,\n            __getOrderBy__: null,\n        });\n    }\n}\nStudioView.components = { WithSearch };\nStudioView.template = xml`\n    <div t-att-style=\"style\">\n        <WithSearch t-props=\"withSearchProps\" t-slot-scope=\"search\">\n            <t t-component=\"props.Controller\"\n                t-props=\"props.controllerProps\"\n                context=\"search.context\"\n                domain=\"search.domain\"\n                groupBy=\"search.groupBy\"\n                orderBy=\"search.orderBy\"\n                comparison=\"search.comparison\"\n            />\n        </WithSearch>\n    </div>\n`;\n", "/** @odoo-module */\nimport { useComponent, useEnv } from \"@odoo/owl\";\n\nexport function useDialogConfirmation({ confirm, cancel, before, close }) {\n    before = before || (() => {});\n    confirm = confirm || (() => {});\n    cancel = cancel || (() => {});\n    if (!close) {\n        const component = useComponent();\n        close = () => component.props.close();\n    }\n\n    let isProtected = false;\n    async function canExecute() {\n        if (isProtected) {\n            return false;\n        }\n        isProtected = true;\n        await before();\n        return true;\n    }\n\n    async function execute(cb, ...args) {\n        let succeeded = false;\n        try {\n            succeeded = await cb(...args);\n        } catch (e) {\n            close();\n            throw e;\n        }\n        if (succeeded === undefined || succeeded) {\n            return close();\n        }\n        isProtected = false;\n    }\n\n    async function _confirm(...args) {\n        if (!(await canExecute())) {\n            return;\n        }\n        return execute(confirm, ...args);\n    }\n\n    async function _cancel(...args) {\n        if (!(await canExecute())) {\n            return;\n        }\n        return execute(cancel, ...args);\n    }\n\n    const env = useEnv();\n    env.dialogData.close = () => _cancel();\n\n    return { confirm: _confirm, cancel: _cancel };\n}\n", "/** @odoo-module */\nimport { _lt } from \"@web/core/l10n/translation\";\n\nimport { Component, xml } from \"@odoo/owl\";\n/*\n * Injected in the Field.js template\n * Allows to overlay the Field's Component widget to prompt\n * for editing a x2many subview\n */\nexport class FieldContentOverlay extends Component {}\nFieldContentOverlay.translateViewType = {\n    list: _lt(\"List\"),\n    form: _lt(\"Form\"),\n};\nFieldContentOverlay.template = xml`\n  <div class=\"position-relative\">\n    <t t-slot=\"default\" />\n    <div class=\"o-web-studio-edit-x2manys-buttons w-100 h-100 d-flex justify-content-center gap-3 position-absolute start-0 top-0 opacity-75 bg-dark\" t-if=\"props.displayOverlay\" style=\"z-index: 1000;\">\n        <button class=\"btn btn-primary btn-secondary o_web_studio_editX2Many align-self-center\"\n        t-foreach=\"['list', 'form']\" t-as=\"vType\" t-key=\"vType\"\n        t-on-click=\"() => props.onEditViewType(vType)\"\n        t-att-data-type=\"vType\">\n        Edit <t t-esc=\"constructor.translateViewType[vType]\" /> view\n        </button>\n    </div> \n  </div>`;\n", "/** @odoo-module */\n\nimport { Dialog } from \"@web/core/dialog/dialog\";\n\nimport { Component, useRef } from \"@odoo/owl\";\n\nexport class FieldSelectorDialog extends Component {\n    setup() {\n        this.selectRef = useRef(\"select\");\n    }\n    onConfirm() {\n        const field = this.selectRef.el.value;\n        this.props.onConfirm(field);\n        this.props.close();\n    }\n    onCancel() {\n        this.props.close();\n    }\n}\nFieldSelectorDialog.template = \"web_studio.FieldSelectorDialog\";\nFieldSelectorDialog.components = { Dialog };\n", "/** @odoo-module */\nimport { Field } from \"@web/views/fields/field\";\nimport { FieldContentOverlay } from \"./field_content_overlay\";\n\nimport { useStudioRef, studioIsVisible } from \"@web_studio/client_action/view_editors/utils\";\n\nimport { useState } from \"@odoo/owl\";\n\n/*\n * Field:\n * - Displays an Overlay for X2Many fields\n * - handles invisible\n */\nexport class FieldStudio extends Field {\n    setup() {\n        super.setup();\n        this.state = useState({\n            displayOverlay: false,\n        });\n        useStudioRef(\"rootRef\", this.onClick);\n    }\n    get fieldComponentProps() {\n        const fieldComponentProps = super.fieldComponentProps;\n        delete fieldComponentProps.studioXpath;\n        delete fieldComponentProps.hasEmptyPlaceholder;\n        delete fieldComponentProps.hasLabel;\n        delete fieldComponentProps.studioIsVisible;\n        return fieldComponentProps;\n    }\n    get classNames() {\n        const classNames = super.classNames;\n        classNames[\"o_web_studio_show_invisible\"] = !studioIsVisible(this.props);\n        classNames[\"o-web-studio-editor--element-clickable\"] = !!this.props.studioXpath;\n        if (this.studioIsEmpty()) {\n            delete classNames[\"o_field_empty\"];\n            classNames[\"o_web_studio_widget_empty\"] = true;\n        }\n        return classNames;\n    }\n\n    studioIsEmpty() {\n        const { name, record, hasLabel } = this.props;\n        if (hasLabel) {\n            return false;\n        }\n        return \"isEmpty\" in this.field\n            ? this.field.isEmpty(record, name)\n            : !record.data[name];\n    }\n\n    getEmptyPlaceholder() {\n        const { hasEmptyPlaceholder, name, record } = this.props;\n        if (!hasEmptyPlaceholder) {\n            return false;\n        }\n        return this.studioIsEmpty() && record.activeFields[name].string;\n    }\n\n    isX2ManyEditable(props) {\n        const { name, record } = props;\n        const field = record.fields[name];\n        if (![\"one2many\", \"many2many\"].includes(field.type)) {\n            return false;\n        }\n        const activeField = record.activeFields[name];\n        if ([\"many2many_tags\", \"hr_org_chart\"].includes(activeField.widget)) {\n            return false;\n        }\n        return true;\n    }\n\n    onEditViewType(viewType) {\n        const { name, record, studioXpath } = this.props;\n        this.env.config.onEditX2ManyView({ viewType, fieldName: name, record, xpath: studioXpath });\n    }\n\n    onClick(ev) {\n        if (ev.target.classList.contains(\"o_web_studio_editX2Many\")) {\n            return;\n        }\n        ev.stopPropagation();\n        ev.preventDefault();\n        this.env.config.onNodeClicked({\n            xpath: this.props.studioXpath,\n            target: ev.target,\n        });\n        this.state.displayOverlay = !this.state.displayOverlay;\n    }\n}\nFieldStudio.components = { ...Field.components, FieldContentOverlay };\nFieldStudio.template = \"web_studio.Field\";\n", "/** @odoo-module **/\nimport { Component, xml } from \"@odoo/owl\";\n\nconst formGrid = xml`\n    <div class=\"o_web_studio_hook\"\n        t-attf-class=\"g-col-sm-{{ props.colSpan }}\"\n        t-att-data-xpath=\"props.xpath\"\n        t-att-data-position=\"props.position\"\n        t-att-data-type=\"props.type\">\n            <span class=\"o_web_studio_hook_separator\" />\n    </div>\n`;\n\nconst kanbanRecord = xml`\n    <span class=\"o_web_studio_hook\"\n        t-att-data-xpath=\"props.xpath\"\n        t-att-data-position=\"props.position\"\n        t-att-data-type=\"props.type\" />\n`;\n\nconst defaultTemplate = xml`\n<div class=\"o_web_studio_hook\" t-att-data-xpath=\"props.xpath\" t-att-data-position=\"props.position\" t-att-data-type=\"props.type\">\n    <span class=\"o_web_studio_hook_separator\" />\n</div>\n`;\n\nexport class StudioHook extends Component {\n    getTemplate(templateName) {\n        return this.constructor.subTemplates[templateName || \"defaultTemplate\"];\n    }\n}\nStudioHook.template = xml`<t t-call=\"{{ getTemplate(props.subTemplate) }}\" />`;\nStudioHook.props = [\"xpath?\", \"position?\", \"type?\", \"colSpan?\", \"subTemplate?\", \"width?\"];\nStudioHook.subTemplates = {\n    formGrid,\n    defaultTemplate,\n    kanbanRecord,\n};\n", "/** @odoo-module */\nimport { ViewButton } from \"@web/views/view_button/view_button\";\nimport { useStudioRef, studioIsVisible } from \"@web_studio/client_action/view_editors/utils\";\n\n/*\n * ViewButton:\n * - Deals with invisible\n * - Click is overriden not to trigger the bound action\n */\nexport class ViewButtonStudio extends ViewButton {\n    setup() {\n        super.setup();\n        useStudioRef(\"rootRef\");\n    }\n    getClassName() {\n        let className = super.getClassName();\n        if (!studioIsVisible(this.props)) {\n            className += \" o_web_studio_show_invisible\";\n        }\n        if (this.props.studioXpath) {\n            className += \" o-web-studio-editor--element-clickable\";\n        }\n        return className;\n    }\n\n    onClick(ev) {\n        if (this.props.tag === \"a\") {\n            ev.preventDefault();\n        }\n        if (!this.props.studioXpath) {\n            return;\n        }\n        this.env.config.onNodeClicked({\n            xpath: this.props.studioXpath,\n            target: ev.currentTarget,\n        });\n    }\n}\nViewButtonStudio.template = \"web_studio.ViewButton\";\nViewButtonStudio.props = [...ViewButton.props, \"studioIsVisible?\", \"studioXpath?\"];\n", "/** @odoo-module */\nimport { Widget } from \"@web/views/widgets/widget\";\n\nexport class WidgetStudio extends Widget {\n    get widgetProps() {\n        const widgetProps = super.widgetProps;\n        delete widgetProps.studioXpath;\n        delete widgetProps.hasEmptyPlaceholder;\n        delete widgetProps.hasLabel;\n        delete widgetProps.studioIsVisible;\n        return widgetProps;\n    }\n}\n", "/** @odoo-module */\nimport { ComponentWrapper } from \"web.OwlCompatibility\";\nimport { mapActiveFieldsToFieldsInfo } from \"@web/views/legacy_utils\";\n\nimport { registry } from \"@web/core/registry\";\n\nfunction isVisible(el) {\n    const style = window.getComputedStyle(el);\n    return style.display !== \"none\";\n}\n\nclass BasicEditorWrapper extends ComponentWrapper {\n    setup() {\n        super.setup();\n        const handleError = this.app.handleError.bind(this.app);\n        this.app.handleError = (...args) => {\n            try {\n                handleError(...args);\n            } catch {\n                // An error when no sub-tree handleError is triggered\n                // It basically means that we let the error pass through\n                // and end up rejecting the different promises.\n            }\n        };\n        const { archInfo, fields } = this.props.controllerProps;\n        const { activeFields } = archInfo;\n        const fieldsInfo = mapActiveFieldsToFieldsInfo(\n            activeFields,\n            fields,\n            this.env.config.type,\n            this.env\n        );\n\n        this.state = {\n            fieldsInfo,\n            getFieldNames: () => {\n                return Object.keys(activeFields);\n            },\n            viewType: this.env.config.type,\n        };\n    }\n    getLocalState() {\n        return {\n            lastClickedXpath: this.lastClickedXpath || null,\n        };\n    }\n    setLastClickedXpath(lastClickedXpath) {\n        this.lastClickedXpath = lastClickedXpath || null;\n    }\n    setLocalState(state = {}) {\n        this.lastClickedXpath = state.lastClickedXpath || null;\n        if (!this.el) {\n            return;\n        }\n\n        const lastClickedXpath = this.lastClickedXpath;\n        this.unselectedElements();\n\n        if (lastClickedXpath) {\n            const el = this.el.querySelector(`[data-studio-xpath=\"${lastClickedXpath}\"]`);\n            if (el && isVisible(el)) {\n                this.env.config.onNodeClicked({\n                    xpath: lastClickedXpath,\n                    target: el,\n                });\n                //////////////////\n                // factorize code!\n                el.closest(\".o-web-studio-editor--element-clickable\").classList.add(\n                    \"o-web-studio-editor--element-clicked\"\n                );\n                ///////////////\n                return;\n            }\n            this.props.resetSidebar();\n        }\n    }\n    unselectedElements() {\n        this.lastClickedXpath = null;\n        this.el.querySelectorAll(\".o-web-studio-editor--element-clicked\").forEach((el) => {\n            el.classList.remove(\"o-web-studio-editor--element-clicked\");\n        });\n    }\n    handleDrop() {}\n    highlightNearestHook($helper, position) {\n        const draggedEl = $helper[0];\n        const studioStructure = $helper.data(\"structure\");\n        const pos = { x: position.pageX, y: position.pageY };\n        draggedEl.dataset.studioStructure = studioStructure;\n        return this.env.config.executeCallback(\"highlightNearestHook\", draggedEl, pos);\n    }\n    setSelectable() {}\n    selectField(fName) {\n        this.env.config.executeCallback(\"selectField\", fName);\n    }\n}\nregistry.category(\"wowl_editors_wrappers\").add(\"form\", BasicEditorWrapper);\nregistry.category(\"wowl_editors_wrappers\").add(\"kanban\", BasicEditorWrapper);\n\nclass ListEditorWrapper extends BasicEditorWrapper {\n    setup() {\n        super.setup();\n        const { columns } = this.props.controllerProps.archInfo;\n\n        const colFieldInfo = {};\n        for (const col of columns) {\n            if (col.type === \"field\") {\n                colFieldInfo[col.name] = col;\n            }\n        }\n\n        const listFieldsInfo = this.state.fieldsInfo[\"list\"];\n        for (const fName of Object.keys(listFieldsInfo)) {\n            const fInfo = { ...listFieldsInfo[fName] };\n            const { attrs } = colFieldInfo[fName] || {};\n            listFieldsInfo[fName] = {\n                ...(attrs || {}),\n                ...fInfo,\n                ...colFieldInfo[fName],\n            };\n        }\n    }\n\n    setLocalState(state = {}) {\n        this.lastClickedXpath = state.lastClickedXpath || null;\n        if (!this.el) {\n            return;\n        }\n\n        const lastClickedXpath = this.lastClickedXpath;\n        this.unselectedElements();\n\n        if (lastClickedXpath) {\n            const el = this.el.querySelector(\n                `th[data-studio-xpath=\"${lastClickedXpath}\"], button[data-studio-xpath=\"${lastClickedXpath}\"]`\n            );\n            if (el && isVisible(el)) {\n                el.click();\n                return;\n            }\n            this.props.resetSidebar();\n        }\n    }\n}\nregistry.category(\"wowl_editors_wrappers\").add(\"list\", ListEditorWrapper);\n", "/** @odoo-module */\n\nimport { formView } from \"@web/views/form/form_view\";\n\nimport { Component } from \"@odoo/owl\";\n\nconst components = formView.Controller.components;\n\nexport class ChatterContainer extends components.ChatterContainer {\n    _insertFromProps(props) {\n        props = { ...props };\n        delete props.studioXpath;\n        return super._insertFromProps(props);\n    }\n    onClick(ev) {\n        this.env.config.onNodeClicked({\n            xpath: this.props.studioXpath,\n            target: ev.target,\n        });\n    }\n}\nChatterContainer.template = \"web_studio.ChatterContainer\";\nChatterContainer.props = {\n    ...ChatterContainer.props,\n    studioXpath: String,\n};\n\nexport class ChatterContainerHook extends Component {\n    onClick() {\n        this.env.config.onViewChange({\n            structure: \"chatter\",\n            ...this.props.chatterData,\n        });\n    }\n}\nChatterContainerHook.template = \"web_studio.ChatterContainerHook\";\nChatterContainerHook.components = { ChatterContainer: components.ChatterContainer };\nChatterContainerHook.props = {\n    chatterData: Object,\n    threadModel: String,\n};\n", "/** @odoo-module */\n\nimport { formView } from \"@web/views/form/form_view\";\nimport { FormEditorRenderer } from \"./form_editor_renderer/form_editor_renderer\";\nimport { FormEditorController } from \"./form_editor_controller/form_editor_controller\";\nimport { FormEditorCompiler } from \"./form_editor_compiler\";\nimport { registry } from \"@web/core/registry\";\nimport { omit } from \"@web/core/utils/objects\";\nimport { makeModelErrorResilient } from \"@web_studio/client_action/view_editors/utils\";\nimport { getModifier } from \"@web/views/view_compiler\";\n\nclass EditorArchParser extends formView.ArchParser {\n    parse(arch, models, modelName) {\n        const parsed = super.parse(...arguments);\n        const noFetchFields = Object.entries(parsed.fieldNodes)\n            .filter(([fname, field]) => field.attrs && field.attrs.studio_no_fetch)\n            .map((f) => f[0]);\n        parsed.fieldNodes = omit(parsed.fieldNodes, ...noFetchFields);\n        parsed.activeFields = omit(parsed.activeFields, ...noFetchFields);\n        return parsed;\n    }\n\n    parseXML() {\n        const result = super.parseXML(...arguments);\n        const copy = result.cloneNode(true);\n\n        Array.from(copy.querySelectorAll(\"field > tree, field > form, field > kanban\")).forEach(\n            (el) => {\n                if (getModifier(el, \"invisible\")) {\n                    el.remove();\n                }\n            }\n        );\n\n        return copy;\n    }\n}\n\nclass Model extends formView.Model {}\nModel.Record = class RecordNoEdit extends formView.Model.Record {\n    get isInEdition() {\n        return false;\n    }\n};\n\nconst formEditor = {\n    ...formView,\n    ArchParser: EditorArchParser,\n    Compiler: FormEditorCompiler,\n    Renderer: FormEditorRenderer,\n    Controller: FormEditorController,\n    props(genericProps, editor, config) {\n        const props = formView.props(genericProps, editor, config);\n        props.Model = makeModelErrorResilient(Model);\n        props.preventEdit = true;\n        return props;\n    },\n};\nregistry.category(\"studio_editors\").add(\"form\", formEditor);\n", "/** @odoo-module */\n\nimport { isComponentNode } from \"@web/views/view_compiler\";\nimport { computeXpath, applyInvisible } from \"@web_studio/client_action/view_editors/xml_utils\";\nimport { createElement } from \"@web/core/utils/xml\";\nimport { formView } from \"@web/views/form/form_view\";\nimport { objectToString } from \"@web/views/form/form_compiler\";\n\nconst interestingSelector = [\n    \":not(field) sheet\", // A hook should be present to add elements in the sheet\n    \":not(field) field\", // should be clickable and draggable\n    \":not(field) notebook\", // should be able to add pages\n    \":not(field) page\", // should be clickable\n    \":not(field) button\", // should be clickable\n    \":not(field) label\", // should be clickable\n    \":not(field) group\", // any group: outer or inner\n    \":not(field) group group > *\", // content of inner groups serves as main dropzone\n    \":not(field) div.oe_chatter\",\n    \":not(field) .oe_avatar\",\n].join(\", \");\n\nexport class FormEditorCompiler extends formView.Compiler {\n    compile(key, params = {}) {\n        params.enableInvisible = true;\n        const xml = this.templates[key];\n\n        // One pass to compute and add the xpath for the arch's node location\n        // onto that node.\n        for (const el of xml.querySelectorAll(interestingSelector)) {\n            const xpath = computeXpath(el);\n            el.setAttribute(\"studioXpath\", xpath);\n        }\n\n        // done after construction of xpaths\n        this.addChatter = true;\n        this.chatterData = {\n            remove_message_ids: false,\n            remove_follower_ids: false,\n            remove_activity_ids: false,\n        };\n        this.avatars = [];\n\n        const compiled = super.compile(key, params);\n\n        const sheetBg = compiled.querySelector(\".o_form_sheet_bg\");\n        if (sheetBg) {\n            const studioHook = createElement(\"StudioHook\", {\n                xpath: `\"${sheetBg.getAttribute(\"studioXpath\")}\"`,\n                position: \"'inside'\",\n                type: \"'insideSheet'\",\n            });\n            sheetBg.querySelector(\".o_form_sheet\").prepend(studioHook);\n        }\n\n        if (this.addChatter) {\n            const chatterContainerHook = createElement(\"ChatterContainerHook\", {\n                threadModel: `__comp__.props.record.resModel`,\n                chatterData: objectToString(this.chatterData),\n            });\n            const el = compiled.querySelector(\".o_form_sheet\") || compiled;\n            el.after(chatterContainerHook);\n        } else {\n            const parent = compiled.querySelector(\".o_FormRenderer_chatterContainer\");\n            parent.removeAttribute(\"t-attf-class\"); // avoid class o-aside\n            parent.removeAttribute(\"t-if\");\n        }\n\n        let buttonBox = compiled.querySelector(\"ButtonBox\");\n\n        const buttonHook = createElement(\n            \"t\",\n            [createElement(\"ButtonHook\", { add_buttonbox: !buttonBox })],\n            { \"t-set-slot\": `slot_button_hook` }\n        );\n\n        if (!buttonBox) {\n            buttonBox = createElement(\"ButtonBox\");\n            const el = compiled.querySelector(\".o_form_sheet\") || compiled;\n            el.prepend(buttonBox);\n        }\n        buttonBox.insertAdjacentElement(\"afterbegin\", buttonHook);\n\n        const fieldStatus = compiled.querySelector(`Field[type=\"'statusbar'\"]`); // change selector at some point\n        if (!fieldStatus) {\n            const add_statusbar = !compiled.querySelector(\".o_form_statusbar\");\n            const statusBarFieldHook = createElement(\"StatusBarFieldHook\", { add_statusbar });\n            const el = compiled.querySelector(\".o_form_sheet_bg\") || compiled;\n            el.prepend(statusBarFieldHook);\n        }\n\n        // Note: the ribon does not allow to remove an existing avatar!\n        const title = compiled.querySelector(\".oe_title\");\n        if (title) {\n            if (\n                !title.querySelector(\":scope > h1 > [isAvatar]\") && // check it works with <field class=\"oe_avatar\" ... />\n                !title.parentElement.querySelector(\":scope > [isAvatar]\")\n            ) {\n                const avatarHook = createElement(\"AvatarHook\", {\n                    fields: `__comp__.props.record.fields`,\n                });\n                const h1 = title.querySelector(\":scope > h1\");\n                if (h1 && h1.classList.contains(\"d-flex\") && h1.classList.contains(\"flex-row\")) {\n                    avatarHook.setAttribute(\"class\", `'oe_avatar ms-3 p-3 o_web_studio_avatar h4'`);\n                    h1.append(avatarHook);\n                } else {\n                    avatarHook.setAttribute(\"class\", `'oe_avatar ms-3 me-3 o_web_studio_avatar'`);\n                    title.before(avatarHook);\n                }\n            }\n        }\n        for (const el of this.avatars) {\n            el.removeAttribute(\"isAvatar\");\n        }\n\n        compiled.querySelectorAll(\":not(.o_form_statusbar) Field\").forEach((el) => {\n            el.setAttribute(\"hasEmptyPlaceholder\", \"true\");\n        });\n\n        compiled\n            .querySelectorAll(`InnerGroup > t[t-set-slot][subType=\"'item_component'\"] Field`)\n            .forEach((el) => {\n                el.setAttribute(\"hasLabel\", \"true\");\n            });\n\n        return compiled;\n    }\n\n    applyInvisible(invisible, compiled, params) {\n        return applyInvisible(invisible, compiled, params);\n    }\n\n    createLabelFromField(fieldId, fieldName, fieldString, label, params) {\n        const studioXpath = label.getAttribute(\"studioXpath\");\n        const formLabel = super.createLabelFromField(...arguments);\n        formLabel.setAttribute(\"studioXpath\", `\"${studioXpath}\"`);\n        if (formLabel.hasAttribute(\"t-if\")) {\n            formLabel.setAttribute(\"studioIsVisible\", formLabel.getAttribute(\"t-if\"));\n            formLabel.removeAttribute(\"t-if\");\n        }\n        return formLabel;\n    }\n\n    compileNode(node, params = {}, evalInvisible = true) {\n        const nodeType = node.nodeType;\n        // Put a xpath on the currentSlot containing the future compiled element.\n        // Do it early not to be bothered by recursive call to compileNode.\n        const currentSlot = params.currentSlot;\n        if (nodeType === 1 && currentSlot && !currentSlot.hasAttribute(\"studioXpath\")) {\n            const parentElement = node.parentElement;\n            if (parentElement && parentElement.tagName === \"page\") {\n                const xpath = computeXpath(node.parentElement);\n                currentSlot.setAttribute(\"studioXpath\", `\"${xpath}\"`);\n                // If the page has an OuterGroup as last child, don't add a page studioHook\n                if (!parentElement.querySelector(\":scope > group:last-child > group\")) {\n                    const pageHookProps = {\n                        position: \"'inside'\",\n                        type: \"'page'\",\n                        xpath: `\"${xpath}\"`,\n                    };\n                    currentSlot.setAttribute(\"studioHookProps\", objectToString(pageHookProps));\n                }\n            } else {\n                const xpath = node.getAttribute(\"studioXpath\");\n                currentSlot.setAttribute(\"studioXpath\", `\"${xpath}\"`);\n            }\n        }\n\n        if (nodeType === 1 && node.getAttribute(\"studio_no_fetch\")) {\n            return;\n        }\n\n        const compiled = super.compileNode(node, params, true); // always evalInvisible\n\n        if (nodeType === 1) {\n            // Put a xpath on anything of interest.\n            if (node.hasAttribute(\"studioXpath\")) {\n                const xpath = node.getAttribute(\"studioXpath\");\n                if (isComponentNode(compiled)) {\n                    compiled.setAttribute(\"studioXpath\", `\"${xpath}\"`);\n                } else if (!compiled.hasAttribute(\"studioXpath\")) {\n                    compiled.setAttribute(\"studioXpath\", xpath);\n                }\n            }\n\n            if (node.tagName === \"notebook\") {\n                const originalChildren = Array.from(node.children);\n                Array.from(compiled.children).forEach((elem, index) => {\n                    if (!elem.hasAttribute(\"studioXpath\")) {\n                        const studioXpath = originalChildren[index].getAttribute(\"studioXpath\");\n                        elem.setAttribute(\"studioXpath\", `\"${studioXpath}\"`);\n                        const pageHookProps = {\n                            position: \"'inside'\",\n                            type: \"'page'\",\n                            xpath: `\"${studioXpath}\"`,\n                        };\n                        elem.setAttribute(\"studioHookProps\", objectToString(pageHookProps));\n                    }\n                });\n            }\n\n            if (node.classList.contains(\"oe_chatter\")) {\n                this.addChatter = false;\n                // compiled is not ChatterContainer!\n                const chatterNode = compiled.querySelector(\"ChatterContainer\");\n                const xpath = node.getAttribute(\"studioXpath\");\n                chatterNode.setAttribute(\"studioXpath\", `\"${xpath}\"`);\n                compiled.classList.add(\"o-web-studio-editor--element-clickable\");\n            }\n            if (node.classList.contains(\"oe_avatar\")) {\n                compiled.setAttribute(\"isAvatar\", true);\n                this.avatars.push(compiled);\n            }\n            const name = node.getAttribute(\"name\"); // not sure that part works\n            if (name === \"message_ids\") {\n                this.chatterData.remove_message_ids = true;\n            } else if (name === \"message_follower_ids\") {\n                this.chatterData.remove_follower_ids = true;\n            } else if (name === \"activity_ids\") {\n                this.chatterData.remove_activity_ids = true;\n            }\n        }\n        return compiled;\n    }\n\n    isAlwaysInvisible() {\n        return false;\n    }\n}\n", "/** @odoo-module */\n\nimport { formView } from \"@web/views/form/form_view\";\n\nfunction rebindLegacyDatapoint(datapoint, basicModel, evalContext) {\n    const newDp = {};\n\n    const descrs = Object.getOwnPropertyDescriptors(datapoint);\n    Object.defineProperties(newDp, descrs);\n\n    const getRecordEvalContext = basicModel._getRecordEvalContext.bind(basicModel);\n    basicModel._getRecordEvalContext = (record, forDomain) => {\n        if (record.id === \"__can'ttouchthis__\") {\n            return evalContext;\n        }\n        return getRecordEvalContext(record, forDomain);\n    };\n\n    newDp.id = \"__can'ttouchthis__\";\n    newDp.evalModifiers = basicModel._evalModifiers.bind(basicModel, newDp);\n    newDp.getContext = basicModel._getContext.bind(basicModel, newDp);\n    newDp.getDomain = basicModel._getDomain.bind(basicModel, newDp);\n    newDp.getFieldNames = basicModel._getFieldNames.bind(basicModel, newDp);\n    newDp.isDirty = basicModel.isDirty.bind(basicModel, newDp.id);\n    newDp.isNew = basicModel.isNew.bind(basicModel, newDp.id);\n    return newDp;\n}\n\nfunction applyParentRecordOnModel(model, parentRecord) {\n    const legacyHandle = parentRecord.__bm_handle__;\n    const legacyDp = parentRecord.model.__bm__.localData[legacyHandle];\n    const evalContext = parentRecord.model.__bm__._getRecordEvalContext(legacyDp);\n\n    const load = model.load;\n    model.load = async (...args) => {\n        const res = await load.call(model, ...args);\n        const localData = model.__bm__.localData;\n\n        const parentDp = rebindLegacyDatapoint(legacyDp, model.__bm__, evalContext);\n        localData[parentDp.id] = parentDp;\n\n        const rootDp = localData[model.root.__bm_handle__];\n        rootDp.parentID = parentDp.id;\n        return res;\n    };\n}\n\nexport class FormEditorController extends formView.Controller {\n    setup() {\n        super.setup();\n        this.mailTemplate = null;\n        this.hasAttachmentViewerInArch = false;\n\n        if (this.props.parentRecord) {\n            applyParentRecordOnModel(this.model, this.props.parentRecord);\n        }\n    }\n}\nFormEditorController.props = {\n    ...formView.Controller.props,\n    parentRecord: { type: [Object, { value: null }], optional: true },\n};\n", "/** @odoo-module */\n\nimport { formView } from \"@web/views/form/form_view\";\nimport { studioIsVisible } from \"@web_studio/client_action/view_editors/utils\";\nimport { StudioHook } from \"@web_studio/client_action/view_editors/components/studio_hook_component\";\n\nimport { Component, useChildSubEnv, useEffect, useRef } from \"@odoo/owl\";\nconst components = formView.Renderer.components;\n\n/*\n * Overrides for FormGroups: Probably the trickiest part of all, especially InnerGroup\n * - Append droppable hooks below every visible field, or on empty OuterGroup\n * - Elements deal with invisible themselves\n */\n\n// An utility function that extends the common API parts of groups\nfunction extendGroup(GroupClass) {\n    class Group extends GroupClass {\n        get allClasses() {\n            let classes = super.allClasses;\n            if (!studioIsVisible(this.props)) {\n                classes = `${classes || \"\"} o_web_studio_show_invisible`;\n            }\n            if (this.props.studioXpath) {\n                classes = `${classes || \"\"} o-web-studio-editor--element-clickable`;\n            }\n            return classes;\n        }\n        _getItems() {\n            const items = super._getItems();\n            return items.map(([k, v]) => {\n                v = Object.assign({}, v);\n                v.studioIsVisible = v.isVisible;\n                v.isVisible = v.isVisible || this.env.config.studioShowInvisible;\n                if (v.subType === \"item_component\") {\n                    v.props.studioIsVisible = v.studioIsVisible;\n                    v.props.studioXpath = v.studioXpath;\n                }\n                return [k, v];\n            });\n        }\n    }\n    Group.props = [...GroupClass.props, \"studioXpath?\", \"studioIsVisible?\"];\n    Group.components = { ...GroupClass.components, StudioHook };\n    return Group;\n}\n\n// A component to display fields with an automatic label.\n// Those are the only ones (for now), to be draggable internally\n// It should shadow the Field and its Label below\nclass InnerGroupItemComponent extends Component {\n    setup() {\n        const labelRef = useRef(\"labelRef\");\n        const fieldRef = useRef(\"fieldRef\");\n\n        this.labelRef = labelRef;\n\n        useEffect(\n            (studioIsVisible, labelEl, fieldEl) => {\n                // Only label act as the business unit for studio\n                if (labelEl) {\n                    const clickable = labelEl.querySelector(\n                        \".o-web-studio-editor--element-clickable\"\n                    );\n                    if (clickable) {\n                        clickable.classList.remove(\"o-web-studio-editor--element-clickable\");\n                    }\n                    labelEl.classList.add(\"o-web-studio-editor--element-clickable\");\n                    const invisible = labelEl.querySelector(\".o_web_studio_show_invisible\");\n                    if (invisible) {\n                        invisible.classList.remove(\"o_web_studio_show_invisible\");\n                    }\n                    labelEl.classList.toggle(\"o_web_studio_show_invisible\", !studioIsVisible);\n                    labelEl.classList.add(\"o-draggable\");\n                }\n\n                if (fieldEl) {\n                    const clickable = fieldEl.querySelector(\n                        \".o-web-studio-editor--element-clickable\"\n                    );\n                    if (clickable) {\n                        clickable.classList.remove(\"o-web-studio-editor--element-clickable\");\n                    }\n                    const invisible = fieldEl.querySelector(\".o_web_studio_show_invisible\");\n                    if (invisible) {\n                        invisible.classList.remove(\"o_web_studio_show_invisible\");\n                    }\n                    fieldEl.classList.add(\"o-web-studio-element-ghost\");\n                }\n            },\n            () => [this.cell.studioIsVisible, labelRef.el, fieldRef.el]\n        );\n\n        const config = Object.create(this.env.config);\n        config.onNodeClicked = (params) => {\n            params = { ...params, target: labelRef.el || params.target };\n            return this.env.config.onNodeClicked(params);\n        };\n        useChildSubEnv({ config });\n\n        this.onMouseFieldIO = (ev) => {\n            labelRef.el.classList.toggle(\"o-web-studio-ghost-hovered\", ev.type === \"mouseover\");\n        };\n    }\n    get cell() {\n        return this.props.cell;\n    }\n\n    onClicked(ev) {\n        if (ev.target.closest(\".o-web-studio-element-ghost\")) {\n            ev.stopPropagation();\n        }\n        this.env.config.onNodeClicked({ xpath: this.cell.studioXpath, target: this.labelRef.el });\n    }\n}\nInnerGroupItemComponent.template = \"web_studio.Form.InnerGroup.ItemComponent\";\n\nconst _InnerGroup = extendGroup(components.InnerGroup);\nexport class InnerGroup extends _InnerGroup {\n    setup() {\n        super.setup();\n        this.rootRef = useRef(\"rootRef\");\n    }\n    onGroupClicked(ev) {\n        if (ev.target.closest(\".o-web-studio-editor--element-clickable\") !== this.rootRef.el) {\n            return;\n        }\n        this.env.config.onNodeClicked({\n            xpath: this.props.studioXpath,\n            target: ev.target,\n        });\n    }\n\n    getRows() {\n        const rows = super.getRows();\n        if (!this.env.config.studioShowInvisible) {\n            rows.forEach((row) => {\n                row.isVisible = row.some((cell) => cell.studioIsVisible);\n            });\n        }\n        return rows;\n    }\n\n    getStudioHooks() {\n        const hooks = new Map();\n        const rows = this.getRows();\n        const hasRows = rows.length >= 1 && rows[0].length;\n\n        if (!hasRows) {\n            hooks.set(\"inside\", {\n                xpath: this.props.studioXpath,\n                position: \"inside\",\n                subTemplate: \"formGrid\",\n                colSpan: this.props.maxCols,\n            });\n        }\n\n        for (const rowIdx in rows) {\n            const row = rows[rowIdx];\n            const colSpan = row.reduce((acc, val) => acc + val.itemSpan || 1, 0);\n            if (!hooks.has(\"beforeFirst\")) {\n                const cell = row[0];\n                if (cell) {\n                    hooks.set(\"beforeFirst\", {\n                        xpath: cell.studioXpath,\n                        position: \"before\",\n                        subTemplate: \"formGrid\",\n                        width: cell.width,\n                        colSpan,\n                    });\n                }\n            }\n\n            if (\n                row.every((cell) => !cell.studioIsVisible) &&\n                !this.env.config.studioShowInvisible\n            ) {\n                continue;\n            }\n            const cell = row[row.length - 1];\n            if (cell) {\n                hooks.set(`afterRow ${rowIdx}`, {\n                    xpath: cell.studioXpath,\n                    position: \"after\",\n                    subTemplate: \"formGrid\",\n                    width: cell.width,\n                    colSpan,\n                });\n            }\n        }\n        return hooks;\n    }\n}\n\nInnerGroup.components.InnerGroupItemComponent = InnerGroupItemComponent;\nInnerGroup.template = \"web_studio.Form.InnerGroup\";\n\n// Simple override for OuterGroups\nexport const OuterGroup = extendGroup(components.OuterGroup);\nOuterGroup.template = \"web_studio.Form.OuterGroup\";\n", "/** @odoo-module */\n\nimport { useDraggable } from \"@web/core/utils/draggable\";\nimport { closest, touching } from \"@web/core/utils/ui\";\nimport { formView } from \"@web/views/form/form_view\";\nimport * as formEditorRendererComponents from \"@web_studio/client_action/view_editors/form/form_editor_renderer/form_editor_renderer_components\";\nimport {\n    cleanHooks,\n    getActiveHook,\n    getDroppedValues,\n    getHooks,\n    useStudioClickedElements,\n    useLegacyOnDropElement,\n    hookPositionTolerance,\n} from \"@web_studio/client_action/view_editors/utils\";\nimport { ChatterContainer, ChatterContainerHook } from \"../chatter_container\";\nimport { StudioHook } from \"@web_studio/client_action/view_editors/components/studio_hook_component\";\nimport { FieldStudio } from \"@web_studio/client_action/view_editors/components/field_studio\";\nimport { WidgetStudio } from \"@web_studio/client_action/view_editors/components/widget_studio\";\nimport { ViewButtonStudio } from \"@web_studio/client_action/view_editors/components/view_button_studio\";\nimport { InnerGroup, OuterGroup } from \"./form_editor_groups\";\n\nimport { useRef, useEffect } from \"@odoo/owl\";\n\nconst components = formView.Renderer.components;\n\nconst HOOK_CLASS_WHITELIST = [\n    \"o_web_studio_field_picture\",\n    \"o_web_studio_field_html\",\n    \"o_web_studio_field_many2many\",\n    \"o_web_studio_field_one2many\",\n    \"o_web_studio_field_tabs\",\n    \"o_web_studio_field_columns\",\n    \"o_web_studio_field_lines\",\n];\nconst HOOK_TYPE_BLACKLIST = [\"genericTag\", \"afterGroup\", \"afterNotebook\", \"insideSheet\"];\n\nconst isBlackListedHook = (draggedEl, hookEl) =>\n    !HOOK_CLASS_WHITELIST.some((cls) => draggedEl.classList.contains(cls)) &&\n    HOOK_TYPE_BLACKLIST.some((t) => hookEl.dataset.type === t);\n\nfunction canDropNotebook(hookEl) {\n    if (hookEl.dataset.type === \"page\") {\n        return false;\n    }\n    if (hookEl.closest(\".o_group\")) {\n        return false;\n    }\n    return true;\n}\n\nfunction canDropGroup(hookEl) {\n    if (hookEl.dataset.type === \"insideGroup\") {\n        return false;\n    }\n    if (hookEl.closest(\".o_group\")) {\n        return false;\n    }\n    return true;\n}\n\nexport class FormEditorRenderer extends formView.Renderer {\n    setup() {\n        super.setup();\n        const rootRef = useRef(\"compiled_view_root\");\n        this.rootRef = rootRef;\n\n        useStudioClickedElements(rootRef);\n\n        // Prepare a legacy handler for JQuery UI's droppable\n        const onLegacyDropped = useLegacyOnDropElement(rootRef);\n\n        // Deals with invisible modifier by reacting to config.studioShowVisible.\n        useEffect(\n            (rootEl, showInvisible) => {\n                if (!rootEl) {\n                    return;\n                }\n                rootEl.classList.add(\"o_web_studio_form_view_editor\");\n                if (showInvisible) {\n                    rootEl\n                        .querySelectorAll(\n                            \":not(.o_FormRenderer_chatterContainer) .o_invisible_modifier\"\n                        )\n                        .forEach((el) => {\n                            el.classList.add(\"o_web_studio_show_invisible\");\n                            el.classList.remove(\"o_invisible_modifier\");\n                        });\n                } else {\n                    rootEl\n                        .querySelectorAll(\n                            \":not(.o_FormRenderer_chatterContainer) .o_web_studio_show_invisible\"\n                        )\n                        .forEach((el) => {\n                            el.classList.remove(\"o_web_studio_show_invisible\");\n                            el.classList.add(\"o_invisible_modifier\");\n                        });\n                }\n\n                // FIXME: legacy: interoperability with legacy studio components\n                $(rootEl).droppable({\n                    accept: \".o_web_studio_component\",\n                    drop: onLegacyDropped,\n                });\n                return () => {\n                    $(rootEl).droppable(\"destroy\");\n                };\n            },\n            () => [rootRef.el, this.env.config.studioShowInvisible]\n        );\n\n        // do this in another way?\n        useEffect(\n            (rootEl) => {\n                if (rootEl) {\n                    const optCols = rootEl.querySelectorAll(\"i.o_optional_columns_dropdown_toggle\");\n                    for (const col of optCols) {\n                        col.classList.add(\"text-muted\");\n                    }\n                }\n            },\n            () => [rootRef.el]\n        );\n\n        // A function that highlights relevant areas when dragging a component/field\n        const highlightNearestHook = (draggedEl, { x, y }) => {\n            cleanHooks(rootRef.el);\n\n            const mouseToleranceRect = {\n                x: x - hookPositionTolerance,\n                y: y - hookPositionTolerance,\n                width: hookPositionTolerance * 2,\n                height: hookPositionTolerance * 2,\n            };\n\n            const touchingEls = touching(getHooks(rootRef.el), mouseToleranceRect);\n            const closestHookEl = closest(touchingEls, { x, y });\n\n            if (!closestHookEl) {\n                return false;\n            }\n\n            const draggingStructure = draggedEl.dataset.studioStructure;\n            switch (draggingStructure) {\n                case \"notebook\": {\n                    if (!canDropNotebook(closestHookEl)) {\n                        return false;\n                    }\n                    break;\n                }\n                case \"group\": {\n                    if (!canDropGroup(closestHookEl)) {\n                        return false;\n                    }\n                    break;\n                }\n            }\n            if (isBlackListedHook(draggedEl, closestHookEl)) {\n                return false;\n            }\n            closestHookEl.classList.add(\"o_web_studio_nearest_hook\");\n            return true;\n        };\n\n        this.env.config.registerCallback(\"highlightNearestHook\", highlightNearestHook);\n\n        useDraggable({\n            ref: rootRef,\n            elements: \".o-draggable\",\n            onDrag({ x, y, element }) {\n                element.classList.remove(\"o-draggable--drop-ready\");\n                if (highlightNearestHook(element, { x, y })) {\n                    element.classList.add(\"o-draggable--drop-ready\");\n                }\n            },\n            onDrop: ({ element }) => {\n                const targetHook = getActiveHook(rootRef.el);\n                if (!targetHook) {\n                    return;\n                }\n                const { xpath, position } = targetHook.dataset;\n                const droppedData = element.dataset;\n                const values = getDroppedValues({ droppedData, xpath, position });\n\n                cleanHooks(rootRef.el);\n\n                if (!values) {\n                    return;\n                }\n                this.env.config.structureChange(values);\n            },\n        });\n\n        this.env.config.registerCallback(\"selectField\", (fName) => {\n            const fieldElement = rootRef.el.querySelector(`.o_field_widget[name=\"${fName}\"]`);\n            if (fieldElement) {\n                fieldElement.click();\n            }\n        });\n    }\n}\n\nclass Setting extends formView.Renderer.components.Setting {\n    static props = {\n        ...formView.Renderer.components.Setting.props,\n        studioXpath: { type: String, optional: true}\n    };\n}\n\nFormEditorRenderer.components = {\n    ...components,\n    ...formEditorRendererComponents,\n    Field: FieldStudio,\n    Widget: WidgetStudio,\n    ViewButton: ViewButtonStudio,\n    ChatterContainer,\n    ChatterContainerHook,\n    InnerGroup,\n    OuterGroup,\n    StudioHook,\n    Setting,\n};\n", "/** @odoo-module */\n\nimport { formView } from \"@web/views/form/form_view\";\nimport { StudioHook } from \"@web_studio/client_action/view_editors/components/studio_hook_component\";\nimport { FieldSelectorDialog } from \"@web_studio/client_action/view_editors/components/field_selector_dialog\";\nimport { studioIsVisible, useStudioRef } from \"@web_studio/client_action/view_editors/utils\";\nimport { useService } from \"@web/core/utils/hooks\";\n\nimport { Component } from \"@odoo/owl\";\n\n/**\n * Overrides and extensions of components used by the FormRenderer\n * As a rule of thumb, elements should be able to handle the props\n * - studioXpath: the xpath to the node in the form's arch to which the component\n *   refers\n * - They generally be clicked on to change their characteristics (in the Sidebar)\n * - The click doesn't trigger default behavior (the view is inert)\n * - They can be draggable (FormLabel referring to a field)\n * - studioIsVisible: all components whether invisible or not, are compiled and rendered\n *   this props allows to toggle the class o_invisible_modifier\n * - They can have studio hooks, that are placeholders for dropping content (new elements, field, or displace elements)\n */\n\nconst components = formView.Renderer.components;\n\n/*\n * FormLabel:\n * - Can be draggable if in InnerGroup\n */\nexport class FormLabel extends components.FormLabel {\n    setup() {\n        super.setup();\n        useStudioRef(\"rootRef\", this.onClick);\n    }\n    get className() {\n        let className = super.className;\n        if (!studioIsVisible(this.props)) {\n            className += \" o_web_studio_show_invisible\";\n        }\n        className += \" o-web-studio-editor--element-clickable\";\n        return className;\n    }\n    onClick(ev) {\n        ev.preventDefault();\n        this.env.config.onNodeClicked({\n            xpath: this.props.studioXpath,\n            target: ev.target,\n        });\n    }\n}\nFormLabel.template = \"web_studio.FormLabel\";\nFormLabel.props = {\n    ...components.FormLabel.props,\n    studioXpath: String,\n    studioIsVisible: { type: Boolean, optional: true },\n};\n\n/*\n * Notebook:\n * - Display every page, the elements in the page handle whether they are invisible themselves\n * - Push a droppable hook on every empty page\n * - Can add a new page\n */\nexport class Notebook extends components.Notebook {\n    computePages(props) {\n        const pages = super.computePages(props);\n        pages.forEach((p) => {\n            p[1].studioIsVisible = p[1].isVisible;\n            p[1].isVisible = p[1].isVisible || this.env.config.studioShowInvisible;\n        });\n        return pages;\n    }\n    onNewPageClicked() {\n        this.env.config.structureChange({\n            type: \"add\",\n            structure: \"page\",\n            position: \"inside\",\n            xpath: this.props.studioXpath,\n        });\n    }\n}\nNotebook.template = \"web_studio.Notebook.Hook\";\nNotebook.components = { ...components.Notebook.components, StudioHook };\nNotebook.props = {\n    ...components.Notebook.props,\n    studioIsVisible: { type: Boolean, optional: true },\n    studioXpath: String,\n};\n\nexport class StatusBarFieldHook extends Component {\n    onClick() {\n        this.env.config.onViewChange({\n            add_statusbar: this.props.add_statusbar,\n            type: \"add\",\n            structure: \"field\",\n            field_description: {\n                field_description: \"Pipeline status bar\",\n                type: \"selection\",\n                selection: [\n                    [\"status1\", this.env._t(\"First Status\")],\n                    [\"status2\", this.env._t(\"Second Status\")],\n                    [\"status3\", this.env._t(\"Third Status\")],\n                ],\n                default_value: true,\n            },\n            target: {\n                tag: \"header\",\n            },\n            new_attrs: {\n                widget: \"statusbar\",\n                options: \"{'clickable': '1'}\",\n            },\n            position: \"inside\",\n        });\n    }\n}\nStatusBarFieldHook.template = \"web_studio.StatusBarFieldHook\";\n\nexport class AvatarHook extends Component {\n    setup() {\n        this.dialogService = useService(\"dialog\");\n    }\n    onClick() {\n        const fields = [];\n        for (const field of Object.values(this.props.fields)) {\n            if (field.type === \"binary\") {\n                fields.push(field);\n            }\n        }\n        this.dialogService.add(FieldSelectorDialog, {\n            fields,\n            showNew: true,\n            onConfirm: (field) => {\n                this.env.config.onViewChange({\n                    structure: \"avatar_image\",\n                    field,\n                });\n            },\n        });\n    }\n}\nAvatarHook.template = \"web_studio.AvatarHook\";\nAvatarHook.props = { fields: Object, class: { type: String, optional: true } };\n\nexport class ButtonHook extends Component {\n    onClick() {\n        this.env.config.onViewChange({\n            structure: \"button\",\n            type: \"add\",\n            add_buttonbox: this.props.add_buttonbox,\n        });\n    }\n}\nButtonHook.template = \"web_studio.ButtonHook\";\n\nexport class ButtonBox extends components.ButtonBox {\n    getButtons() {\n        const maxVisibleButtons = this.getMaxButtons();\n        const visible = [];\n        const additional = [];\n        for (const [slotName, slot] of Object.entries(this.props.slots)) {\n            if (this.env.config.studioShowInvisible || !(\"isVisible\" in slot) || slot.isVisible) {\n                if (visible.length >= maxVisibleButtons) {\n                    additional.push(slotName);\n                } else {\n                    visible.push(slotName);\n                }\n            }\n        }\n        return { visible, additional };\n    }\n}\n\nButtonBox.props = {\n    ...components.ButtonBox.props,\n    studioIsVisible: { type: Boolean, optional: true },\n};\n", "/** @odoo-module */\nimport { registry } from \"@web/core/registry\";\nimport { omit } from \"@web/core/utils/objects\";\nimport { kanbanView } from \"@web/views/kanban/kanban_view\";\nimport { KanbanEditorRenderer } from \"@web_studio/client_action/view_editors/kanban/kanban_editor_renderer\";\nimport { makeModelErrorResilient } from \"@web_studio/client_action/view_editors/utils\";\n\nclass EditorArchParser extends kanbanView.ArchParser {\n    parse(arch, models, modelName) {\n        const parsed = super.parse(...arguments);\n        const noFetchFields = Object.entries(parsed.fieldNodes)\n            .filter(([fname, field]) => field.attrs && field.attrs.studio_no_fetch)\n            .map((f) => f[0]);\n        parsed.fieldNodes = omit(parsed.fieldNodes, ...noFetchFields);\n        parsed.activeFields = omit(parsed.activeFields, ...noFetchFields);\n        return parsed;\n    }\n}\nclass OneRecordModel extends kanbanView.Model {\n    async load() {\n        this.progressAttributes = false;\n        await super.load(...arguments);\n        let list = this.root;\n        let hasRecords;\n        const isGrouped = list.isGrouped;\n        if (!isGrouped) {\n            hasRecords = list.records.length;\n        } else {\n            hasRecords = list.groups.some((g) => g.list.records.length);\n        }\n        if (!hasRecords) {\n            if (isGrouped) {\n                const params = {\n                    ...list.commonGroupParams,\n                    isFolded: false,\n                    count: 0,\n                    value: \"\",\n                    displayName: \"\",\n                    aggregates: {},\n                    groupByField: list.groupByField,\n                    groupDomain: [],\n                    rawContext: list.rawContext,\n                };\n                if ([\"date\", \"datetime\"].includes(list.groupByField.type)) {\n                    params.range = {};\n                }\n                const group = this.createDataPoint(\"group\", params);\n                list.groups.push(group);\n\n                list = group.list;\n            }\n            await list.createRecord();\n            list.editedRecord = null;\n        }\n    }\n}\n\nconst kanbanEditor = {\n    ...kanbanView,\n    ArchParser: EditorArchParser,\n    Renderer: KanbanEditorRenderer,\n    Model: OneRecordModel,\n    props(genericProps, editor, config) {\n        const props = kanbanView.props(genericProps, editor, config);\n        props.defaultGroupBy = props.archInfo.defaultGroupBy;\n        props.Model = makeModelErrorResilient(OneRecordModel);\n        props.limit = 1;\n        props.Renderer = KanbanEditorRenderer;\n        return props;\n    },\n};\nregistry.category(\"studio_editors\").add(\"kanban\", kanbanEditor);\n", "/** @odoo-module */\nimport { KanbanCompiler } from \"@web/views/kanban/kanban_compiler\";\nimport { computeXpath, applyInvisible } from \"../xml_utils\";\nimport { isComponentNode } from \"@web/views/view_compiler\";\nimport { createElement } from \"@web/core/utils/xml\";\nimport { _lt } from \"@web/core/l10n/translation\";\n\nconst interestingSelector = [\n    \"field\",\n    \"widget\",\n    \".dropdown\",\n    \"img.oe_kanban_avatar\",\n    \".o_kanban_record_body\",\n    \".o_kanban_record_bottom\",\n].join(\", \");\n\nexport class KanbanEditorCompiler extends KanbanCompiler {\n    constructor() {\n        super(...arguments);\n        const kanbanBox = this.templates[\"kanban-box\"];\n        this.isDashboard = kanbanBox.closest(\"kanban\").classList.contains(\"o_kanban_dashboard\");\n    }\n\n    applyInvisible(invisible, compiled, params) {\n        return applyInvisible(invisible, compiled, params);\n    }\n\n    compile(key, params = {}) {\n        params.enableInvisible = true;\n        const xml = this.templates[key];\n\n        // One pass to compute and add the xpath for the arch's node location\n        // onto that node.\n        const mainDiv = xml.querySelector(\"div\");\n        const interestingArchNodes = [...xml.querySelectorAll(interestingSelector)];\n        if (mainDiv) {\n            interestingArchNodes.push(mainDiv);\n        }\n        for (const el of interestingArchNodes) {\n            const xpath = computeXpath(el, \"kanban\");\n            el.setAttribute(\"studioXpath\", xpath);\n        }\n\n        const compiled = super.compile(key, params);\n\n        const isKanbanBox = key === \"kanban-box\";\n\n        if (isKanbanBox && !this.isDashboard && mainDiv) {\n            const tagsWidget = xml.querySelector(\"field[widget='many2many_tags']\");\n            if (!tagsWidget) {\n                this.addTagsWidgetHook(compiled);\n            }\n\n            const priorityWidget = xml.querySelector(\"field[widget='priority']\");\n            const favoriteWidget = xml.querySelector(\"field[widget='boolean_favorite']\");\n            if (!priorityWidget && !favoriteWidget) {\n                this.addPriorityHook(compiled);\n            }\n\n            const dropdown = this.templates[\"kanban-menu\"];\n            if (!dropdown) {\n                this.addDropdownHook(compiled);\n            }\n\n            const avatarImg = xml.querySelector(\"img.oe_kanban_avatar\");\n            if (!avatarImg) {\n                this.addAvatarHook(compiled);\n            }\n        }\n\n        compiled.querySelectorAll(\".oe_kanban_avatar\").forEach((el) => {\n            const tIf = el.closest(\"[t-if]\");\n            if (tIf) {\n                const tElse = createElement(\"t\", {\n                    \"t-else\": \"\",\n                    \"t-call\": \"web_studio.KanbanEditorRecord.AvatarPlaceholder\",\n                });\n                tIf.insertAdjacentElement(\"afterend\", tElse);\n            }\n        });\n\n        return compiled;\n    }\n\n    compileField(node) {\n        const compiled = super.compileField(...arguments);\n        if (compiled.tagName === \"span\") {\n            const fieldName = node.getAttribute(\"name\");\n            compiled.setAttribute(\"data-field-name\", fieldName);\n        } else {\n            compiled.setAttribute(\"hasEmptyPlaceholder\", true);\n        }\n\n        return compiled;\n    }\n\n    addStudioHook(node, compiled) {\n        const tNode = createElement(\"t\");\n        if (compiled.hasAttribute(\"t-if\")) {\n            // t-if from the invisible modifier\n            tNode.setAttribute(\"t-if\", compiled.getAttribute(\"t-if\"));\n            compiled.removeAttribute(\"t-if\");\n        }\n        tNode.appendChild(compiled);\n        const xpath = node.getAttribute(\"studioXpath\");\n        const studioHook = createElement(\"StudioHook\", {\n            xpath: `\"${xpath}\"`,\n            position: \"'after'\",\n        });\n        tNode.appendChild(studioHook);\n        return tNode;\n    }\n\n    compileNode(node, params) {\n        const nodeType = node.nodeType;\n        if (nodeType === 1 && (isComponentNode(node) || node.getAttribute(\"studio_no_fetch\"))) {\n            return;\n        }\n\n        let compiled = super.compileNode(...arguments);\n\n        if (nodeType === 1 && compiled) {\n            // Put a xpath on anything of interest.\n            if (node.hasAttribute(\"studioXpath\")) {\n                const xpath = node.getAttribute(\"studioXpath\");\n                if (isComponentNode(compiled)) {\n                    compiled.setAttribute(\"studioXpath\", `\"${xpath}\"`);\n                } else if (!compiled.hasAttribute(\"studioXpath\")) {\n                    compiled.setAttribute(\"studioXpath\", xpath);\n                }\n\n                if (node.classList.contains(\"oe_kanban_avatar\")) {\n                    compiled.setAttribute(\n                        \"t-on-click\",\n                        `(ev) => __comp__.env.config.onNodeClicked({\n                            xpath: \"${xpath}\",\n                            target: ev.target\n                        })`\n                    );\n                    compiled.classList.add(\"o-web-studio-editor--element-clickable\");\n                }\n                if (node.tagName === \"field\" && !isComponentNode(compiled)) {\n                    compiled.setAttribute(\n                        \"t-on-click\",\n                        `(ev) => __comp__.env.config.onNodeClicked({xpath: \"${xpath}\", target: ev.target})`\n                    );\n                    compiled.classList.add(\"o-web-studio-editor--element-clickable\");\n\n                    const fieldName = node.getAttribute(\"name\");\n                    const isEmptyExpr = `__comp__.isFieldValueEmpty(record[\"${fieldName}\"].value)`;\n\n                    // Set empty class\n                    const tattfClassEmpty = `{{ ${isEmptyExpr} ? \"o_web_studio_widget_empty\" : \"\" }}`;\n\n                    const tattfClass = compiled.getAttribute(\"t-attf-class\");\n\n                    const nextAttfClass = tattfClass\n                        ? `${tattfClass} ${tattfClassEmpty}`\n                        : tattfClassEmpty;\n                    compiled.setAttribute(\"t-attf-class\", nextAttfClass);\n\n                    // Set field name on empty\n                    const tOut = compiled.getAttribute(\"t-out\");\n                    compiled.setAttribute(\n                        \"t-out\",\n                        `${isEmptyExpr} ? __comp__.props.record.activeFields[\"${fieldName}\"].string : ${tOut}`\n                    );\n                }\n                if (node.tagName === \"field\" || node.tagName === \"widget\") {\n                    // Don't append a studio hook if a condition is on the tag itself\n                    // otherwise it may cause inconsistencies in the arch itself\n                    // ie `<field t-elif=\"someCondifiton\" /><field name=\"newField\" /><t t-else=\"\"/>` would be invalid\n                    if (\n                        !Array.from(node.attributes).filter((att) =>\n                            [\"t-if\", \"t-elif\", \"t-else\"].includes(att)\n                        )[0]\n                    ) {\n                        compiled = this.addStudioHook(node, compiled);\n                    }\n                }\n            }\n        }\n        return compiled;\n    }\n\n    addTagsWidgetHook(compiled) {\n        const parentElement =\n            compiled.querySelector(\".o_kanban_record_body\") || compiled.querySelector(\"div\");\n        const tagsHook = createElement(\"span\", {\n            class: \"o_web_studio_add_kanban_tags\",\n            \"t-on-click\": `() => __comp__.onAddTagsWidget({\n                xpath: \"${parentElement.getAttribute(\"studioXpath\")}\"\n            })`,\n        });\n        tagsHook.textContent = _lt(\"Add tags\");\n\n        if (parentElement.firstChild) {\n            parentElement.insertBefore(tagsHook, parentElement.firstChild);\n        } else {\n            parentElement.appendChild(tagsHook);\n        }\n    }\n\n    addDropdownHook(compiled) {\n        const parentElement = compiled.querySelector(\"div\");\n        const dropdownHook = createElement(\n            \"div\",\n            [\n                createElement(\"a\", {\n                    class: \"btn fa fa-ellipsis-v\",\n                }),\n            ],\n            {\n                class: \"o_web_studio_add_dropdown o_dropdown_kanban dropdown\",\n                style: \"z-index: 1;\",\n                \"t-on-click\": \"() => __comp__.onAddDropdown()\",\n            }\n        );\n        parentElement.appendChild(dropdownHook);\n    }\n\n    addPriorityHook(compiled) {\n        const parentElement = compiled.querySelector(\"div\");\n        const priorityHook = createElement(\"div\", {\n            class: \"o_web_studio_add_priority oe_kanban_bottom_left align-self-start flex-grow-0\",\n            style: \"z-index: 1;\",\n            \"t-on-click\": \"() => __comp__.onAddPriority()\",\n        });\n        priorityHook.textContent = _lt(\"Add a priority\");\n        parentElement.appendChild(priorityHook);\n    }\n\n    addAvatarHook(compiled) {\n        const parentElement =\n            compiled.querySelector(\".o_kanban_record_bottom\") || compiled.querySelector(\"div\");\n        const avatarHook = createElement(\"div\", {\n            class: \"o_web_studio_add_kanban_image oe_kanban_bottom_right pe-auto\",\n            style: \"z-index: 1;\",\n            \"t-on-click\": \"() => __comp__.onAddAvatar()\",\n        });\n        avatarHook.textContent = _lt(\"Add an avatar\");\n        parentElement.appendChild(avatarHook);\n    }\n\n    /**\n     * In v16, some views use forbidden owl directives (t-on) directly\n     * in the arch. In master, they will be removed. The validation is deactivated\n     * in the js_class used to render those archs, but as in studio we do not use\n     * the js_class, we have to disable the validation in the editor.\n     * @override\n     */\n    validateNode() {}\n}\n", "/** @odoo-module */\n\nimport { kanbanView } from \"@web/views/kanban/kanban_view\";\n\nimport { KanbanEditorCompiler } from \"@web_studio/client_action/view_editors/kanban/kanban_editor_compiler\";\nimport { FieldStudio } from \"@web_studio/client_action/view_editors/components/field_studio\";\nimport { WidgetStudio } from \"@web_studio/client_action/view_editors/components/widget_studio\";\nimport { ViewButtonStudio } from \"@web_studio/client_action/view_editors/components/view_button_studio\";\nimport { StudioHook } from \"@web_studio/client_action/view_editors/components/studio_hook_component\";\nimport { FieldSelectorDialog } from \"@web_studio/client_action/view_editors/components/field_selector_dialog\";\n\nimport {\n    cleanHooks,\n    hookPositionTolerance,\n    getHooks,\n} from \"@web_studio/client_action/view_editors/utils\";\nimport {\n    computeXpath,\n    nodeStudioXpathSymbol,\n} from \"@web_studio/client_action/view_editors/xml_utils\";\nimport { closest, touching } from \"@web/core/utils/ui\";\nimport { useService } from \"@web/core/utils/hooks\";\nimport { AlertDialog, ConfirmationDialog } from \"@web/core/confirmation_dialog/confirmation_dialog\";\n\nimport { Component, xml, useEffect, useRef, onError } from \"@odoo/owl\";\n\nclass FieldStudioKanbanRecord extends FieldStudio {\n    isX2ManyEditable() {\n        return false;\n    }\n}\n\nconst OriginDropdown = kanbanView.Renderer.components.KanbanRecord.components.Dropdown;\nclass Dropdown extends OriginDropdown {\n    setup() {\n        super.setup();\n        const rootRef = useRef(\"root\");\n        this.rootRef = rootRef;\n        useEffect(\n            (rootEl) => {\n                rootEl.classList.add(\"o-web-studio-editor--element-clickable\");\n                if (this.props.hasCoverSetter) {\n                    rootEl.dataset.hasCoverSetter = true;\n                }\n            },\n            () => [rootRef.el]\n        );\n    }\n\n    onTogglerClick() {\n        this.env.config.onNodeClicked({ target: this.rootRef.el, xpath: this.props.studioXpath });\n    }\n}\nDropdown.template = \"web_studio.KanbanEditorRecord.Dropdown\";\nDropdown.props = {\n    ...OriginDropdown.props,\n    studioXpath: { type: String, optional: 1 },\n    hasCoverSetter: { type: Boolean, optional: 1 },\n};\n\nconst KanbanRecord = kanbanView.Renderer.components.KanbanRecord;\nclass SafeKanbanRecord extends KanbanRecord {\n    setup() {\n        super.setup();\n        this.studioHasError = false;\n        onError((error) => {\n            if (this.studioHasError) {\n                throw error;\n            }\n\n            try {\n                this.env.config.handleRenderingError(error);\n            } catch {\n                this.studioHasError = true;\n                this.render(true);\n            }\n        });\n    }\n}\nSafeKanbanRecord.template = \"web_studio.SafeKanbanRecord\";\n\nclass _KanbanEditorRecord extends KanbanRecord {\n    setup() {\n        super.setup();\n        if (this.constructor.KANBAN_MENU_ATTRIBUTE in this.props.templates) {\n            const compiledTemplateMenu =\n                this.props.templates[this.constructor.KANBAN_MENU_ATTRIBUTE];\n            this.dropdownXpath = computeXpath(compiledTemplateMenu, \"kanban\");\n            this.dropdownHasCoverSetter = Boolean(\n                compiledTemplateMenu.querySelectorAll(\"a[data-type='set_cover']\").length\n            );\n        }\n        this.dialogService = useService(\"dialog\");\n        this.studioHasError = false;\n        onError((error) => {\n            if (this.studioHasError) {\n                throw error;\n            }\n\n            try {\n                this.env.config.handleRenderingError(error);\n            } catch {\n                this.studioHasError = true;\n                this.render(true);\n            }\n        });\n\n        useEffect(\n            (el) => {\n                if (!el) {\n                    return;\n                }\n                el.classList.remove(\"oe_kanban_global_click\", \"oe_kanban_global_click_edit\");\n            },\n            () => [this.rootRef.el]\n        );\n\n        const highlightNearestHook = (draggedEl, { x, y }) => {\n            cleanHooks(this.rootRef.el);\n\n            const mouseToleranceRect = {\n                x: x - hookPositionTolerance,\n                y: y - hookPositionTolerance,\n                width: hookPositionTolerance * 2,\n                height: hookPositionTolerance * 2,\n            };\n\n            const touchingEls = touching(getHooks(this.rootRef.el), mouseToleranceRect);\n            const closestHookEl = closest(touchingEls, { x, y });\n\n            if (!closestHookEl) {\n                return false;\n            }\n\n            closestHookEl.classList.add(\"o_web_studio_nearest_hook\");\n            return true;\n        };\n        this.env.config.registerCallback(\"highlightNearestHook\", highlightNearestHook);\n    }\n\n    onGlobalClick() {}\n\n    isFieldValueEmpty(value) {\n        if (value === null) {\n            return true;\n        }\n        if (Array.isArray(value)) {\n            return !value.length;\n        }\n        return !value;\n    }\n\n    onAddTagsWidget({ xpath }) {\n        const fields = [];\n        for (const [fName, field] of Object.entries(this.props.record.fields)) {\n            if (field.type === \"many2many\") {\n                const _field = { ...field, name: fName };\n                fields.push(_field);\n            }\n        }\n\n        if (!fields.length) {\n            this.dialogService.add(AlertDialog, {\n                body: this.env._t(\"You first need to create a many2many field in the form view.\"),\n            });\n            return;\n        }\n\n        this.dialogService.add(FieldSelectorDialog, {\n            fields,\n            onConfirm: (field) => {\n                this.env.config.onViewChange({\n                    type: \"add\",\n                    structure: \"field\",\n                    new_attrs: { name: field },\n                    node: {\n                        attrs: {\n                            [nodeStudioXpathSymbol]: xpath,\n                        },\n                    },\n                    position: \"inside\",\n                });\n            },\n        });\n    }\n\n    onAddDropdown() {\n        this.dialogService.add(ConfirmationDialog, {\n            body: this.env._t(\"Do you want to add a dropdown with colors?\"),\n            confirm: () => {\n                this.env.config.onViewChange({\n                    structure: \"kanban_dropdown\",\n                });\n            },\n        });\n    }\n\n    onAddPriority() {\n        const fields = [];\n        const activeFields = Object.keys(this.props.record.activeFields);\n        for (const [fName, field] of Object.entries(this.props.record.fields)) {\n            if (field.type === \"selection\" && !activeFields.includes(fName)) {\n                const _field = { ...field, name: fName };\n                fields.push(_field);\n            }\n        }\n        this.dialogService.add(FieldSelectorDialog, {\n            fields,\n            showNew: true,\n            onConfirm: (field) => {\n                this.env.config.onViewChange({\n                    structure: \"kanban_priority\",\n                    field,\n                });\n            },\n        });\n    }\n\n    onAddAvatar() {\n        const fields = [];\n        for (const [fName, field] of Object.entries(this.props.record.fields)) {\n            if (\n                field.type === \"many2one\" &&\n                (field.relation === \"res.partner\" || field.relation === \"res.users\")\n            ) {\n                const _field = { ...field, name: fName };\n                fields.push(_field);\n            }\n        }\n        this.dialogService.add(FieldSelectorDialog, {\n            fields,\n            onConfirm: (field) => {\n                this.env.config.onViewChange({\n                    structure: \"kanban_image\",\n                    field,\n                });\n            },\n        });\n    }\n}\n_KanbanEditorRecord.components = {\n    ...KanbanRecord.components,\n    Dropdown,\n    Field: FieldStudioKanbanRecord,\n    Widget: WidgetStudio,\n    StudioHook,\n    ViewButton: ViewButtonStudio,\n};\n_KanbanEditorRecord.menuTemplate = \"web_studio.SafeKanbanRecordMenu\";\n_KanbanEditorRecord.template = \"web_studio.SafeKanbanRecord\";\n\nexport class KanbanEditorRecord extends Component {\n    get KanbanRecord() {\n        if (!this.env.config.isStudioInEdition) {\n            return SafeKanbanRecord;\n        } else {\n            return _KanbanEditorRecord;\n        }\n    }\n    get kanbanRecordProps() {\n        const props = { ...this.props };\n        if (this.env.config.isStudioInEdition) {\n            props.Compiler = KanbanEditorCompiler;\n        }\n        return props;\n    }\n}\nKanbanEditorRecord.template = xml`<t t-component=\"KanbanRecord\" t-props=\"kanbanRecordProps\" />`;\n", "/** @odoo-module */\nimport { kanbanView } from \"@web/views/kanban/kanban_view\";\nimport { KanbanEditorRecord } from \"@web_studio/client_action/view_editors/kanban/kanban_editor_record\";\nimport {\n    useStudioClickedElements,\n    useLegacyOnDropElement,\n} from \"@web_studio/client_action/view_editors/utils\";\n\nimport { useRef, useEffect } from \"@odoo/owl\";\n\nexport class KanbanEditorRenderer extends kanbanView.Renderer {\n    setup() {\n        super.setup();\n        const rootRef = useRef(\"root\");\n        useStudioClickedElements(rootRef);\n\n        const onLegacyDropped = useLegacyOnDropElement(rootRef, (values) => {\n            values.new_attrs.display = \"full\";\n            this.env.config.structureChange(values);\n        });\n\n        useEffect(\n            (el) => {\n                if (!el) {\n                    return;\n                }\n                el.classList.add(\"o_web_studio_kanban_view_editor\");\n                // FIXME: legacy: interoperability with legacy studio components\n                $(el).droppable({\n                    accept: \".o_web_studio_component\",\n                    drop: onLegacyDropped,\n                });\n                return () => {\n                    $(el).droppable(\"destroy\");\n                };\n            },\n            () => [rootRef.el]\n        );\n    }\n\n    get canUseSortable() {\n        return false;\n    }\n\n    get showNoContentHelper() {\n        return false;\n    }\n\n    getGroupsOrRecords() {\n        const { list } = this.props;\n        const groupsOrRec = super.getGroupsOrRecords(...arguments);\n        if (list.isGrouped) {\n            return [groupsOrRec.filter((el) => el.group.list.records.length)[0]];\n        } else {\n            return [groupsOrRec[0]];\n        }\n    }\n\n    canCreateGroup() {\n        return false;\n    }\n\n    getGroupUnloadedCount() {\n        return 0;\n    }\n}\nKanbanEditorRenderer.template = \"web_studio.KanbanEditorRenderer\";\nKanbanEditorRenderer.components = {\n    ...kanbanView.Renderer.components,\n    KanbanRecord: KanbanEditorRecord,\n};\n", "/** @odoo-module */\nimport { listView } from \"@web/views/list/list_view\";\nimport { computeXpath } from \"../xml_utils\";\nimport { registry } from \"@web/core/registry\";\nimport { omit } from \"@web/core/utils/objects\";\n\nimport { ListEditorRenderer } from \"./list_editor_renderer\";\nimport { RelationalModel } from \"@web/views/relational_model\";\n\nimport { Component, xml } from \"@odoo/owl\";\n\nfunction parseStudioGroups(node) {\n    if (node.hasAttribute(\"studio_groups\")) {\n        return node.getAttribute(\"studio_groups\");\n    }\n}\n\nclass EditorArchParser extends listView.ArchParser {\n    isColumnVisible() {\n        return true;\n    }\n\n    parse(arch, models, modelName) {\n        const parsed = super.parse(...arguments);\n        const noFetchFields = Object.entries(parsed.fieldNodes)\n            .filter(([fname, field]) => field.attrs && field.attrs.studio_no_fetch)\n            .map((f) => f[0]);\n        parsed.fieldNodes = omit(parsed.fieldNodes, ...noFetchFields);\n        parsed.activeFields = omit(parsed.activeFields, ...noFetchFields);\n        parsed.columns = parsed.columns.filter((field) => !noFetchFields.includes(field.name));\n        return parsed;\n    }\n\n    parseFieldNode(node, models, modelName) {\n        const parsed = super.parseFieldNode(...arguments);\n        parsed.studioXpath = computeXpath(node, \"list, tree\");\n        parsed.studio_groups = parseStudioGroups(node);\n        return parsed;\n    }\n\n    parseWidgetNode(node, models, modelName) {\n        const parsed = super.parseWidgetNode(...arguments);\n        parsed.studioXpath = computeXpath(node, \"list, tree\");\n        parsed.studio_groups = parseStudioGroups(node);\n        return parsed;\n    }\n\n    processButton(node) {\n        const parsed = super.processButton(node);\n        if (!node.closest(\"header\")) {\n            parsed.studioXpath = computeXpath(node, \"list, tree\");\n            parsed.studio_groups = parseStudioGroups(node);\n        }\n        return parsed;\n    }\n}\n\n/**\n * X2Many fields can have their subview edited. There are some challenges currently with the RelationalModel\n * - We need to inject the context of the parent record from the outside. That way, within the subview's arch\n *   a snippet like `<field name=\"...\" invisible=\"[['parent.id','=',False]]\" />` works.\n * - We already know the resIds we have, since we are coming from a x2m. There is no need to search_read them, just to read them\n * - The RelationalModel doesn't really supports creatic staticLists as the root record\n *\n * StaticList supports the two first needs and not DynamicList, we assume that the amount of hacking\n * would be slightly bigger if our starting point is DynamicList. Hence, we choose\n * to extend StaticList instead of DynamicList, and make it the root record of the model.\n */\nfunction modelUsesParentRecord(model, parentRecord, resIds) {\n    if (!(model instanceof RelationalModel)) {\n        throw new Error(\"The model instance is not of the right type to accept a parent record.\");\n    }\n    model.rootType = \"static_list\";\n    // eval right away to avoid keeping the parentRecord in the closure;\n    const parentEvalContext = parentRecord.evalContext;\n    model.rootParams.getParentRecordContext = () => parentEvalContext;\n\n    const createDataPoint = model.createDataPoint.bind(model);\n    const modelLoad = model.load.bind(model);\n    model.load = (...args) => {\n        // intercept the createDatapoint for the root staticList\n        model.createDataPoint = (...args) => {\n            const dataPoint = createDataPoint(...args);\n            dataPoint.setCurrentIds(resIds);\n            dataPoint.selection = [];\n            // Immediate revert of the override\n            model.createDataPoint = createDataPoint;\n            return dataPoint;\n        };\n        return modelLoad(...args);\n    };\n}\n\nclass ListEditorController extends listView.Controller {\n    setup() {\n        super.setup();\n        if (this.props.parentRecord) {\n            modelUsesParentRecord(this.model, this.props.parentRecord, this.props.resIds);\n        }\n    }\n}\nListEditorController.props = {\n    ...listView.Controller.props,\n    parentRecord: { type: Object, optional: true },\n};\n\nclass ControllerShadow extends Component {\n    get Component() {\n        return ListEditorController;\n    }\n\n    get componentProps() {\n        const props = { ...this.props };\n        props.groupBy = [];\n        return props;\n    }\n}\nControllerShadow.template = xml`<t t-component=\"Component\" t-props=\"componentProps\" />`;\n\nconst listEditor = {\n    ...listView,\n    Controller: ControllerShadow,\n    ArchParser: EditorArchParser,\n    Renderer: ListEditorRenderer,\n    props() {\n        const props = listView.props(...arguments);\n        props.allowSelectors = false;\n        props.editable = false;\n        props.showButtons = false;\n        return props;\n    },\n};\nregistry.category(\"studio_editors\").add(\"list\", listEditor);\n", "/** @odoo-module */\nimport { listView } from \"@web/views/list/list_view\";\nimport { throttleForAnimation } from \"@web/core/utils/timing\";\n\nimport { closest, touching } from \"@web/core/utils/ui\";\n\nimport {\n    useLegacyOnDropElement,\n    hookPositionTolerance,\n    cleanHooks,\n    getHooks,\n    getActiveHook,\n    getDroppedValues,\n} from \"@web_studio/client_action/view_editors/utils\";\n\nimport { useDraggable } from \"@web/core/utils/draggable\";\n\nimport { useEffect, useRef, onWillUnmount } from \"@odoo/owl\";\n\nconst colSelectedClass = \"o-web-studio-editor--element-clicked\";\nconst colHoverClass = \"o-web-studio--col-hovered\";\nconst colNearestHookClass = \"o_web_studio_nearest_hook\";\n\nfunction cleanStyling(mainEl, classNames) {\n    mainEl.querySelectorAll(`${classNames.map((c) => `.${c}`)}`).forEach((el) => {\n        el.classList.remove(...classNames);\n    });\n}\n\nfunction columnsStyling(mainEl, colSelector, classNames) {\n    mainEl.querySelectorAll(`td${colSelector}, th${colSelector}`).forEach((el) => {\n        el.classList.add(...classNames);\n    });\n}\n\nfunction getSelectableCol(target, colSelector) {\n    if (target.closest(\"button\")) {\n        return null;\n    }\n    const colEl = target.closest(`td${colSelector}, th${colSelector}`);\n    return colEl;\n}\n\nexport class ListEditorRenderer extends listView.Renderer {\n    setup() {\n        super.setup();\n        this.onTableHover = throttleForAnimation(this.onTableHover.bind(this));\n        onWillUnmount(this.onTableHover.cancel);\n\n        // Prepare a legacy handler for JQuery UI's droppable\n        const onLegacyDropped = useLegacyOnDropElement(this.rootRef);\n\n        useEffect(\n            (rootEl) => {\n                rootEl.classList.add(\"o_web_studio_list_view_editor\");\n\n                // FIXME: legacy: interoperability with legacy studio components\n                $(rootEl).droppable({\n                    accept: \".o_web_studio_component\",\n                    drop: onLegacyDropped,\n                });\n                return () => {\n                    $(rootEl).droppable(\"destroy\");\n                };\n            },\n            () => [this.rootRef.el]\n        );\n\n        const highlightNearestHook = (draggedEl, { x, y }) => {\n            cleanHooks(this.rootRef.el);\n\n            const mouseToleranceRect = {\n                x: x - hookPositionTolerance,\n                y: y - hookPositionTolerance,\n                width: hookPositionTolerance * 2,\n                height: hookPositionTolerance * 2,\n            };\n\n            const touchingEls = touching(getHooks(this.rootRef.el), mouseToleranceRect);\n            const closestHookEl = closest(touchingEls, { x, y });\n\n            if (!closestHookEl) {\n                return false;\n            }\n            const xpath = closestHookEl.dataset.xpath;\n            const position = closestHookEl.dataset.position;\n            columnsStyling(\n                this.tableRef.el,\n                `.o_web_studio_hook[data-xpath='${xpath}'][data-position='${position}']`,\n                [colNearestHookClass]\n            );\n            return true;\n        };\n        this.env.config.registerCallback(\"highlightNearestHook\", highlightNearestHook);\n        this.env.config.registerCallback(\"selectField\", (fName) => {\n            const el = this.tableRef.el.querySelector(`th[data-name='${fName}']`);\n            if (el) {\n                el.click();\n            }\n        });\n\n        const tableHeadRef = useRef(\"tableHead\");\n        let positionsBsClasses = null;\n        useDraggable({\n            ref: tableHeadRef,\n            elements: \".o-draggable\",\n            onDragStart({ element }) {\n                positionsBsClasses = Array.from(element.classList).filter((c) =>\n                    c.startsWith(\"position-\")\n                );\n                element.classList.remove(...positionsBsClasses);\n            },\n            onDrag({ x, y, element }) {\n                element.classList.remove(\"o-draggable--drop-ready\");\n                if (highlightNearestHook(element, { x, y })) {\n                    element.classList.add(\"o-draggable--drop-ready\");\n                }\n            },\n            onDragEnd({ element }) {\n                if (positionsBsClasses) {\n                    element.classList.add(...positionsBsClasses);\n                    positionsBsClasses = null;\n                }\n            },\n            onDrop: ({ element }) => {\n                const rootRef = this.rootRef;\n                const targetHook = getActiveHook(rootRef.el);\n                if (!targetHook) {\n                    return;\n                }\n                const { xpath, position } = targetHook.dataset;\n                const droppedData = element.dataset;\n                droppedData.fieldName = element.dataset.name;\n                const values = getDroppedValues({ droppedData, xpath, position });\n\n                cleanHooks(rootRef.el);\n\n                if (!values) {\n                    return;\n                }\n                this.env.config.structureChange(values);\n            },\n        });\n    }\n\n    get canResequenceRows() {\n        return false;\n    }\n\n    getColumnHookData(col, position) {\n        let xpath;\n        if (!col) {\n            return { xpath: \"/tree\", position: \"inside\" };\n        }\n        if (col.type === \"button_group\") {\n            if (position === \"before\") {\n                xpath = col.buttons[0].studioXpath;\n            } else {\n                xpath = col.buttons[col.buttons.length - 1].studioXpath;\n            }\n        } else {\n            xpath = col.studioXpath;\n        }\n        return {\n            xpath,\n            position,\n        };\n    }\n\n    addColsHooks(_cols) {\n        const attrs = { width: \"1px\" };\n        const options = {};\n        const cols = [];\n        let hookId = 0;\n        const firstCol = _cols.find((c) => c.optional !== \"hide\");\n        const { xpath, position } = this.getColumnHookData(firstCol, \"before\");\n        cols.push({\n            type: \"studio_hook\",\n            position,\n            xpath,\n            id: `studio_hook_${hookId++}_${(firstCol && firstCol.id) || 0}`,\n            attrs,\n            options,\n        });\n        for (const col of _cols) {\n            if (col.optional === \"hide\") {\n                continue;\n            }\n            cols.push(col);\n            const { xpath, position } = this.getColumnHookData(col, \"after\");\n            cols.push({\n                type: \"studio_hook\",\n                position,\n                xpath,\n                id: `studio_hook_${hookId++}_${col.id}`,\n                attrs,\n                options,\n            });\n        }\n        return cols;\n    }\n\n    get allColumns() {\n        let cols = this._allColumns;\n        if (this.env.config.studioShowInvisible) {\n            cols = cols.map((c) => {\n                return {\n                    ...c,\n                    optional: false,\n                    studioIsInvisible:\n                        c.optional === \"hide\" ||\n                        (c.modifiers && c.modifiers.column_invisible === true),\n                };\n            });\n        } else {\n            cols = cols.filter((c) => !c.modifiers || c.modifiers.column_invisible !== true);\n        }\n        return this.addColsHooks(cols);\n    }\n\n    set allColumns(cols) {\n        this._allColumns = cols;\n    }\n\n    onTableHover(ev) {\n        const table = this.tableRef.el;\n        cleanStyling(table, [colHoverClass]);\n        if (ev.type !== \"mouseover\") {\n            return;\n        }\n        const colEl = getSelectableCol(ev.target, \"[data-studio-xpath]\");\n        if (!colEl) {\n            return;\n        }\n        const xpath = colEl.dataset.studioXpath;\n        columnsStyling(table, `[data-studio-xpath='${xpath}']:not(.o_web_studio_hook)`, [\n            colHoverClass,\n        ]);\n    }\n\n    onTableClicked(ev) {\n        ev.stopPropagation();\n        const table = ev.currentTarget;\n        cleanStyling(table, [colSelectedClass]);\n        const colEl = getSelectableCol(ev.target, \"[data-studio-xpath]\");\n        if (!colEl) {\n            return;\n        }\n        const xpath = colEl.dataset.studioXpath;\n        columnsStyling(table, `[data-studio-xpath='${xpath}']:not(.o_web_studio_hook)`, [\n            colSelectedClass,\n        ]);\n        this.env.config.onNodeClicked({ xpath: colEl.dataset.studioXpath, target: colEl });\n    }\n}\nListEditorRenderer.template = \"web_studio.ListEditorRenderer\";\nListEditorRenderer.recordRowTemplate = \"web_studio.ListEditorRenderer.RecordRow\";\n", "/** @odoo-module */\n\nimport { useEnv, useSubEnv } from \"@odoo/owl\";\n\nexport const hookPositionTolerance = 50;\n\nexport function cleanHooks(el) {\n    for (const hookEl of el.querySelectorAll(\".o_web_studio_nearest_hook\")) {\n        hookEl.classList.remove(\"o_web_studio_nearest_hook\");\n    }\n}\n\nexport function getActiveHook(el) {\n    return el.querySelector(\".o_web_studio_nearest_hook\");\n}\n\n// A naive function that determines if the toXpath on which we dropped\n// our object is actually the same as the fromXpath of the element we dropped.\n// Naive because it won't evaluate xpath, just guess whether they are equivalent\n// under precise conditions.\nfunction isToXpathEquivalentFromXpath(position, toXpath, fromXpath) {\n    if (toXpath === fromXpath) {\n        return true;\n    }\n    const toParts = toXpath.split(\"/\");\n    const fromParts = fromXpath.split(\"/\");\n\n    // Are the paths at least in the same parent node ?\n    if (toParts.slice(0, -1).join(\"/\") !== fromParts.slice(0, -1).join(\"/\")) {\n        return false;\n    }\n\n    const nodeIdxRegExp = /(\\w+)(\\[(\\d+)\\])?/;\n    const toMatch = toParts[toParts.length - 1].match(nodeIdxRegExp);\n    const fromMatch = fromParts[fromParts.length - 1].match(nodeIdxRegExp);\n\n    // Are the paths comparable in terms of their node tag ?\n    if (fromMatch[1] !== toMatch[1]) {\n        return false;\n    }\n\n    // Is the position actually referring to the same place ?\n    if (position === \"after\" && parseInt(toMatch[3] || 1) + 1 === parseInt(fromMatch[3] || 1)) {\n        return true;\n    }\n    return false;\n}\n\nexport function getDroppedValues({ droppedData, xpath, fieldName, position }) {\n    const isNew = droppedData.isNew;\n    let values;\n    if (isNew) {\n        values = {\n            type: \"add\",\n            structure: droppedData.structure,\n            field_description: droppedData.field_description,\n            xpath,\n            new_attrs: droppedData.new_attrs,\n            position: position,\n        };\n    } else {\n        if (isToXpathEquivalentFromXpath(position, xpath, droppedData.studioXpath)) {\n            return;\n        }\n        values = {\n            type: \"move\",\n            xpath,\n            position: position,\n            structure: \"field\",\n            new_attrs: {\n                name: droppedData.fieldName,\n            },\n        };\n    }\n    return values;\n}\n\nexport function getHooks(el) {\n    return [...el.querySelectorAll(\".o_web_studio_hook\")];\n}\n\nexport function extendEnv(env, extension) {\n    const nextEnv = Object.create(env);\n    const descrs = Object.getOwnPropertyDescriptors(extension);\n    Object.defineProperties(nextEnv, descrs);\n    return Object.freeze(nextEnv);\n}\n\n// A standardized method to determine if a component is visible\nexport function studioIsVisible(props) {\n    return props.studioIsVisible !== undefined ? props.studioIsVisible : true;\n}\n\nfunction updateCurrentClickedElement(mainEl, currentTarget) {\n    for (const el of mainEl.querySelectorAll(\".o-web-studio-editor--element-clicked\")) {\n        el.classList.remove(\"o-web-studio-editor--element-clicked\");\n    }\n    const clickable = currentTarget.closest(\".o-web-studio-editor--element-clickable\");\n    if (clickable) {\n        clickable.classList.add(\"o-web-studio-editor--element-clicked\");\n    }\n}\n\nexport function useStudioClickedElements(ref) {\n    const env = useEnv();\n    // Handle click on elements\n    const config = Object.create(env.config);\n    const originalNodeClicked = config.onNodeClicked;\n    config.onNodeClicked = (params) => {\n        updateCurrentClickedElement(ref.el, params.target);\n        return originalNodeClicked(params);\n    };\n    useSubEnv({ config });\n}\n\nexport function useLegacyOnDropElement(ref, executeDrop) {\n    const env = useEnv();\n    executeDrop = executeDrop || env.config.structureChange;\n    const onLegacyDropped = (ev, ui) => {\n        const hitHook = getActiveHook(ref.el);\n        if (!hitHook) {\n            return cleanHooks(ref.el);\n        }\n        const { xpath, position } = hitHook.dataset;\n        const $droppedEl = ui.draggable || $(ev.target);\n\n        const droppedData = $droppedEl.data();\n        const isNew = $droppedEl[0].classList.contains(\"o_web_studio_component\");\n        droppedData.isNew = isNew;\n        // Fieldname is useless here since every dropped element is new.\n        const values = getDroppedValues({ droppedData, xpath, position });\n        cleanHooks(ref.el);\n        executeDrop(values);\n    };\n\n    return onLegacyDropped;\n}\n\nexport function useStudioRef(refName = \"studioRef\", onClick) {\n    // create two hooks and call them here?\n    const comp = owl.useComponent();\n    const ref = owl.useRef(refName);\n    owl.useEffect(\n        (el) => {\n            if (el) {\n                el.setAttribute(\"data-studio-xpath\", comp.props.studioXpath);\n            }\n        },\n        () => [ref.el]\n    );\n\n    if (onClick) {\n        const handler = onClick.bind(comp);\n        owl.useEffect(\n            (el) => {\n                if (el) {\n                    el.addEventListener(\"click\", handler, { capture: true });\n                    return () => {\n                        el.removeEventListener(\"click\", handler);\n                    };\n                }\n            },\n            () => [ref.el]\n        );\n    }\n}\n\nexport function makeModelErrorResilient(ModelClass) {\n    function logError(debug) {\n        if (!debug) {\n            return;\n        }\n        console.warn(\n            \"The onchange triggered an error. It may indicate either a faulty call to onchange, or a faulty model python side\"\n        );\n    }\n    // LEGACY\n    if (\"_trigger_up\" in ModelClass.prototype) {\n        return class ResilientModel extends ModelClass {\n            _trigger_up(ev) {\n                const evType = ev.name;\n                const payload = ev.data;\n                if (\n                    evType === \"call_service\" &&\n                    payload.service === \"ajax\" &&\n                    payload.method === \"rpc\"\n                ) {\n                    const args = payload.args || [];\n                    if (args[1] && args[1].method === \"onchange\") {\n                        const _callback = payload.callback;\n                        payload.callback = (prom) => {\n                            _callback(\n                                prom.catch((e) => {\n                                    logError(this.env.debug);\n                                    return Promise.resolve({});\n                                })\n                            );\n                        };\n                    }\n                }\n                return super._trigger_up(ev);\n            }\n        };\n    }\n\n    return class ResilientModel extends ModelClass {\n        setup() {\n            super.setup(...arguments);\n            const orm = this.orm;\n            const debug = this.env.debug;\n            this.orm = Object.assign(Object.create(orm), {\n                async call(model, method) {\n                    if (method === \"onchange\") {\n                        try {\n                            return await orm.call.call(orm, ...arguments);\n                        } catch {\n                            logError(debug);\n                        }\n                        return {};\n                    }\n                    return orm.call.call(orm, ...arguments);\n                },\n            });\n        }\n    };\n}\n", "/** @odoo-module */\nimport { isComponentNode, appendAttr } from \"@web/views/view_compiler\";\n\nconst nodeWeak = new WeakMap();\nexport function computeXpath(node, upperBoundSelector = \"form\") {\n    if (nodeWeak.has(node)) {\n        return nodeWeak.get(node);\n    }\n    const tagName = node.tagName;\n    let count = 1;\n    let previous = node;\n    while ((previous = previous.previousElementSibling)) {\n        if (previous.tagName === tagName) {\n            count++;\n        }\n    }\n    let xpath = `${tagName}[${count}]`;\n    const parent = node.parentElement;\n    if (!node.matches(upperBoundSelector)) {\n        const parentXpath = computeXpath(parent, upperBoundSelector);\n        xpath = `${parentXpath}/${xpath}`;\n    } else {\n        xpath = `/${xpath}`;\n    }\n    nodeWeak.set(node, xpath);\n    return xpath;\n}\n\nexport const nodeStudioXpathSymbol = Symbol(\"nodeStudioXpath\");\nfunction xmlNodeToLegacyNode(xpath, node) {\n    const attrs = {};\n\n    for (const att of node.getAttributeNames()) {\n        if (att === \"studioXpath\") {\n            attrs[nodeStudioXpathSymbol] = node.getAttribute(att);\n            continue;\n        }\n        attrs[att] = node.getAttribute(att);\n    }\n\n    if (attrs.modifiers) {\n        attrs.modifiers = JSON.parse(attrs.modifiers);\n    } else {\n        attrs.modifiers = {};\n    }\n\n    if (!attrs[nodeStudioXpathSymbol]) {\n        attrs[nodeStudioXpathSymbol] = xpath;\n    } else if (attrs.studioXpath !== xpath) {\n        // WOWL to remove\n        throw new Error(\"You rascal!\");\n    }\n\n    const legNode = {\n        tag: node.tagName,\n        attrs,\n    };\n    return legNode;\n}\n\nexport function getLegacyNode(xpath, xml) {\n    const nodes = getNodesFromXpath(xpath, xml);\n    if (nodes.length !== 1) {\n        throw new Error(`xpath ${xpath} yielded no or multiple nodes`);\n    }\n    return xmlNodeToLegacyNode(xpath, nodes[0]);\n}\n\nexport function xpathToLegacyXpathInfo(xpath) {\n    // eg: /form[1]/field[3]\n    // RegExp notice: group 1 : form ; group 2: [1], group 3: 1\n    const xpathInfo = [];\n    const matches = xpath.matchAll(/\\/?(\\w+)(\\[(\\d+)\\])?/g);\n    for (const m of matches) {\n        const info = {\n            tag: m[1],\n            indice: parseInt(m[3] || 1),\n        };\n        xpathInfo.push(info);\n    }\n    return xpathInfo;\n}\n\nfunction getXpathNodes(xpathResult) {\n    const nodes = [];\n    let res;\n    while ((res = xpathResult.iterateNext())) {\n        nodes.push(res);\n    }\n    return nodes;\n}\n\nexport function getNodesFromXpath(xpath, xml) {\n    const owner = \"evaluate\" in xml ? xml : xml.ownerDocument;\n    const xpathResult = owner.evaluate(xpath, xml, null, XPathResult.ORDERED_NODE_ITERATOR_TYPE);\n    return getXpathNodes(xpathResult);\n}\n\nconst parser = new DOMParser();\nexport const parseStringToXml = (str) => {\n    return parser.parseFromString(str, \"text/xml\");\n};\n\nconst serializer = new XMLSerializer();\nexport const serializeXmlToString = (xml) => {\n    return serializer.serializeToString(xml);\n};\n\n// This function should be used in Compilers to apply the \"invisible\" modifiers on\n// the compiled templates's nodes\nexport function applyInvisible(invisible, compiled, params) {\n    // Just return the node if it is always Visible\n    if (!invisible) {\n        return compiled;\n    }\n\n    let isVisileExpr;\n    // If invisible is dynamic (via Domain), pass a props or apply the studio class.\n    if (typeof invisible !== \"boolean\") {\n        const recordExpr = params.recordExpr || \"__comp__.props.record\";\n        isVisileExpr = `!__comp__.evalDomainFromRecord(${recordExpr},${JSON.stringify(invisible)})`;\n        if (isComponentNode(compiled)) {\n            compiled.setAttribute(\"studioIsVisible\", isVisileExpr);\n        } else {\n            appendAttr(compiled, \"class\", `o_web_studio_show_invisible:!${isVisileExpr}`);\n        }\n    } else {\n        if (isComponentNode(compiled)) {\n            compiled.setAttribute(\"studioIsVisible\", \"false\");\n        } else {\n            appendAttr(compiled, \"class\", `o_web_studio_show_invisible:true`);\n        }\n    }\n\n    // Finally, put a t-if on the node that accounts for the parameter in the config.\n    const studioShowExpr = `__comp__.env.config.studioShowInvisible`;\n    isVisileExpr = isVisileExpr ? `(${isVisileExpr} or ${studioShowExpr})` : studioShowExpr;\n    if (compiled.hasAttribute(\"t-if\")) {\n        const formerTif = compiled.getAttribute(\"t-if\");\n        isVisileExpr = `( ${formerTif} ) and ${isVisileExpr}`;\n    }\n    compiled.setAttribute(\"t-if\", isVisileExpr);\n    return compiled;\n}\n", "/** @odoo-module */\n\nimport { Component } from \"@odoo/owl\";\nimport { Dialog } from \"@web/core/dialog/dialog\";\nimport { _t } from \"@web/core/l10n/translation\";\nimport { useService } from \"@web/core/utils/hooks\";\n\nexport class NewReportDialog extends Component {\n    setup() {\n        this.rpc = useService(\"rpc\");\n        this.user = useService(\"user\");\n        this.layouts = [\n            {\n                name: \"web.external_layout\",\n                label: _t(\"External\"),\n                description: _t(\"Business header/footer\"),\n            },\n            {\n                name: \"web.internal_layout\",\n                label: _t(\"Internal\"),\n                description: _t(\"Minimal header/footer\"),\n            },\n            {\n                name: \"web.basic_layout\",\n                label: _t(\"Blank\"),\n                description: _t(\"No header/footer\"),\n            },\n        ];\n    }\n\n    async createNewReport(layout) {\n        const report = await this.rpc(\"/web_studio/create_new_report\", {\n            model_name: this.props.resModel,\n            layout,\n            context: this.user.context,\n        });\n        this.props.onReportCreated(report);\n        this.props.close();\n    }\n}\nNewReportDialog.template = \"web_studio.NewReportDialog\";\nNewReportDialog.components = { Dialog };\nNewReportDialog.props = [\"resModel\", \"onReportCreated\", \"close\"];\n", "/** @odoo-module */\n\nimport { registry } from \"@web/core/registry\";\nimport { useService } from \"@web/core/utils/hooks\";\nimport { kanbanView } from \"@web/views/kanban/kanban_view\";\nimport { KanbanController } from \"@web/views/kanban/kanban_controller\";\n\nimport { NewReportDialog } from \"./new_report_dialog\";\n\nclass StudioReportKanbanController extends KanbanController {\n    setup() {\n        super.setup();\n        this.actionService = useService(\"action\");\n        this.dialogService = useService(\"dialog\");\n        this.orm = useService(\"orm\");\n    }\n    createRecord() {\n        this.dialogService.add(NewReportDialog, {\n            resModel: this.props.context.default_model,\n            onReportCreated: (report) => {\n                this.openRecord({ data: report, resId: report.id });\n            },\n        });\n    }\n\n    openRecord(record) {\n        return this.actionService.doAction(\"web_studio.action_edit_report\", {\n            report: {\n                data: record.data,\n                res_id: record.resId,\n            },\n        });\n    }\n}\n\nconst studioReportKanbanView = {\n    ...kanbanView,\n    Controller: StudioReportKanbanController,\n};\n\nregistry.category(\"views\").add(\"studio_report_kanban\", studioReportKanbanView);\n", "/** @odoo-module **/\n\n/**\n * Formerly action_editor_action, slightly adapted\n */\n\nimport core from \"web.core\";\nimport Dialog from \"web.Dialog\";\nimport dom from \"web.dom\";\nimport session from \"web.session\";\nimport Widget from \"web.Widget\";\n\nimport bus from \"web_studio.bus\";\nimport ViewEditorManager from \"web_studio.ViewEditorManager\";\n\nconst _t = core._t;\n\nexport const ActionEditorMain = Widget.extend({\n    custom_events: {\n        studio_default_view: \"_onSetDefaultView\",\n        studio_restore_default_view: \"_onRestoreDefaultView\",\n        studio_disable_view: \"_onDisableView\",\n        studio_edit_view: \"_onEditView\",\n        studio_edit_action: \"_onEditAction\",\n    },\n    /**\n     * @constructor\n     * @param {Object} options\n     * @param {Object} options.action - action description\n     * @param {Boolean} options.chatter_allowed\n     * @param {string} [options.controllerState]\n     * @param {boolean} [options.noEdit] - do not edit a view\n     * @param {string} [options.viewType]\n     * @param {Object} [options.x2mEditorPath]\n     */\n    init: function (parent, options) {\n        this._super.apply(this, arguments);\n        this.wowlEnv = options.wowlEnv;\n\n        this._title = _t(\"Studio\");\n        if (this.controlPanelProps) {\n            this.controlPanelProps.title = this._title;\n        }\n        this.options = options;\n        this.action = options.action;\n\n        this._setEditedView(options.viewType);\n\n        // We set the x2mEditorPath since when we click on the studio breadcrumb\n        // a new view_editor_manager is instantiated and then the previous\n        // x2mEditorPath is needed to reload the previous view_editor_manager\n        // state.\n        this.x2mEditorPath = options.x2mEditorPath;\n        this.activityAllowed = undefined;\n        this.controllerState = options.controllerState || {};\n    },\n    /**\n     * @override\n     */\n    willStart: function () {\n        if (!this.action) {\n            return Promise.reject();\n        }\n        var defs = [this._super.apply(this, arguments), this._isActivityAllowed()];\n        return Promise.all(defs);\n    },\n    /**\n     * @override\n     */\n    start: function () {\n        var self = this;\n        this.$el.addClass(\"o_web_studio_client_action\");\n        // directly edit the view instead of displaying all views\n        return Promise.all([this._editView(), this._super.apply(this, arguments)]).then(\n            function () {\n                self._pushState();\n                bus.trigger(\"studio_main\", self.action);\n                if (!self.options.noEdit) {\n                    // TODO: try to put it in editView\n                    bus.trigger(\"edition_mode_entered\", self.viewType);\n                }\n                // add class when activating a pivot/graph view through studio\n                const model = self.view_editor && self.view_editor.view.model;\n                if (model && model._isInSampleMode) {\n                    self.el.classList.add(\"o_legacy_view_sample_data\");\n                }\n            }\n        );\n    },\n    /**\n     * @override\n     */\n    on_attach_callback: function () {\n        this.isInDOM = true;\n        if (this.view_editor) {\n            this.view_editor.on_attach_callback();\n        }\n    },\n    /**\n     * @override\n     */\n    on_detach_callback: function () {\n        this.isInDOM = false;\n        if (this.view_editor) {\n            this.view_editor.on_detach_callback();\n        }\n    },\n\n    //--------------------------------------------------------------------------\n    // Private\n    //--------------------------------------------------------------------------\n\n    /**\n     * @private\n     * @param {Object} action\n     * @param {Object} args\n     * @returns {Promise}\n     */\n    _editAction: function (action, args) {\n        var self = this;\n        core.bus.trigger(\"clear_cache\");\n        return this._rpc({\n            route: \"/web_studio/edit_action\",\n            params: {\n                action_type: action.type,\n                action_id: action.id,\n                args: args,\n                context: session.user_context,\n            },\n        }).then(function (result) {\n            if (result !== true) {\n                Dialog.alert(self, result);\n            } else {\n                return self._reloadAction(action.id);\n            }\n        });\n    },\n    /**\n     * @private\n     */\n    _editView: function () {\n        var self = this;\n\n        // the default view needs to be created before `loadViews` or the\n        // renderer will not be aware that a new view exists\n        var defs = [this._getStudioViewArch(this.action.res_model, this.viewType, this.viewId)];\n        if (this.viewType === \"form\") {\n            defs.push(this._isChatterAllowed());\n        }\n        return Promise.all(defs).then(function () {\n            // add studio in loadViews context to retrieve groups server-side\n            // We load views in the base language to make sure we read/write on the source term field\n            // of ir.ui.view\n            const context = Object.assign({}, self.action.context, { studio: true, lang: false, no_address_format: true });\n            const resModel = self.action.res_model;\n            const views = self.views;\n            const actionId = self.action.id;\n            const loadActionMenus = false;\n            const loadIrFilters = true;\n            const loadViewDef = self.wowlEnv.services.view.loadViews(\n                { context, resModel, views },\n                { actionId, loadActionMenus, loadIrFilters }\n            );\n            return loadViewDef.then(async function (viewDescriptions) {\n                const legacyFieldsView = viewDescriptions.__legacy__;\n                const fields_views = legacyFieldsView.fields_views;\n                for (const viewType in fields_views) {\n                    const fvg = fields_views[viewType];\n                    fvg.viewFields = fvg.fields;\n                    fvg.fields = viewDescriptions.fields;\n                }\n                if (!self.action.controlPanelFieldsView) {\n                    let controlPanelFieldsView;\n                    if (fields_views.search) {\n                        controlPanelFieldsView = Object.assign({}, fields_views.search, {\n                            favoriteFilters: legacyFieldsView.filters,\n                            fields: legacyFieldsView.fields,\n                            viewFields: fields_views.search.fields,\n                        });\n                    }\n                    // in case of Studio navigation, the processing done on the\n                    // action in ActWindowActionManager@_executeWindowAction\n                    // is by-passed\n                    self.action.controlPanelFieldsView = controlPanelFieldsView;\n                }\n                if (!self.controllerState.currentId) {\n                    self.controllerState.currentId =\n                        self.controllerState.resIds && self.controllerState.resIds[0];\n                    // FIXME: legacy/wowl views compatibility\n                    // This can be reworked when studio will be converted\n                    if (!self.controllerState.currentId && self.viewType === \"form\") {\n                        const result = await self._rpc({\n                            model: self.action.res_model,\n                            method: \"search\",\n                            args: [[]],\n                            kwargs: { limit: 1 },\n                        });\n                        self.controllerState.currentId = result[0];\n                    }\n                }\n                var params = {\n                    action: self.action,\n                    fields_view: fields_views[self.viewType],\n                    viewType: self.viewType,\n                    chatter_allowed: self.chatter_allowed,\n                    studio_view_id: self.studioView.studio_view_id,\n                    studio_view_arch: self.studioView.studio_view_arch,\n                    x2mEditorPath: self.x2mEditorPath,\n                    controllerState: self.controllerState,\n                    wowlEnv: self.wowlEnv,\n                    viewDescriptions,\n                };\n                self.view_editor = new ViewEditorManager(self, params);\n\n                var fragment = document.createDocumentFragment();\n                return self.view_editor.appendTo(fragment).then(function () {\n                    if (self.action_editor) {\n                        dom.detach([{ widget: self.action_editor }]);\n                    }\n                    dom.append(self.$el, [fragment], {\n                        in_DOM: self.isInDOM,\n                        callbacks: [{ widget: self.view_editor }],\n                    });\n                });\n            });\n        });\n    },\n    /**\n     * @private\n     * @param {String} model\n     * @param {String} view_type\n     * @param {Integer} view_id\n     * @returns {Promise}\n     */\n    _getStudioViewArch: function (model, view_type, view_id) {\n        var self = this;\n        core.bus.trigger(\"clear_cache\");\n        return this._rpc({\n            route: \"/web_studio/get_studio_view_arch\",\n            params: {\n                model: model,\n                view_type: view_type,\n                view_id: view_id,\n                // We load views in the base language to make sure we read/write on the source term field\n                // of ir.ui.view\n                context: _.extend({}, session.user_context, { lang: false }),\n            },\n        }).then(function (studioView) {\n            self.studioView = studioView;\n        });\n    },\n    /**\n     * Determines whether the model that will be edited supports mail_activity.\n     *\n     * @private\n     * @returns {Promise}\n     */\n    _isActivityAllowed: function () {\n        var self = this;\n        var modelName = this.action.res_model;\n        return this._rpc({\n            route: \"/web_studio/activity_allowed\",\n            params: {\n                model: modelName,\n            },\n        }).then(function (activityAllowed) {\n            self.activityAllowed = activityAllowed;\n        });\n    },\n    /**\n     * @private\n     * Determines whether the model\n     * that will be edited supports mail_thread\n     * @returns {Promise}\n     */\n    _isChatterAllowed: function () {\n        var self = this;\n        var res_model = this.action.res_model;\n        return this._rpc({\n            route: \"/web_studio/chatter_allowed\",\n            params: {\n                model: res_model,\n            },\n        }).then(function (isChatterAllowed) {\n            self.chatter_allowed = isChatterAllowed;\n        });\n    },\n\n    /**\n     * @private\n     */\n    _pushState: function () {\n        // as there is no controller, we need to update the state manually\n        var state = {\n            action: this.action.id,\n            model: this.action.res_model,\n            view_type: this.viewType,\n        };\n        // TODO: necessary?\n        if (this.action.context) {\n            var active_id = this.action.context.active_id;\n            if (active_id) {\n                state.active_id = active_id;\n            }\n            var active_ids = this.action.context.active_ids;\n            // we don't push active_ids if it's a single element array containing the active_id\n            // to make the url shorter in most cases\n            if (active_ids && !(active_ids.length === 1 && active_ids[0] === active_id)) {\n                state.active_ids = this.action.context.active_ids.join(\",\");\n            }\n        }\n        this.trigger_up(\"push_state\", {\n            state: state,\n            studioPushState: true, // see action_manager @_onPushState\n        });\n    },\n    /**\n     * @private\n     * @param {Integer} actionID\n     * @returns {Promise}\n     */\n    _reloadAction: function (actionID) {\n        var self = this;\n        return new Promise(function (resolve) {\n            self.trigger_up(\"reload_action\", {\n                actionID: actionID,\n                onSuccess: resolve,\n            });\n        });\n    },\n    /**\n     * @private\n     * @param {string} [viewType]\n     */\n    _setEditedView: function (viewType) {\n        var views = this.action._views || this.action.views;\n        this.views = views.slice();\n        // search is not in action.view\n        var searchview_id = this.action.search_view_id && this.action.search_view_id[0];\n        this.views.push([searchview_id || false, \"search\"]);\n        var view = _.find(this.views, function (v) {\n            return v[1] === viewType;\n        });\n        this.view = view || this.views[0]; // see action manager\n        this.viewId = this.view[0];\n        this.viewType = this.view[1];\n    },\n    /**\n     * @private\n     * @param {String} view_mode\n     * @returns {Promise}\n     */\n    _writeViewMode: function (view_mode, initial_view_mode) {\n        var self = this;\n        var def = this._editAction(this.action, { view_mode: view_mode });\n        return def.then(function (result) {\n            if (initial_view_mode) {\n                result.initial_view_types = initial_view_mode.split(\",\");\n            }\n            /* non-working action removed in #21562: we should never get here */\n            return self.do_action(\"action_web_studio_action_editor\", {\n                action: result,\n                noEdit: true,\n            });\n        });\n    },\n\n    //--------------------------------------------------------------------------\n    // Handlers\n    //--------------------------------------------------------------------------\n\n    /**\n     * @private\n     * @param {OdooEvent} event\n     */\n    _onDisableView: function (event) {\n        var view_type = event.data.view_type;\n        var view_mode = _.without(this.action.view_mode.split(\",\"), view_type);\n\n        if (!view_mode.length) {\n            Dialog.alert(this, _t(\"You cannot deactivate this view as it is the last one active.\"));\n        } else {\n            this._writeViewMode(view_mode.toString());\n        }\n    },\n    /**\n     * @private\n     * @param {OdooEvent} event\n     */\n    _onEditAction: function (event) {\n        var self = this;\n\n        var args = event.data.args;\n        if (!args) {\n            return;\n        }\n\n        this._editAction(this.action, args).then(function (result) {\n            self.action = result;\n        });\n    },\n    /**\n     * @private\n     * @param {OdooEvent} event\n     * @param {string} event.data.view_type\n     */\n    _onEditView: function (event) {\n        this._setEditedView(event.data.view_type);\n        this._editView().then(function () {\n            bus.trigger(\"edition_mode_entered\", event.data.view_type);\n        });\n    },\n    /**\n     * @private\n     */\n    _onRestoreDefaultView: function (event) {\n        var self = this;\n\n        var message = _t(\n            \"Are you sure you want to restore the default view?\\r\\nAll customization done with studio on this view will be lost.\"\n        );\n\n        Dialog.confirm(this, message, {\n            confirm_callback: function () {\n                var context = _.extend({}, self.action.context, { studio: true, lang: false });\n                //To restore the default view from an inherited one, we need first to retrieve the default view id\n                var loadViewDef = self.loadViews(self.action.res_model, context, self.views, {\n                    load_filters: true,\n                });\n                loadViewDef.then(function (fields_views) {\n                    self._rpc({\n                        route: \"/web_studio/restore_default_view\",\n                        params: {\n                            view_id: fields_views[event.data.view_type].view_id,\n                        },\n                    });\n                });\n            },\n            dialogClass: \"o_web_studio_preserve_space\",\n        });\n    },\n    /**\n     * @private\n     * @param {OdooEvent} event\n     */\n    _onSetDefaultView: function (event) {\n        var selected_view_type = event.data.view_type;\n        var view_types = _.map(this.action.views, ({ type }) => type);\n        var view_mode = _.without(view_types, selected_view_type);\n        view_mode.unshift(selected_view_type);\n        view_mode = view_mode.toString();\n\n        this._writeViewMode(view_mode, this.action.view_mode);\n    },\n});\n", "(function (py) {\n\n/**\n *\n * \u00b4py.extract\u00b4 is an extension used only by AbstractEditComponent,\n * to parse the python values of the views so that it can be used\n * in javascript.\n *\n * The string converted into a dictionary in the case of options, and\n * a list of fieldName and non-usable rest (free code, functions,\n * calculations ...)\n *\n * eg:\n *\n *   t-esc=\"o.doc.get_currency()\"\n *   t-options='{\"field\": o.doc.product_id, \"toto\": o.toto, \"tata\": \"string\"}'\n *   t-options='dict(field=o.doc.product_id, toto=o.toto, tata=\"string\")'\n *   t-options-currency=\"o.doc.amount + 11.0\"\n *\n * @see _splitRelatedValue in edit_components.js\n * @see _extractTOptions in edit_components.js\n *\n * Although it is functional, this must be redone, it is a poc.\n **/\n\nvar Python = function (expr, type, params) {\n    this.expr = expr;\n    this.params = params;\n    if (type === 'call') {\n        this.isCall = true;\n    }\n    if (type === 'field') {\n        this.isField = true;\n    }\n    if (type === 'operator') {\n        this.isOperator = true;\n    }\n};\nPython.prototype.isPython = true;\nPython.prototype.toString = function () {\n    return this.expr + '';\n};\n\nfunction extract (expr) {\n    switch (expr.id) {\n        case '(name)':\n            switch (expr.value) {\n                case 'true': return true;\n                case 'false': return false;\n            }\n            return new Python(expr.value, 'field');\n        case '(string)':\n        case '(number)':\n        case '(constant)':\n            switch (expr.value) {\n                case 'None': return null;\n                case 'False': return false;\n                case 'True': return true;\n            }\n            return expr.value;\n        case '(':\n            var func = extract(expr.first);\n            var error = false;\n            if (func.isPython && func.expr === 'dict') {\n                var obj = {};\n                for(var l=0; l<expr.second.length; ++l) {\n                    var kv = expr.second[l];\n                    if (kv.id === \"=\") {\n                        obj[extract(kv.first)] = extract(kv.second);\n                    } else {\n                        error = true;\n                    }\n                }\n                if (!error) {\n                    return obj;\n                }\n            }\n            var array = [];\n            for(var l=0; l<expr.second.length; ++l) {\n                var kv = expr.second[l];\n                array.push(extract(kv));\n            }\n            var res = new Python(func + '(' + array.join(', ') + ')', 'call', {\n                object: func.isField ? func.params.slice(0, -1) : [],\n                method: func.isField ? func.params[func.params.length-1] : func,\n                args: array,\n            });\n            if (error) {\n                throw new Error('SyntaxError: ' + res);\n            }\n            return res;\n        case '[':\n            if (expr.second) {\n                var value = extract(expr.first);\n                var attribute = extract(expr.second);\n                return new Python(value + '[' + attribute + ']', 'attribute', {\n                    value: value,\n                    attribute: attribute,\n                });\n            }\n            var array = [];\n            for(var l=0; l<expr.first.length; ++l) {\n                array.push(extract(expr.first[l]));\n            }\n            return array;\n        case '{':\n            var obj = {};\n            for(var l=0; l<expr.first.length; ++l) {\n                var kv = expr.first[l];\n                obj[extract(kv[0])] = extract(kv[1]);\n            }\n            return obj;\n        case '.':\n            if (expr.second.id !== '(name)') {\n                throw new Error('SyntaxError: ' + expr);\n            }\n            var params = [];\n            var first = extract(expr.first);\n            if (first.isAttribute) {\n                params.push.apply(params, first.params);\n            } else {\n                params.push(first.expr);\n            }\n            var second = extract(expr.second);\n            if (second.isAttribute) {\n                params.push.apply(params, second.params);\n            } else {\n                params.push(second.expr);\n            }\n            return new Python(params.join('.'), 'field', params);\n        case '=':\n            return extract(expr.first) + '=' + extract(expr.second);\n        case '(comparator)':\n            var string = '';\n            var values = [];\n            for(var l=0; l<expr.expressions.length; ++l) {\n                var value = extract(expr.expressions[l]);\n                values.push(value);\n                if (l > 0) {\n                    string += expr.operators[l-1];\n                }\n                string += value;\n            }\n            return new Python(string, 'operator', {\n                operators: expr.operators,\n                values: values,\n            });\n    }\n}\npy.extract = function (str) {\n    return extract(py.parse(py.tokenize(str)));\n};\n\n// eslint-disable-next-line no-undef\n})(typeof exports === 'undefined' ? py : exports);", "odoo.define('web_studio.AbstractEditorManager', function (require) {\n\"use strict\";\n\nvar concurrency = require('web.concurrency');\nvar core = require('web.core');\nvar Widget = require('web.Widget');\n\nvar bus = require('web_studio.bus');\nvar XMLEditor = require('web_studio.XMLEditor');\nconst { ComponentWrapper } = require(\"web.OwlCompatibility\");\n\nvar _lt = core._lt;\nvar _t = core._t;\n\nvar AbstractEditorManager = Widget.extend({\n    className: 'o_web_studio_editor_manager',\n    custom_events: {\n        close_xml_editor: '_onCloseXMLEditor',\n        drag_component: '_onDragComponent',\n        node_clicked: '_onNodeClicked',\n        open_xml_editor: '_onOpenXMLEditor',\n        save_xml_editor: '_onSaveXMLEditor',\n        sidebar_tab_changed: '_onSidebarTabChanged',\n        studio_error: '_onStudioError',\n        view_change: '_onViewChange',\n    },\n    error_messages: {\n        wrong_xpath: _lt(\"This operation caused an error, probably because a xpath was broken\"),\n        view_rendering: _lt(\"The requested change caused an error in the view. It could be because a field was deleted, but still used somewhere else.\"),\n    },\n    /**\n     * @override\n     */\n    init: function () {\n        this._super.apply(this, arguments);\n\n        this.editor = undefined;\n        this.sidebar = undefined;\n        this.sidebarScrollTop = undefined;\n\n        this.mode = 'edition';  // the other mode is 'rendering' in XML editor\n\n        this.operations = [];\n        this.operations_undone = [];\n\n        this.mdp = new concurrency.MutexedDropPrevious();\n\n        bus.on('undo_clicked', this, this._undo);\n        bus.on('redo_clicked', this, this._redo);\n    },\n    /**\n     * @override\n     */\n    start: function () {\n        var self = this;\n        return this._super.apply(this, arguments).then(function () {\n            return self._instantiateEditor().then(function (editor) {\n                var defs = [];\n                var $editorFragment = $('<div>', {\n                    class: 'o_web_studio_view_renderer',\n                });\n                self.editor = editor;\n                if (self.editor instanceof ComponentWrapper) {\n                    defs.push(self.editor.mount($editorFragment[0]));\n                } else {\n                    defs.push(self.editor.appendTo($editorFragment));\n                }\n                // TODO: is that correct? shouldn't this be done in then the\n                // appendTo\n                $editorFragment.appendTo(self.$el);\n\n                self.sidebar = self._instantiateSidebar();\n                defs.push(self.sidebar.prependTo(self.$el));\n                return Promise.all(defs);\n            });\n        });\n    },\n    /**\n     * @override\n     */\n    destroy: function () {\n        bus.trigger('undo_not_available');\n        bus.trigger('redo_not_available');\n        this._super.apply(this, arguments);\n    },\n    /**\n     * Called each time the view editor manager is attached to the DOM. This is\n     * important for the graph editor, which only renders itself when it is in\n     * the DOM\n     *\n     */\n    on_attach_callback: function () {\n        if (this.editor && this.editor.on_attach_callback) {\n            this.editor.on_attach_callback();\n        }\n        this.isInDOM = true;\n    },\n    /**\n     * Called each time the view editor manager is detached from the DOM.\n     *\n     */\n    on_detach_callback: function () {\n        if (this.editor && this.editor.on_detach_callback) {\n            this.editor.on_detach_callback();\n        }\n        this.isInDOM = false;\n    },\n\n    //--------------------------------------------------------------------------\n    // Public\n    //--------------------------------------------------------------------------\n\n    //--------------------------------------------------------------------------\n    // Private\n    //--------------------------------------------------------------------------\n\n    /**\n     * Apply the changes, i.e. the stack of operations on the Studio view.\n     *\n     * @param {Boolean} remove_last_op\n     * @param {Boolean} from_xml\n     * @returns {Promise}\n     */\n    _applyChanges: function (remove_last_op, from_xml) {\n        var self = this;\n\n        var lastOp = this.operations.slice(-1)[0];\n        var lastOpID = lastOp && lastOp.id;\n\n        bus.trigger('toggle_snack_bar', 'saving');\n\n        var def;\n        if (from_xml) {\n            def = this.mdp.exec(this._editViewArch.bind(\n                this,\n                lastOp.view_id,\n                lastOp.new_arch\n            )).guardedCatch(function () {\n                self.trigger_up('studio_error', {error: 'view_rendering'});\n            });\n        } else {\n            def = this.mdp.exec(function () {\n                var serverOperations = [];\n                _.each(self.operations, function (op) {\n                    if (op.type !== 'replace_arch') {\n                        serverOperations.push(_.omit(op, 'id'));\n                    }\n                });\n                var prom = self._editView(\n                    self.view_id,\n                    self.studio_view_arch,\n                    serverOperations\n                );\n                prom.guardedCatch(function () {\n                    self.trigger_up('studio_error', {error: 'wrong_xpath'});\n                    return self._undo(lastOpID, true).then(function () {\n                        return Promise.reject();\n                    });\n                });\n                return prom;\n            });\n        }\n        return def\n            .then(function (result) {\n                if (from_xml) {\n                    self._cleanOperationsStack(lastOp);\n                }\n                if (remove_last_op) { self.operations.pop(); }\n                return self._applyChangeHandling(result, lastOpID, from_xml);\n            })\n            .then(function () {\n                self._updateButtons();\n                if (self.sidebar.state.mode !== 'properties') {\n                    // TODO: the sidebar will be updated by clicking on the node\n                    self._updateSidebar(self.sidebar.state.mode);\n                }\n                bus.trigger('toggle_snack_bar', 'saved');\n            });\n    },\n    /**\n     * To be overriden.\n     *\n     * @param {Object} result\n     * @param {String} [opID]\n     * @param {boolean} [from_xml]\n     * @returns {Promise}\n     */\n    _applyChangeHandling: function (result, opID, from_xml) {\n        return Promise.resolve();\n    },\n    /**\n     * To be overriden.\n     *\n     * @private\n     * @param {Object} lastOp\n     */\n    _cleanOperationsStack: function (lastOp) {\n        this.operations = [];\n        this.operations_undone = [];\n    },\n    /**\n     * @private\n     * @param {Object} op\n     * @returns {Promise}\n     */\n    _do: function (op) {\n        op.id = _.uniqueId('op_');\n        this.operations.push(op);\n        this.operations_undone = [];\n\n        return this._applyChanges(false, op.type === 'replace_arch');\n    },\n    /**\n     * To be overriden.\n     *\n     * @private\n     * @param {String} [mode]\n     * @param {Object} [params]\n     * @returns {Promise<Object>}\n     */\n    _getSidebarState: function (mode, params) {\n        var newState = mode ? {mode: mode} : this.sidebar.state;\n        return Promise.resolve(newState);\n    },\n    /**\n     * To be overriden.\n     *\n     * The point of this function is to receive a list of customize operations\n     * to do.\n     *\n     * @private\n     * @param {Integer} view_id\n     * @param {String} studio_view_arch\n     * @param {Array} operations\n     * @returns {Promise}\n     */\n    _editView: function (view_id, studio_view_arch, operations) {\n        return Promise.resolve();\n    },\n    /**\n     * To be overriden.\n     *\n     * This is used when the view is edited with the XML editor: the whole arch\n     * is replaced by a new one.\n     *\n     * @private\n     * @param {Integer} view_id\n     * @param {String} view_arch\n     * @returns {Promise}\n     */\n    _editViewArch: function (view_id, view_arch) {\n        return Promise.resolve();\n    },\n    /**\n     * To be overriden.\n     *\n     * @param {Object} params\n     * @returns {Promise}\n     */\n    _instantiateEditor: function (params) {\n        return Promise.resolve();\n    },\n    /**\n     * To be overriden.\n     * TODO: should probably have the same signature than instantiateEditor\n     *\n     * @param {Object} state\n     * @returns {Widget} a sidebar instance\n     */\n    _instantiateSidebar: function (state) {\n    },\n    /**\n     * Redo the last operation.\n     *\n     * @private\n     * @returns {Promise}\n     */\n    _redo: function () {\n        if (!this.operations_undone.length) {\n            return;\n        }\n        var op = this.operations_undone.pop();\n        this.operations.push(op);\n\n        return this._applyChanges(false, op.type === 'replace_arch');\n    },\n    /**\n     * Update the undo/redo button according to the operation stack.\n     */\n    _updateButtons: function () {\n        // Undo button\n        if (this.operations.length) {\n            bus.trigger('undo_available');\n        } else {\n            bus.trigger('undo_not_available');\n        }\n\n        // Redo button\n        if (this.operations_undone.length) {\n            bus.trigger('redo_available');\n        } else {\n            bus.trigger('redo_not_available');\n        }\n    },\n    /**\n     * Re-render the sidebar and destroy the old while keeping the scroll\n     * position.\n     * If mode is not specified, the sidebar will be renderered with the same\n     * state.\n     * The sidebar will be detached if the XML editor is displayed.\n     *\n     * @private\n     * @param {String} [mode]\n     * @param {Object} [params]\n     * @returns {Promise}\n     */\n    _updateSidebar: function (mode, params) {\n        var self = this;\n\n        if  (this.sidebar.$el) {\n            // as the sidebar is updated via trigger_up (`sidebar_tab_changed`),\n            // we might want to update a sidebar which wasn't started yet\n\n            // TODO: scroll top is calculated to 'o_web_studio_sidebar_content'\n            this.sidebarScrollTop = this.sidebar.$el.scrollTop();\n        }\n\n        return this._getSidebarState(mode, params).then(function (newState) {\n            var oldSidebar = self.sidebar;\n            var previousState = oldSidebar.getLocalState ? oldSidebar.getLocalState() : undefined;\n            const newSidebar = self._instantiateSidebar(newState, previousState);\n            self.sidebar = newSidebar;\n\n            var fragment = document.createDocumentFragment();\n            return newSidebar.appendTo(fragment).then(function () {\n                oldSidebar.destroy();\n                if (!newSidebar.isDestroyed()) {\n                    newSidebar.$el.prependTo(self.$el);\n                    if (newSidebar.on_attach_callback) {\n                        newSidebar.on_attach_callback();\n                    }\n                    newSidebar.$el.scrollTop(self.sidebarScrollTop);\n                    // the XML editor replaces the sidebar in this case\n                    if (self.mode === 'rendering') {\n                        newSidebar.$el.detach();\n                    }\n                }\n            });\n        });\n    },\n    /**\n     * Undo the last operation.\n     *\n     * @private\n     * @param {String} [opID] unique operation identifier\n     * @param {Boolean} [forget=False]\n     * @returns {Promise}\n     */\n    _undo: function (opID, forget) {\n        if (!this.operations.length) {\n            return Promise.resolve();\n        }\n\n        // find the operation to undo and update the operations stack\n        var op;\n        if (opID) {\n            op = _.findWhere(this.operations, {id: opID});\n            this.operations = _.without(this.operations, op);\n        } else {\n            op = this.operations.pop();\n        }\n\n        if (!forget) {\n            // store the operation in case of redo\n            this.operations_undone.push(op);\n        }\n\n        if (op.type === 'replace_arch') {\n            // as the whole arch has been replace (A -> B),\n            // when undoing it, the operation (B -> A) is added and\n            // removed just after.\n            var undo_op = jQuery.extend(true, {}, op);\n            undo_op.old_arch = op.new_arch;\n            undo_op.new_arch = op.old_arch;\n            this.operations.push(undo_op);\n            return this._applyChanges(true, true);\n        } else {\n            return this._applyChanges(false, false);\n        }\n    },\n\n    //--------------------------------------------------------------------------\n    // Handlers\n    //--------------------------------------------------------------------------\n\n    /**\n     * @private\n     */\n    _onCloseXMLEditor: function () {\n        this.XMLEditor.destroy();\n        this.XMLEditor = null;\n        this.sidebar.prependTo(this.$el);\n        $('body').removeClass('o_in_studio_xml_editor');\n        this.mode = 'edition';\n    },\n    /**\n     * To be overriden.\n     *\n     * @private\n     * @param {OdooEvent} ev\n     */\n    _onDragComponent: function (ev) {\n    },\n    /**\n     * To be overriden.\n     *\n     * @private\n     * @param {OdooEvent} ev\n     */\n    _onNodeClicked: function (ev) {\n    },\n    /**\n     * @private\n     */\n    _onOpenXMLEditor: function () {\n        var self = this;\n        this.mode = 'rendering';\n\n        this.XMLEditor = new XMLEditor(this, this.view_id, {\n            position: 'left',\n            doNotLoadSCSS: true,\n            doNotLoadJS: true,\n        });\n\n        this.XMLEditor.prependTo(this.$el).then(function () {\n            self.sidebar.$el.detach();\n            $('body').addClass('o_in_studio_xml_editor');\n        });\n    },\n    /**\n     * @private\n     * @param {OdooEvent} ev\n     */\n    _onSaveXMLEditor: function (ev) {\n        this._do({\n            type: 'replace_arch',\n            view_id: ev.data.view_id,\n            old_arch: ev.data.old_arch,\n            new_arch: ev.data.new_arch,\n        }).then(function () {\n            if (ev.data.on_success) {\n                ev.data.on_success();\n            }\n        }, function () {\n            if (ev.data.on_fail) {\n                ev.data.on_fail();\n            }\n        });\n    },\n    /**\n     * @private\n     * @param {OdooEvent} ev\n     */\n    _onSidebarTabChanged: function (ev) {\n        this._updateSidebar(ev.data.mode);\n        this.editor.unselectedElements();\n    },\n    /**\n     * @private\n     * @param {OdooEvent} ev\n     */\n    _onStudioError: function (ev) {\n        this.displayNotification({ title: _t(\"Error\"), message: this.error_messages[ev.data.error], type: 'danger' });\n    },\n    /**\n     * To be overriden.\n     *\n     * @private\n     * @param {OdooEvent} ev\n     */\n    _onViewChange: function (ev) {\n    },\n});\n\nreturn AbstractEditorManager;\n\n});\n", "odoo.define('web_studio.FieldSelectorDialog', function (require) {\n\"use strict\";\n\nvar config = require('web.config');\nvar core = require('web.core');\nvar Dialog = require('web.Dialog');\nvar _t = core._t;\n\nvar FieldSelectorDialog = Dialog.extend({\n    template: 'web_studio.Legacy.FieldSelectorDialog',\n    /**\n     * @constructor\n     * @param {Widget} parent\n     * @param {Object} fields\n     * @param {Boolean} show_new\n     */\n    init: function (parent, fields, show_new) {\n        // set the field name because key will be lost after sorting dict\n        this.orderered_fields = _.sortBy(\n            _.mapObject(fields, function (attrs, fieldName) {\n                return {\n                    name: fieldName,\n                    string: attrs.string\n                };\n            }), 'string');\n        this.show_new = show_new;\n        this.debug = config.isDebug();\n\n        var options = {\n            title: _t('Select a Field'),\n            buttons: [{\n                text: _t(\"Confirm\"),\n                classes: 'btn-primary',\n                click: this._onConfirm.bind(this),\n                close: true\n            }, {\n                text: _t(\"Cancel\"),\n                click: this._onCancel.bind(this),\n                close: true\n            }],\n        };\n        this._super(parent, options);\n    },\n\n    //--------------------------------------------------------------------------\n    // Handlers\n    //--------------------------------------------------------------------------\n\n    /**\n     * @private\n     */\n    _onConfirm: function () {\n        var selectedField = this.$('select[name=\"field\"]').val();\n        this.trigger('confirm', selectedField);\n    },\n    /**\n     * @private\n     */\n    _onCancel: function () {\n        this.trigger('cancel');\n    },\n});\n\n\nreturn FieldSelectorDialog;\n\n});\n", "odoo.define('web_studio.NewFieldDialog', function (require) {\n\"use strict\";\n\nvar config = require('web.config');\nvar core = require('web.core');\nvar Dialog = require('web.Dialog');\nvar relational_fields = require('web.relational_fields');\nvar ModelFieldSelector = require('web.ModelFieldSelector');\nvar StandaloneFieldManagerMixin = require('web.StandaloneFieldManagerMixin');\n\nvar _t = core._t;\nvar qweb = core.qweb;\nvar Many2one = relational_fields.FieldMany2One;\n\n// TODO: refactor this file\n\nvar NewFieldDialog = Dialog.extend(StandaloneFieldManagerMixin, {\n    template: 'web_studio.NewFieldDialog',\n    events: {\n        'keyup .o_web_studio_selection_new_value > input': '_onAddSelectionValue',\n        'click .o_web_studio_edit_selection_value': '_onEditSelectionValue',\n        'click .o_web_studio_remove_selection_value': '_onRemoveSelectionValue',\n        'click .o_web_studio_add_selection_value': '_onAddSelectionValue',\n        'click .o_web_studio_clear_selection_value': '_onClearSelectionValue',\n        'blur .o_web_studio_selection_editor .o_web_studio_selection_input': '_onSelectionInputBlur',\n    },\n    /**\n     * @constructor\n     * @param {String} model_name\n     * @param {Object} field\n     * @param {Object} fields\n     * @param {Object[]} field_chain - list of the initial field chain parts\n     */\n    init: function (parent, model_name, field, fields, field_chain) {\n        this.model_name = model_name;\n        this.type = field.type;\n        this.field = field;\n        this.fieldChain = field_chain || [];\n        this.order = field.order;\n        this.followRelations = field.followRelations || function (field) {return true;};\n        this.filter = field.filter || function (field) {return true;};\n        this.filters = field.filters;\n\n        if (this.type === 'selection') {\n            this.selection = this.field.selection && this.field.selection.slice() || [];\n        }\n\n        this.fields = fields;\n        var options = _.extend({\n            title: _t('Field Properties'),\n            size: 'small',\n            buttons: [{\n                text: _t(\"Confirm\"),\n                classes: 'btn-primary',\n                click: this._onSave.bind(this),\n            }, {\n                text: _t(\"Cancel\"),\n                close: true,\n            }],\n        }, options);\n        this._super(parent, options);\n        StandaloneFieldManagerMixin.init.call(this);\n    },\n    /**\n     * @override\n     */\n    renderElement: function () {\n        this._super.apply(this, arguments);\n\n        if (this.type === 'selection') {\n           this.$('.o_web_studio_selection_editor').sortable({\n                axis: 'y',\n                containment: '.o_web_studio_field_dialog_form',\n                items: '> li',\n                helper: 'clone',\n                handle: '.input-group',\n                opacity: 0.6,\n                stop: this._resequenceSelection.bind(this),\n           });\n       }\n    },\n    /**\n     * @override\n     */\n    start: function() {\n        var self = this;\n        var defs = [];\n        var record;\n        var options = {\n            mode: 'edit',\n        };\n\n        this.$modal.addClass('o_web_studio_field_modal');\n\n        if (this.type === 'selection') {\n            // Focus on the input responsible for adding new selection value\n            this.opened().then(function () {\n                self.$('.o_web_studio_selection_new_value > input').focus();\n            });\n        } else if (this.type === 'one2many') {\n            defs.push(this.model.makeRecord('ir.model.fields', [{\n                name: 'field',\n                relation: 'ir.model.fields',\n                type: 'many2one',\n                domain: [['relation', '=', this.model_name], ['ttype', '=', 'many2one'], ['model_id.abstract', '=', false], [\"store\", \"=\", true]],\n            }], {\n                'field': {\n                    can_create: false,\n                }\n            }).then(function (recordID) {\n                record = self.model.get(recordID);\n                self.many2one_field = new Many2one(self, 'field', record, options);\n                self._registerWidget(recordID, 'field', self.many2one_field);\n                self.many2one_field.nodeOptions.no_create_edit = !config.isDebug();\n                self.many2one_field.appendTo(self.$('.o_many2one_field'));\n            }));\n        } else if (_.contains(['many2many', 'many2one'], this.type)) {\n            defs.push(this.model.makeRecord('ir.model', [{\n                name: 'model',\n                relation: 'ir.model',\n                type: 'many2one',\n                domain: [['transient', '=', false], ['abstract', '=', false]]\n            }]).then(function (recordID) {\n                record = self.model.get(recordID);\n                self.many2one_model = new Many2one(self, 'model', record, options);\n                self._registerWidget(recordID, 'model', self.many2one_model);\n                self.many2one_model.nodeOptions.no_create_edit = !config.isDebug();\n                self.many2one_model.appendTo(self.$('.o_many2one_model'));\n            }));\n        } else if (this.type === 'related') {\n            // This restores default modal height (bootstrap) and allows field selector to overflow\n            this.$el.css(\"overflow\", \"visible\").closest(\".modal-dialog\").css(\"height\", \"auto\");\n            var field_options = {\n                order: this.order,\n                filter: this.filter,\n                followRelations: this.followRelations,\n                fields: this.fields, //_.filter(this.fields, this.filter),\n                readonly: false,\n                filters: _.extend({}, this.filters, {searchable: false}),\n            };\n            this.fieldSelector = new ModelFieldSelector(this, this.model_name, this.fieldChain, field_options);\n            defs.push(this.fieldSelector.appendTo(this.$('.o_many2one_field')));\n        }\n\n        defs.push(this._super.apply(this, arguments));\n        return Promise.all(defs);\n    },\n\n    /**\n     * @private\n     * @param {Event} e\n     */\n    _resequenceSelection: function () {\n        var self = this;\n        var newSelection = [];\n        this.$('.o_web_studio_selection_editor li').each(function (index, u) {\n            var value = u.dataset.value;\n            var string = _.find(self.selection, function(el) {\n                return el[0] === value;\n            })[1];\n            newSelection.push([value, string]);\n        });\n        this.selection = newSelection;\n    },\n\n    //--------------------------------------------------------------------------\n    // Handlers\n    //--------------------------------------------------------------------------\n\n    /**\n     * @private\n     * @param {Event} e\n     */\n    _onAddSelectionValue: function (e) {\n        if (e.type === \"keyup\" && e.which !== $.ui.keyCode.ENTER) { return; }\n\n        var $input = this.$(\".o_web_studio_selection_new_value input\");\n        var string = $input.val().trim();\n\n        if (string && !_.find(this.selection, function(el) {return el[1] === string; })) {\n            // add a new element\n            this.selection.push([string, string]);\n        }\n        this.renderElement();\n        this.$('.o_web_studio_selection_new_value > input').focus();\n    },\n    /**\n     * @private\n     * @param {Event} ev\n     */\n    _onEditSelectionValue: function (ev) {\n        var self = this;\n        var $btn = $(ev.currentTarget);\n\n        if (config.isDebug()) {\n            var val = $btn.closest('li')[0].dataset.value;  // use dataset to always get a string\n            var index = _.findIndex(this.selection, function (el) {return el[0] === val;});\n            new Dialog(this, {\n                title: _t('Edit Value'),\n                size: 'small',\n                $content: $(qweb.render('web_studio.SelectionValues.edit', {\n                    element: self.selection[index],\n                })),\n                buttons: [\n                    {text: _t('Confirm'), classes: 'btn-primary', close: true, click: function () {\n                        var newValue = this.$('input#o_selection_value').val() || val;\n                        var newString = this.$('input#o_selection_label').val();\n                        self.selection[index] = [newValue, newString];\n                        self.renderElement();\n                    }},\n                    {text: _t('Close'), close: true},\n                ],\n            }).open();\n        } else {\n            $btn.toggleClass('fa-check fa-pencil-square-o');\n            var $input = $btn.closest('li').find('.o_web_studio_selection_input.d-none');\n            var $span = $input.siblings('.o_web_studio_selection_label');\n            // Toggle span and input, and set the initial value for input\n            $input.val($span.toggleClass('d-none').text().trim()).toggleClass('d-none').focus();\n        }\n    },\n    /**\n     * Removes a selection value from the widget\n     * The python is in charge of determining whether some records\n     * have a deleted value, and raises if this is the case\n     *\n     * @private\n     * @param {Event} e\n     */\n    _onRemoveSelectionValue: function (e) {\n        var val = $(e.target).closest('li')[0].dataset.value;\n        var element = _.find(this.selection, function(el) {return el[0] === val; });\n        var index = this.selection.indexOf(element);\n        if (index >= 0) {\n            this.selection.splice(index, 1);\n        }\n        this.renderElement();\n    },\n    /**\n     * @private\n     */\n    _onClearSelectionValue: function () {\n        this.$('.o_web_studio_selection_input').val(\"\").focus();\n    },\n    /**\n     * @private\n     */\n    _onSave: function () {\n        var values = {};\n        if (this.type === 'one2many') {\n            if (!this.many2one_field.value) {\n                this.trigger_up('warning', {title: _t('You must select a related field')});\n                return;\n            }\n            values.relation_field_id = this.many2one_field.value.res_id;\n        } else if (_.contains(['many2many', 'many2one'], this.type)) {\n            if (!this.many2one_model.value) {\n                this.trigger_up('warning', {title: _t('You must select a relation')});\n                return;\n            }\n            values.relation_id = this.many2one_model.value.res_id;\n            values.field_description = this.many2one_model.m2o_value;\n        } else if (this.type === 'selection') {\n            var newSelection = this.$('.o_web_studio_selection_new_value > input').val();\n            if (newSelection) {\n                this.selection.push([newSelection, newSelection]);\n            }\n            if (!this.selection.length) {\n                this.trigger_up('warning', {title: _t('You must have at least one option set')});\n                return;\n            }\n            values.selection = JSON.stringify(this.selection);\n        } else if (this.type === 'related') {\n            var selectedField = this.fieldSelector.getSelectedField();\n            if (!selectedField) {\n                this.trigger_up('warning', {title: _t('You must select a related field')});\n                return;\n            }\n            values.string = selectedField.string;\n            values.model = selectedField.model;\n            values.related = this.fieldSelector.chain.join('.');\n            values.type = selectedField.type;\n            values.readonly = true;\n            values.copy = false;\n            values.store = selectedField.store;\n            if (_.contains(['many2one', 'many2many'], selectedField.type)) {\n                values.relation = selectedField.relation;\n            } else if (selectedField.type === 'one2many') {\n                values.relational_model = selectedField.model;\n            } else if (selectedField.type === 'selection') {\n                values.selection = selectedField.selection;\n            } else if (selectedField.type === 'monetary') {\n                // find the associated currency field on the related model in\n                // case there is no currency field on the current model\n                var currencyField = _.find(_.last(this.fieldSelector.pages), function (el) {\n                    return el.name === 'currency_id' || el.name === 'x_currency_id';\n                });\n                if (currencyField) {\n                    var chain = this.fieldSelector.chain.slice();\n                    chain.splice(chain.length - 1, 1, currencyField.name);\n                    values._currency = chain.join('.');\n                }\n            }\n\n            if (_.contains(['one2many', 'many2many'], selectedField.type)) {\n                values.store = false;\n            }\n        }\n        this.trigger('field_default_values_saved', values);\n    },\n    /**\n     * @private\n     * @param {Event} ev\n     */\n    _onSelectionInputBlur: function (ev) {\n        var $input = $(ev.currentTarget);\n        var val = $input.closest('li')[0].dataset.value;  // use dataset to always get the string\n        var index = _.findIndex(this.selection, function (el) { return el[0] === val; });\n        this.selection[index][1] = $input.val();\n        this.renderElement();\n    },\n});\n\nreturn NewFieldDialog;\n\n});\n", "odoo.define('web_studio.XMLEditor', function (require) {\n'use strict';\n\nvar AceEditor = require('web_editor.ace');\n\n/**\n * Extend the default view editor so that views are saved thanks to web studio and not\n * default RPC. Also notifies studio when the editor is closed.\n */\nreturn AceEditor.extend({\n\n    //--------------------------------------------------------------------------\n    // Public\n    //--------------------------------------------------------------------------\n\n    /**\n     * @override\n     */\n    do_hide: function () {\n        this.trigger_up(\"close_xml_editor\");\n        this._super.apply(this, arguments);\n    },\n\n    //--------------------------------------------------------------------------\n    // Private\n    //--------------------------------------------------------------------------\n\n    /**\n     * @override\n     */\n    _isCustomResource(resID) {\n        if (this.currentType === \"xml\") {\n            return _.str.startsWith(this.views[resID].xml_id, 'studio_customization');\n        } else {\n            return this._super(...arguments);\n        }\n    },\n    /**\n     * @override\n     */\n    _saveView: function (session) {\n        var self = this;\n        var view = this.views[session.id];\n        var old_arch = view.arch;\n        var new_arch = session.text;\n\n        return new Promise(function (resolve, reject) {\n            self.trigger_up('save_xml_editor', {\n                view_id: session.id,\n                old_arch: old_arch,\n                new_arch: new_arch,\n                on_success: function () {\n                    self._toggleDirtyInfo(session.id, \"xml\", false);\n                    view.arch = new_arch;\n                    resolve();\n                },\n                on_fail: reject,\n            });\n        });\n    },\n});\n\n});\n", "odoo.define('web_studio.ReportEditor', function (require) {\n\"use strict\";\n\nvar core = require('web.core');\nvar Widget = require('web.Widget');\n\nvar EditorMixin = require('web_studio.EditorMixin');\n\nvar _t = core._t;\n\nvar ReportEditor = Widget.extend(EditorMixin, {\n    template: 'web_studio.ReportEditor',\n    nearest_hook_tolerance: 500,\n    events: _.extend({}, Widget.prototype.events, {\n        'click': '_onClick',\n    }),\n\n    /**\n     * @override\n     *\n     * @param {Widget} parent\n     * @param {Object} params\n     * @param {Object} params.nodesArchs\n     * @param {String} params.reportHTML\n     * @param {Object} [params.paperFormat]\n     */\n    init: function (parent, params) {\n        this._super.apply(this, arguments);\n\n        this.nodesArchs = params.nodesArchs;\n        this.reportHTML = params.reportHTML;\n\n        this.paperFormat = params.paperFormat || {};\n\n        this.$content = $();\n        this.$noContentHelper = $();\n\n        this.selectedNode = null;\n        this.$targetHighlight = $();\n\n        this.$dropZone = $();\n        this._onUpdateContentId = _.uniqueId('_processReportPreviewContent');\n        this.isDragging = false;\n    },\n    /**\n     * @override\n     */\n    start: function () {\n        this.$iframe = this.$('iframe');\n        this.$iframe.one('load', this._updateContent.bind(this));\n        return this._super.apply(this, arguments);\n    },\n    /**\n     * @override\n     */\n    destroy: function () {\n        window.top[this._onUpdateContentId] = null;\n        delete window.top[this._onUpdateContentId];\n        if (this.$content) {\n            this.$content.off('click');\n            this.$content.off('load');\n        }\n        return this._super.apply(this, arguments);\n    },\n    //--------------------------------------------------------------------------\n    // Public\n    //--------------------------------------------------------------------------\n\n    /**\n     * Start dragging the component, notify that no cleanup should occur\n     * because a drag operation is ongoing.\n     */\n    beginDragComponent: function (component) {\n        this.isDragging = true;\n        if (this.$content.find('.o_web_studio_hook').length === 0) {\n            // for the case where computing the hooks takes long and\n            // the user is too fast with the mouse\n            this._prepareHooksOnIframeBeforeDrag(component);\n        }\n    },\n    beginPreviewDragComponent: function (component) {\n        if (this.isDragging) {\n            return;\n        }\n        this._prepareHooksOnIframeBeforeDrag(component);\n    },\n    /**\n    * Insert Studio hooks in the dom iframe, according to which building block\n    * is being dragged.\n    *\n    * @param {Component} component the building block being dragged\n    */\n    _prepareHooksOnIframeBeforeDrag: function (component) {\n        var self = this;\n\n        this._cleanHooks();\n        this.$noContentHelper.remove();\n\n        var dropIn = component.dropIn;\n        if (component.dropColumns && component.addEmptyRowsTargets) {\n            dropIn = (dropIn ? dropIn + ',' : '') + '.page > .row > div:empty';\n        }\n        if (dropIn) {\n            var inSelectors = dropIn.split(component.selectorSeparator || ',');\n            _.each(inSelectors, function (selector) {\n                var $target = self.$content.find(selector + \"[data-oe-xpath]\");\n                _.each($target, function (node) {\n                    if (!$(node).data('node')) {\n                        // this is probably a template not present in\n                        // reportViews so no hook should be attached to it\n                        // TODO: should the corresponding view be branded\n                        // (server-side) in this case (there won't be any\n                        // data-oe-xpath then)?\n                        return;\n                    }\n                    self._createHookOnNodeAndChildren($(node), component);\n                });\n            });\n        }\n        if (component.dropColumns) {\n            // when dropping the component, it should have a specific (bootstrap) column structure\n            // we will create this structure or complete it if it already exist\n            var $hook = self._createHook($('<div/>'), component);\n            var $gridHooks = $('<div class=\"row o_web_studio_structure_hook\"/>');\n            _.each(component.dropColumns, function (column, index) {\n                var $col = $('<div class=\"offset-' + column[0] + ' col-' + column[1] + '\"/>');\n                $col.append($hook.clone().attr('data-oe-index', index));\n                $gridHooks.append($col);\n            });\n\n            var $page = this.$content.find('.page');\n            var $children = $page.children().not('.o_web_studio_hook,p:not([data-oe-id])');\n\n            if ($children.length) {\n                $gridHooks.find('.o_web_studio_hook').data('oe-node', $children.first()).data('oe-position', 'before');\n                $children.first().before($gridHooks);\n\n                _.each($children, function (child) {\n                    var $child = $(child);\n                    var $newHook = $gridHooks.clone();\n                    $newHook.find('.o_web_studio_hook').data('oe-node', $child).data('oe-position', 'after');\n                    $child.after($newHook);\n                });\n            } else {\n                $gridHooks.find('.o_web_studio_hook').data('oe-node', $page).data('oe-position', 'inside');\n                $page.prepend($gridHooks);\n            }\n\n            this.$content.find('.o_web_studio_structure_hook + .o_web_studio_hook').remove();\n            this.$content.find('.o_web_studio_structure_hook').prev('.o_web_studio_hook').remove();\n        }\n        this.$content.find('.o_web_studio_hook + .o_web_studio_hook').remove();\n        this.$dropZone = this.$content.find('.o_web_studio_hook');\n\n        this.$dropZoneStructure = this.$content.find('.o_web_studio_structure_hook');\n        this.$dropZoneStructure.removeClass('.o_web_studio_nearest').each(function () {\n            $(this).children().children('.o_web_studio_hook:only-child').data('height', $(this).height() + 'px');\n        });\n\n        // compute the size box with the nearest rendering\n        this._computeNearestHookAndShowIt();\n\n        // association for td and colspan\n        this.$dropZone.filter('th, td').each(function (_, item) {\n            var $item = $(item);\n            var $node = $item.data('oe-node');\n            var colspan = +$node.data('colspan');\n            if (colspan > 1) {\n                $node.attr('colspan', colspan * 2 - 1);\n            }\n        });\n    },\n    /**\n     * When a component is being dragged in the iframe, this function computes\n     * which Studio hook(s) are the nearest.\n     *\n     * @param {Component} component\n     * @param {integer} x\n     * @param {integer} y\n     */\n    dragComponent: function (component, x, y) {\n        this.isDragging = true;\n        this.$dropZone\n            .filter('.o_web_studio_nearest_hook')\n            .removeClass('o_web_studio_nearest_hook')\n            .closest(this.$dropZoneStructure).each(function () {\n                $(this).children().css('height', '').children('.o_web_studio_hook:only-child').css('height', '');\n            });\n\n        this.$dropZoneStructure.removeClass('o_web_studio_nearest');\n\n        var bound = this.$iframe[0].getBoundingClientRect();\n        var isInIframe = (x >= bound.left && x <= bound.right) && (y >= bound.top && y <= bound.bottom);\n        if (!isInIframe) {\n            return;\n        }\n\n        // target with position of the box center\n        _.each(this.dropPosition, function (box) {\n            box.dist = Math.sqrt(Math.pow(box.centerY - (y - bound.top), 2) + Math.pow(box.centerX - (x - bound.left), 2));\n        });\n        this.dropPosition.sort(function (a, b) {\n            return a.dist - b.dist;\n        });\n\n        if (!this.dropPosition[0] || this.dropPosition[0].dist > this.nearest_hook_tolerance) {\n            return;\n        }\n\n        var $nearestHook = $(this.dropPosition[0].el);\n\n        $nearestHook\n            .addClass('o_web_studio_nearest_hook')\n            .closest(this.$dropZoneStructure)\n            .addClass('o_web_studio_nearest');\n\n        if (!$nearestHook.data('oe-node') || !$nearestHook.data('oe-node').data('oe-id')) {\n            return;\n        }\n\n        var $node = $nearestHook.data('oe-node');\n        var id = $node.data('oe-id');\n        var xpath = $node.data('oe-xpath');\n        var position = $nearestHook.data('oe-position');\n        var index = $nearestHook.data('oe-index');\n\n        var td = $node.is('td, th');\n        var reg, replace;\n        if (td) {\n            reg = /^(.*?)\\/(thead|tbody|tfoot)(.*?)\\/(td|th)(\\[[0-9]+\\])?/;\n            replace = td && position === 'inside' ? '$1/$2/tr/td' : '$1/tr/td';\n            xpath = xpath.replace(reg, replace);\n        }\n\n        // select all dropzone with the same xpath\n        var $nearestHooks = this.$dropZone.filter(function () {\n            var $hook = $(this);\n            var $node = $hook.data('oe-node');\n            return $hook.data('oe-position') === position &&\n                $hook.data('oe-index') === index &&\n                $node.data('oe-id') === id &&\n                (td ? $node.data('oe-xpath').replace(reg, replace) : $node.data('oe-xpath')) === xpath;\n        });\n\n        if (td) {\n            var pos = $nearestHook.data('oe-node').data('td-position-' + (position === 'before' ? 'before' : 'after'));\n            $nearestHooks = $nearestHooks.filter(function () {\n                var $node = $(this).data('oe-node');\n                return $node.data('td-position-' + (position === 'before' ? 'before' : 'after')) === pos;\n            });\n        }\n\n        $nearestHooks.addClass('o_web_studio_nearest_hook');\n    },\n    /**\n     * When a component has been dropped in the iframe, we genrate the changes\n     * in the view and clean the hooks.\n     *\n     * @param {Component} component\n     */\n    dropComponent: function (component) {\n        this.isDragging = false;\n        var $nearestHooks = this.$dropZone.filter('.o_web_studio_nearest_hook');\n        var targets = [];\n\n        // targets need to contain all the targets that are unique (oe-id, oe-xpath)\n        $nearestHooks.get().forEach(function (nearHook) {\n            var $active = $(nearHook);\n            var alreadyAdded = false;\n            var nodeData = $active.data('oe-node').data('node');\n\n            for (var i = 0; i < targets.length; i++) {\n                if (targets[i].node.attrs['data-oe-id'] === nodeData.attrs['data-oe-id'] &&\n                    targets[i].node.attrs['data-oe-xpath'] === nodeData.attrs['data-oe-xpath']) {\n                    alreadyAdded = true;\n                }\n            }\n            if (!alreadyAdded) {\n                targets.push({\n                    node: nodeData,\n                    position: $active.data('oe-position'),\n                    data: $active.data(),\n                });\n            }\n        });\n\n        if (targets.length) {\n            this.trigger_up('view_change', {\n                component: component,\n                fail: this._cleanHooks.bind(this),\n                targets: targets,\n                operation: {\n                    type: 'add',\n                    position: $nearestHooks.first().data('oe-position'),\n                },\n            });\n        } else {\n            this._cleanHooks();\n        }\n    },\n\n    endPreviewDragComponent: function (component) {\n        this._cleanHooks();\n    },\n    /**\n     * Get the context associated to a node.\n     *\n     * @param {Object} initialNode\n     * @returns {Object}\n     */\n    getNodeContext: function (initialNode) {\n        var node = initialNode;\n        var $nodes = this._findAssociatedDOMNodes(node);\n        while (!$nodes.length && node.parent) {\n            var index = node.parent.children.indexOf(node);\n            for (index; index > 0; index--) {\n                $nodes = this._findAssociatedDOMNodes(node.parent.children[index]);\n                if ($nodes.length) {\n                    break;\n                }\n            }\n            if (!$nodes.length) {\n                node = node.parent;\n            }\n        }\n        if (!$nodes.length) {\n            $nodes = this.$content.find('*[data-oe-xpath]');\n        }\n\n        return $nodes.data('oe-context');\n    },\n    /**\n     * Highlight (shows a red arrow on) a DOM node.\n     *\n     * @param {Object} node\n     */\n    highlight: function (node) {\n        if (!this.$highlight) {\n            // an arrow that helps understanding which DOM element is being edited\n            this.$highlight = $('<span class=\"o_web_studio_report_highlight\"/>');\n            this.$content.find('body').prepend(this.$highlight);\n        }\n\n        if (this.$targetHighlight.data('node') !== this.selectedNode) {\n            // do not remove the highlight on the clicked node\n            this.$targetHighlight.removeClass('o_web_studio_report_selected');\n        }\n\n        var $nodes = this._findAssociatedDOMNodes(node);\n        if ($nodes && $nodes.length) {\n            this.$targetHighlight = $nodes.addClass('o_web_studio_report_selected');\n            var position = this.$targetHighlight.offset();\n            this.$highlight\n                .css({\n                    top: position.top + 'px',\n                    left: position.left + 'px',\n                    bottom: position.top < 50 ? '0' : 'auto',\n                })\n                .toggleClass('o_web_studio_report_highlight_left', position.left < 50)\n                .toggleClass('o_web_studio_report_highlight_top', position.top < 50)\n                .show();\n        } else {\n            this.$highlight.hide();\n        }\n    },\n    /**\n     * Selects the given node if it's not already selected and deselects\n     * previously selected one.\n     *\n     * @private\n     * @param {Object} node\n     */\n    selectNode: function (node) {\n        if (this.selectedNode) {\n            if (this.selectedNode === node) {\n                return;\n            }\n            var $oldSelectedNodes = this._findAssociatedDOMNodes(this.selectedNode);\n            $oldSelectedNodes.removeClass('o_web_studio_report_selected');\n        }\n\n        this.selectedNode = node;\n        var $nodesToHighlight = this._findAssociatedDOMNodes(this.selectedNode);\n        $nodesToHighlight.addClass('o_web_studio_report_selected');\n    },\n    /**\n     * @override\n     */\n    unselectedElements: function () {\n        var $nodes = this._findAssociatedDOMNodes(this.selectedNode);\n        $nodes.removeClass('o_web_studio_report_selected');\n        this.selectedNode = null;\n    },\n    /**\n     * Update the iframe content with a new HTML description.\n     *\n     * @param {Object} nodesArchs\n     * @param {String} reportHTML\n     * @returns {Promise}\n     */\n    update: function (nodesArchs, reportHTML) {\n        var self = this;\n        this.nodesArchs = nodesArchs;\n        this.reportHTML = reportHTML;\n\n        this.$dropZone = $();\n\n        return this._updateContent().then(function () {\n            if (self.selectedNode) {\n                var $nodes = self._findAssociatedDOMNodes(self.selectedNode);\n                if ($nodes.length) {\n                    $nodes.first().click();\n                } else {\n                    self.selectedNode = null;\n                    self.trigger_up('sidebar_tab_changed', {\n                        mode: 'new',\n                    });\n                }\n            }\n        });\n    },\n\n    //--------------------------------------------------------------------------\n    // Private\n    //--------------------------------------------------------------------------\n\n    /**\n     * Clean displayed hooks and reset colspan on modified nodes.\n     *\n     * @private\n     */\n    _cleanHooks: function () {\n        if (this.isDragging) {\n            return;\n        }\n\n        this.$dropZone.filter('th, td').each(function () {\n            var $node = $(this).data('oe-node');\n            if ($node) {\n                var colspan = $node.data('colspan');\n                if (colspan) {\n                    $node.attr('colspan', colspan);\n                }\n            }\n        });\n        this.$content.find('.o_web_studio_hook').remove();\n        this.$content.find('.o_web_studio_structure_hook').remove();\n\n        this._setNoContentHelper();\n    },\n    /**\n     * Create hook on target and compute its size.\n     *\n     * @private\n     * @param {jQuery} $node report dom node that should be hooked onto\n     * @param {Object} sidebar component currently being dragged\n     */\n    _createHookOnNodeAndChildren: function ($node, component) {\n        var $hook = this._createHook($node, component);\n        var $newHook = $hook.clone();\n        var $children = $node.children()\n            .not('.o_web_studio_hook,p:not([data-oe-id])')\n\n        // display the hook with max height of this sibling\n        if ($children.length === 1 && $children.is('td[colspan=\"99\"]')) {\n            return;\n        }\n        if ($children.length) {\n            if (component.hookAutoHeight) {\n                var height = Math.max.apply(Math, $children.map(function () { return $(this).height(); }));\n                $newHook.data('height', height + 'px');\n                $newHook.css('height', height + 'px');\n            }\n            $newHook.data('oe-node', $children.first()).data('oe-position', 'before');\n            $children.first().before($newHook);\n\n            $children.each(\n                /* allows to drop besides each children */\n                function (_, childNode) {\n                    var $childNode = $(childNode);\n                    var $newHook = $hook.clone().data('oe-node', $childNode).data('oe-position', 'after');\n                    if (component.hookAutoHeight) {\n                        $newHook.data('height', height + 'px');\n                        $newHook.css('height', height + 'px');\n                    }\n                    $childNode.after($newHook);\n                });\n        } else if ($node.text() &&\n                    $node[0].tagName.toLowerCase() !== 'th' &&\n                    $node[0].tagName.toLowerCase() !== 'td') {\n                    // in tables, we cannot add span hooks else it breaks the layout\n            if (component.hookAutoHeight) {\n                $newHook.data('height', $node.height() + 'px');\n                $newHook.css('height', $node.height() + 'px');\n            }\n            $node.before($newHook.clone().data('oe-node', $node).data('oe-position', 'before'));\n            $node.after($newHook.clone().data('oe-node', $node).data('oe-position', 'after'));\n        }\n        else {\n            $newHook.data('oe-node', $node).data('oe-position', 'inside');\n            $node.append($newHook);\n        }\n    },\n    _computeNearestHookAndShowIt: function () {\n        var self = this;\n        this.dropPosition = [];\n        var dropZone = this.$dropZone.get();\n        dropZone.reverse();\n        _.each(dropZone, function (node) {\n            var box = node.getBoundingClientRect();\n            box.el = node;\n            box.centerY = (box.top + box.bottom) / 2;\n            box.centerX = (box.left + box.right) / 2;\n            self.dropPosition.push(box);\n        });\n    },\n    /**\n     * Recursively parses the DOM of the report and add the `data` and `attributes` on every DOM nodes,\n     * according to the qWeb template that generated the report.\n     *\n     * After this function, every node in the DOM and in memory will have access to their context\n     *\n     * @private\n     */\n    _connectNodes: function () {\n        var self = this;\n        var nodesNotInView = [];\n\n        function connectNodes(node) {\n            if (!node.attrs) {\n                return;\n            }\n            var $nodes = self._findAssociatedDOMNodes(node);\n            $nodes.data('node', node);\n            node.$nodes = $nodes;\n            if ($nodes.length) {\n                node.context = $nodes.data('oe-context');\n            } else {\n                nodesNotInView.push(node);\n            }\n\n            _.each(node.attrs, function (value, key) {\n                if ($nodes.attr(key) === undefined) {\n                    $nodes.attr(key, value);\n                }\n            });\n            _.each(node.children, connectNodes);\n        }\n        _.each(this.nodesArchs, connectNodes);\n\n\n        function connectContextOrder(dom, contextOrder) {\n            var $node = $(dom);\n            var newOrder = contextOrder.slice();\n            var node = $node.data('node');\n\n            if (node) {\n                if (node.contextOrder) {\n                    return node.contextOrder;\n                }\n                newOrder = node.contextOrder = _.uniq(contextOrder.concat(_.keys(node.context)));\n            }\n\n            var children = $node.children().get();\n            for (var k = 0; k < children.length; k++) {\n                newOrder = connectContextOrder(children[k], newOrder);\n            }\n            return newOrder;\n        }\n\n        var children = this.$content.children().get();\n        for (var k = 0; k < children.length; k++) {\n            connectContextOrder(children[k], []);\n        }\n\n        var bodyContext = this.$content.find('html').data('oe-context');\n        _.each(nodesNotInView, function (node) {\n            node.context = node.parent && node.parent.context || bodyContext;\n        });\n    },\n    /**\n     * @private\n     * @param {jQuery} $target\n     * @param {Component} component\n     * @returns {jQuery}\n     */\n    _createHook: function ($target, component) {\n        var firstChild = $target.children().get(0);\n        var hookTag = ((firstChild && firstChild.tagName) || 'div').toLocaleLowerCase();\n        if (!$target.is('tr') && component.hookTag) {\n            hookTag = component.hookTag;\n        }\n        if (hookTag === 'table') {\n            hookTag = 'div';\n        }\n        var $hook = $('<' + hookTag + ' class=\"o_web_studio_hook\"/>');\n        if ($target.hasClass('row')) {\n            $hook.addClass('col-3');\n        }\n        if (component.hookClass) {\n            $hook.addClass(component.hookClass);\n        }\n        return $hook;\n    },\n    /**\n     * finds all the DOM nodes that share the same context as the node in parameter.\n     * Example, all the cells of the same column are sharing the same context: they come from the same report template.\n     *\n     * @private\n     * @param {Object} node qWeb node\n     * @returns {jQuery} associated DOM nodes\n     */\n    _findAssociatedDOMNodes: function (node) {\n        if (node) {\n            return this.$content.find('[data-oe-id=\"' + node.attrs['data-oe-id'] + '\"][data-oe-xpath=\"' + node.attrs['data-oe-xpath'] + '\"]');\n        } else {\n            return $();\n        }\n    },\n    /**\n     * takes the content of the report preview (in the iframe) to\n     * - adds all the node meta-data\n     * - ensure its size is correct\n     * - add meta-data about colspan to make the drag&drop easier\n     * @private\n     */\n    _processReportPreviewContent: function () {\n        this.$content = this.$('iframe').contents();\n        this.$content.off('click').on('click', this._onContentClick.bind(this));\n        this._connectNodes();\n        this.$('.o_web_studio_loader').hide();\n        this._resizeIframe();\n\n        // association for td and colspan\n        this.$content.find('tr').each(function () {\n            var $tr = $(this);\n            var $tds = $tr.children();\n            var lineMax = 0;\n            $tds.each(function () {\n                var $td = $(this);\n                var colspan = +$td.attr('colspan');\n                $td.data('colspan', colspan || 1);\n                $td.data('td-position-before', lineMax);\n                lineMax += colspan || 1;\n                $td.data('td-position-after', lineMax);\n            });\n        });\n\n        this._setNoContentHelper();\n    },\n    /**\n     * @private\n     */\n    _resizeIframe: function () {\n        var self = this;\n        // zoom content from 96 (default browser DPI) to paperformat DPI\n        var zoom = 96 / this.paperFormat.dpi;\n        self.$content.find('main:first').children().each(function () {\n            // scale each section to fit DPI\n            var sectionZoom = zoom;\n            if (!self.paperFormat.disable_shrinking) {\n                // check if needs shrinking to fit page (wkhtmltopdf enable-smart-shrinking)\n                // only applies if option is not manually disabled on the paperformat (see 'disable_shrinking')\n                sectionZoom = Math.min(zoom, $(this).width() / this.scrollWidth);\n            }\n            $(this).css({zoom: sectionZoom});\n        });\n        // WHY --> so that after the load of the iframe, if there are images,\n        // the iframe height is recomputed to the height of the content images included\n        self.$iframe[0].style.height = self.$iframe[0].contentWindow.document.body.scrollHeight + 'px';\n\n        // TODO: it seems that the paperformat doesn't exactly do that\n        // this.$content.find('.header').css({\n        //     'margin-bottom': (this.paperFormat.header_spacing || 0) + 'mm',\n        // });\n        // TODO: won't be pretty if the content is larger than the format\n        this.$content.find('.footer').css({\n            'position': 'fixed',\n            'bottom': '0',\n            'width': this.$content.find('.page').css('width'),\n        });\n\n        this.$content.find('html')[0].style.overflow = 'hidden';\n\n        // set the size of the iframe\n        $(this.$content).find(\"img\").on(\"load\", function () {\n            self.$iframe[0].style.height = self.$iframe[0].contentWindow.document.body.scrollHeight + 'px';\n        });\n    },\n    /**\n     * @private\n     */\n    _setNoContentHelper: function () {\n        var $page = this.$content.find('div.page');\n        if ($page.length && !$page.children().length) {\n            this.$noContentHelper = $('<div/>', {\n                class: 'o_no_content_helper',\n                text: _t('Drag building block here'),\n            });\n            $page.append(this.$noContentHelper);\n        }\n    },\n    /**\n     * Update the iframe content.\n     *\n     * @private\n     * @returns {Promise}\n     */\n    _updateContent: function () {\n        var self = this;\n        this.$content = this.$iframe.contents();\n        var reportHTML = this.reportHTML;\n\n        var $main = this.$content.find('main:first');\n        if ($main.length) {\n            $main.replaceWith($(reportHTML).find('main:first'));\n            this._processReportPreviewContent();\n            return Promise.resolve();\n        }\n\n        return new Promise(function (resolve, reject) {\n            window.top[self._onUpdateContentId] = function () {\n                if (!self.$('iframe')[0].contentWindow) {\n                    return reject();\n                }\n                self._processReportPreviewContent();\n                self.trigger_up('iframe_ready');\n                resolve();\n            };\n            if (reportHTML.error) {\n                self.displayNotification({\n                    message: _.str.sprintf(\n                        _t('This report could not be previewed or edited because it could not be rendered with this message: %s. This could be happening because this is a custom report type that needs custom data to be rendered and so is not editable by studio.'),\n                        reportHTML.message\n                    ), type: 'danger' });\n            } else {\n                // determine when the body has been inserted\n                reportHTML = reportHTML.replace(\n                    '</body>',\n                    '<script>window.top.' + self._onUpdateContentId + '()</script></body>'\n                );\n            }\n\n            // inject HTML\n            var cwindow = self.$iframe[0].contentWindow;\n            cwindow.document\n                .open(\"text/html\", \"replace\")\n                .write(reportHTML);\n        });\n    },\n    //--------------------------------------------------------------------------\n    // Handlers\n    //--------------------------------------------------------------------------\n\n    /**\n     * @private\n     */\n    _onClick: function () {\n        this.trigger_up('editor_clicked');\n    },\n    /**\n     * @private\n     * @param {Event} e\n     */\n    _onContentClick: function (e) {\n        e.preventDefault();\n        e.stopPropagation();\n\n        if ($(e.target).hasClass('o_no_content_helper')) {\n            return;\n        }\n\n        var $node = $(e.target).closest('[data-oe-xpath]');\n        if ($node.closest('[t-field], [t-esc]').length) {\n            $node = $node.closest('[t-field], [t-esc]');\n        }\n        this.selectNode($node.data('node'));\n        this.trigger_up('node_clicked', {\n            node: this.selectedNode,\n        });\n    },\n});\n\nreturn ReportEditor;\n\n});\n", "odoo.define('web_studio.report_fields', function (require) {\n\"use strict\";\n\nvar fieldRegistry = require('web.field_registry');\nvar relationalFields = require('web.relational_fields');\n\n/**\n * This widget is used only for rendering by the report editor (the widget options)\n *\n */\n\n\nvar FieldMany2ManySelection = relationalFields.FieldMany2ManyTags.extend({\n    init: function (parent, name, record, options) {\n        this._super.apply(this, arguments);\n\n        options.quick_create = false;\n        options.can_create = false;\n\n        this.selection = _.map(options.attrs.selection, function (s) {\n            return {id: s.field_name, res_id: s.field_name, data: {id: s.field_name, display_name: s.label}};\n        });\n    },\n    //--------------------------------------------------------------------------\n    // Private\n    //--------------------------------------------------------------------------\n\n    /**\n     * @override\n     * @private\n     * @param {Moment|false} value\n     * @returns {boolean}\n     */\n    _isSameValue: function (value) {\n        if (value === false) {\n            return this.value === false;\n        }\n        return value.length === this.value.res_ids.length &&\n            _.difference(value, this.value.res_ids).length === 0;\n    },\n    /**\n     * Defines an _search method for the internal m2o.\n     *\n     * @private\n     * @param {string} search_val\n     * @returns {Object[]}\n     */\n    _many2oneSearch: function (search_val) {\n        var self = this;\n        var records = _.filter(_.pluck(this.selection, 'data'), function (r) {\n            return r.display_name.indexOf(search_val) !== -1 &&\n               !_.findWhere(self.value.data, {id: r.id});\n        });\n        return _.map(records, function (r) {\n            return {\n                id: r.id,\n                label: r.display_name,\n                name: r.display_name,\n                value: r.display_name,\n            };\n        });\n    },\n    /**\n     *\n     * @overwrite\n     */\n    _render: function () {\n        var self = this;\n        var res_ids = this.value.res_ids;\n        this.value.data = _.filter(this.selection, function (s) {\n            return res_ids.indexOf(s.id) !== -1;\n        });\n        return this._super.apply(this, arguments).then(function () {\n            if (self.many2one) {\n                self.many2one._autocompleteSources = [];\n                self.many2one._addAutocompleteSource(self._many2oneSearch.bind(self), {});\n                self.many2one.limit = Object.keys(self.selection).length;\n            }\n        });\n    },\n    /**\n     *\n     * @overwrite\n     */\n    _setValue: function (value, options) {\n        var self = this;\n        var selection = this.value.res_ids;\n\n        return new Promise(function (resolve, reject) {\n            switch (value.operation) {\n                case \"ADD_M2M\":\n                    selection = selection.concat([value.ids.id]);\n                    break;\n                case \"FORGET\":\n                    selection = _.difference(selection, value.ids);\n                    break;\n                default: throw Error('Not implemented');\n            }\n\n            if (!(options && options.forceChange) && self._isSameValue(selection)) {\n                return Promise.resolve();\n            }\n\n            self.value.res_ids = selection;\n            self._render();\n\n            self.trigger_up('field_changed', {\n                dataPointID: self.dataPointID,\n                changes: _.object([self.name], [{\n                    operation: 'REPLACE_WITH',\n                    ids: selection,\n                }]),\n                viewType: self.viewType,\n                doNotSetDirty: options && options.doNotSetDirty,\n                notifyChange: !options || options.notifyChange !== false,\n                onSuccess: resolve,\n                onFailure: reject,\n            });\n        });\n    },\n});\n\nfieldRegistry.add('many2many_select', FieldMany2ManySelection);\n\nreturn {\n    FieldMany2ManySelection: FieldMany2ManySelection,\n};\n\n});\n\n", "odoo.define('web_studio.ReportEditorManager', function (require) {\n\"use strict\";\n\nvar Dialog = require('web.Dialog');\nvar Pager = require('web.Pager');\nvar utils = require('web.utils');\nvar core = require('web.core');\nvar session = require('web.session');\n\nvar ReportEditorSidebar = require('web_studio.ReportEditorSidebar');\nvar ReportEditor = require('web_studio.ReportEditor');\nvar AbstractEditorManager = require('web_studio.AbstractEditorManager');\nconst { ComponentWrapper, WidgetAdapterMixin } = require('web.OwlCompatibility');\n\nvar qweb = core.qweb;\nvar _t = core._t;\n\nvar ReportEditorManager = AbstractEditorManager.extend(WidgetAdapterMixin, {\n    className: AbstractEditorManager.prototype.className + ' o_web_studio_report_editor_manager',\n    custom_events: _.extend({}, AbstractEditorManager.prototype.custom_events, {\n        editor_clicked: '_onEditorClick',\n        hover_editor: '_onHighlightPreview',\n        node_expanded: '_onNodeExpanded',\n        drop_component: '_onDropComponent',\n        begin_drag_component: '_onBeginDragComponent',\n        element_removed: '_onElementRemoved',\n        iframe_ready: '_onIframeReady',\n        begin_preview_drag_component: '_onBeginPreviewDragComponent',\n        end_preview_drag_component: '_onEndPreviewDragComponent',\n    }),\n    events: _.extend({}, AbstractEditorManager.prototype.events, {\n        'click .o_web_studio_report_print': '_onPrintReport',\n    }),\n    /**\n     * @override\n     * @param {Object} params\n     * @param {Object} params.env - environment (model and ids)\n     * @param {Object} params.models\n     * @param {Object} params.report\n     * @param {Object} params.reportHTML\n     * @param {Object} params.reportMainViewID\n     * @param {Object} params.reportViews\n     * @param {Object} [params.initialState]\n     * @param {string} [params.initialState.sidebarMode] among ['add', 'report']\n     * @param {Object} [params.paperFormat]\n     * @param {Object} [params.widgetsOptions]\n     */\n    init: function (parent, params) {\n        this._super.apply(this, arguments);\n\n        this.view_id = params.reportMainViewID;\n\n        this.env = params.env;\n        this.models = params.models;\n        this.report = params.report;\n        this.reportHTML = params.reportHTML;\n        this.reportName = this.report.report_name;\n        this.reportViews = params.reportViews;\n\n        this.initialState = params.initialState || {};\n        this.paperFormat = params.paperFormat;\n        this.widgetsOptions = params.widgetsOptions;\n\n        this.editorIframeResolved = false;\n        var self = this;\n        this.editorIframeDef = new Promise(function (resolve, reject) {\n            self._resolveEditorIframeDef = resolve;\n        }).then(function () {\n            self.editorIframeResolved = true;\n        });\n        const currentMinimum = 1;\n        const size = this.env.ids.length;\n        const limit = 1;\n        this.withPager = size > 1;\n        if (this.withPager) {\n            // only display the pager if useful\n            this.pager = new ComponentWrapper(this, Pager, {\n                currentMinimum,\n                limit,\n                size,\n                onPagerChanged: this._onPagerChanged.bind(this),\n            });\n        }\n    },\n    /**\n     * @override\n     */\n    start: async function () {\n        const promises = [this._super(...arguments)];\n        if (this.withPager) {\n            const pagerPromise = this.pager.mount(document.createDocumentFragment());\n            promises.push(pagerPromise);\n        }\n        await Promise.all(promises);\n        this._renderActionsSection();\n        this._setPaperFormat();\n    },\n    /**\n     * @override\n     */\n    destroy: function () {\n        WidgetAdapterMixin.destroy.apply(this, arguments);\n        return this._super.apply(this, arguments);\n    },\n    /**\n     * @override\n     */\n    on_attach_callback: function () {\n        this._super.apply(this, arguments);\n        WidgetAdapterMixin.on_attach_callback.apply(this, arguments);\n    },\n    /**\n     * @override\n     */\n    on_detach_callback: function () {\n        this._super.apply(this, arguments);\n        WidgetAdapterMixin.on_detach_callback.apply(this, arguments);\n    },\n\n    //--------------------------------------------------------------------------\n    // Public\n    //--------------------------------------------------------------------------\n\n    /**\n     * @override\n     */\n    updateEditor: function () {\n        var nodesArchs = this._computeView(this.reportViews);\n        return this.view.update(nodesArchs, this.reportHTML);\n    },\n\n    //--------------------------------------------------------------------------\n    // Private\n    //--------------------------------------------------------------------------\n\n    /**\n     * @override\n     */\n    _applyChangeHandling: function (result, opID, from_xml) {\n        var self = this;\n\n        if (result.report_html.error) {\n            // the operation can't be applied\n            var error = result.report_html.message\n                .replace(/&/g, \"&amp;\")\n                .replace(/</g, \"&lt;\")\n                .replace(/>/g, \"&gt;\")\n                .replace(/\"/g, \"&quot;\")\n                .replace(/'/g, \"&#039;\");\n            var msg = '<pre>' + error + '</pre>';\n            this.displayNotification({ title: _t(\"Error when compiling AST\"), message: msg, sticky: true, type: 'danger' });\n            return this._undo(opID, true).then(function () {\n                return Promise.reject();\n            });\n        }\n\n        // TODO: what should we do with result? Maybe update the studio_view_id\n        // if one has been created?\n        if (!from_xml) {\n            // reset studio_arch as it was before the changes for applying\n            // the next operations\n            _.each(result.views, function (view) {\n                if (view.studio_view_id) {\n                    view.studio_arch = self.reportViews[view.view_id].studio_arch;\n                }\n            });\n        }\n        this.reportViews = result.views;\n        this.reportHTML = result.report_html;\n\n        return this.updateEditor();\n    },\n    /**\n     * @private\n     * @param {Object} views\n     * @returns {Object}\n     */\n    _computeView: function (views) {\n        // TODO: find a better name\n        var nodesArchs = _.mapObject(views, function (view, id) {\n            var doc = $.parseXML(view.arch).documentElement;\n            // first element child because we don't want <template> node\n            if (!doc.hasAttribute('t-name')) {\n                doc = doc.firstElementChild;\n            }\n            var node = utils.xml_to_json(doc, true);\n            node.id = +id;\n            node.key = view.key;\n            return node;\n        });\n\n        this._setParentKey(nodesArchs);\n\n        return nodesArchs;\n    },\n    /**\n     * @override\n     */\n    _editView: function (view_id, studio_view_arch, operations) {\n        core.bus.trigger('clear_cache');\n        return this._rpc({\n            route: '/web_studio/edit_report_view',\n            params: {\n                record_id: this.env.currentId,\n                report_name: this.reportName,\n                report_views: this.reportViews,\n                operations: operations,\n                context: session.user_context,\n            },\n        });\n    },\n    /**\n     * @override\n     */\n    _editViewArch: function (view_id, view_arch) {\n        core.bus.trigger('clear_cache');\n        return this._rpc({\n            route: '/web_studio/edit_report_view_arch',\n            params: {\n                record_id: this.env.currentId,\n                report_name: this.reportName,\n                view_id: view_id,\n                view_arch: view_arch,\n                context: session.user_context,\n            },\n        });\n    },\n    /**\n     * @private\n     * @param {Object} node\n     * @returns {Object} first lonely node\n     */\n    _getNodeToDelete: function (node) {\n        var result = node;\n        while (\n            result.parent &&\n            result.parent.children.length === 1 &&  // last child\n            result.attrs['data-oe-id'] === result.parent.attrs['data-oe-id'] &&  // same view\n            (!result.attrs.class || result.attrs.class.indexOf('page') !== -1)  // cannot delete .page\n        ) {\n            result = result.parent;\n        }\n        return result;\n    },\n    /**\n     * @private\n     * @returns {Promise<Object>}\n     */\n    _getReportViews: function () {\n        return this._rpc({\n            route: '/web_studio/get_report_views',\n            params: {\n                record_id: this.env.currentId,\n                report_name: this.reportName,\n                context: session.user_context,\n            },\n        });\n    },\n    /**\n     * @override\n     */\n    _instantiateEditor: function () {\n        var nodesArchs = this._computeView(this.reportViews);\n        this.view = new ReportEditor(this, {\n            nodesArchs: nodesArchs,\n            paperFormat: this.paperFormat,\n            reportHTML: this.reportHTML,\n        });\n        return Promise.resolve(this.view);\n    },\n    /**\n     * @override\n     */\n    _instantiateSidebar: function (state, previousState) {\n        state = _.defaults(state || {}, {\n            mode: this.initialState.sidebarMode || 'new',\n        });\n        return new ReportEditorSidebar(this, {\n            report: this.report,\n            widgetsOptions: this.widgetsOptions,\n            models: this.models,\n            state: state,\n            previousState: previousState,\n            paperFormat: this.paperFormat,\n        });\n    },\n    /**\n     * This section contains the 'Print' button and the pager.\n     *\n     * @private\n     */\n    _renderActionsSection: async function () {\n        const actionsSection = Object.assign(document.createElement('div'), {\n            className: 'o_web_studio_report_actions',\n            innerHTML: qweb.render('web_studio.PrintSection'),\n        });\n        this.el.appendChild(actionsSection);\n\n        if (this.withPager) {\n            const pagerContainer = Object.assign(document.createElement('div'), {\n                className: 'o_web_studio_report_pager',\n            });\n            pagerContainer.appendChild(this.pager.el);\n            actionsSection.append(pagerContainer);\n        }\n    },\n    /**\n     * @private\n     * @param {Object} nodesArchs\n     */\n    _setParentKey: function (nodesArchs) {\n        function setParent(node, parent) {\n            if (_.isObject(node)) {\n                node.parent = parent;\n                _.each(node.children, function (child) {\n                    setParent(child, node);\n                });\n            }\n        }\n        _.each(nodesArchs, function (node) {\n            setParent(node, null);\n        });\n    },\n    /**\n     * @private\n     */\n    _setPaperFormat: function () {\n        var format = this.paperFormat || {};\n\n        var $container = this.$('.o_web_studio_report_iframe_container');\n        $container.css({\n            'padding-top': Math.max(0, (format.margin_top || 0) - (format.header_spacing || 0)) + 'mm',\n            'padding-left': (format.margin_left || 0) + 'mm',\n            'padding-right': (format.margin_right || 0) + 'mm',\n            // note: default width/height comes from default A4 size\n            'width': (format.print_page_width || 210) + 'mm',\n            // avoid a scroll bar with a fixed height\n            'min-height': (format.print_page_height || 297) + 'mm',\n        });\n\n        this.$('.o_web_studio_report_iframe').css({\n            // to remove\n            'min-height': (format.print_page_height || 297) + 'mm',\n            // 'max-height': document.body.scrollHeight + 'px',\n        });\n    },\n\n    //--------------------------------------------------------------------------\n    // Handlers\n    //--------------------------------------------------------------------------\n\n    /**\n     * @private\n     * @param {OdooEvent} ev\n     */\n    _onBeginDragComponent: function (ev) {\n        this.view.beginDragComponent(ev.data.widget);\n    },\n    /**\n     * @private\n     * @param {OdooEvent} ev\n     */\n    _onBeginPreviewDragComponent: function (ev) {\n        this.view.beginPreviewDragComponent(ev.data.widget);\n    },\n    /**\n     * @override\n     */\n    _onDragComponent: function (ev) {\n        var position = ev.data.position;\n        this.view.dragComponent(ev.data.widget, position.pageX, position.pageY);\n    },\n    /**\n     * @private\n     * @param {OdooEvent} ev\n     */\n    _onDropComponent: function (ev) {\n        this.view.dropComponent(ev.data.widget);\n    },\n    /**\n     * @private\n     */\n    _onEditorClick: function () {\n        this.view.unselectedElements();\n    },\n    /**\n     * @private\n     * @param {OdooEvent} ev\n     */\n    _onElementRemoved: function (ev) {\n        var self = this;\n        var node = this._getNodeToDelete(ev.data.node);\n        var message = _.str.sprintf(_t('Are you sure you want to remove this %s from the view?'), node.tag);\n\n        Dialog.confirm(this, message, {\n            confirm_callback: function () {\n                self.trigger_up('view_change', {\n                    node: node,\n                    operation: {\n                        type: 'remove',\n                        structure: 'remove',\n                    },\n                });\n            },\n        });\n    },\n        /**\n     * @private\n     * @param {OdooEvent} ev\n     */\n    _onEndPreviewDragComponent: function (ev) {\n        this.view.endPreviewDragComponent(ev.data.widget);\n    },\n    /**\n     * @private\n     * @param {OdooEvent} ev\n     */\n    _onHighlightPreview: function (ev) {\n        this.view.highlight(ev.data.node);\n    },\n    /**\n     * @private\n     * @param {OdooEvent} ev\n     */\n    _onNodeExpanded: function (ev) {\n        this.view.selectNode(ev.data.node);\n    },\n    /**\n     * @private\n     */\n    _onIframeReady: function () {\n        this._resolveEditorIframeDef();\n    },\n    /**\n     * @override\n     */\n    _onNodeClicked: function (ev) {\n        var node = ev.data.node;\n\n        if (node) {\n            var currentNode = node;\n            var sidebarNodes = [];\n            while (currentNode) {\n                sidebarNodes.push({\n                    node: currentNode,\n                    context: this.view.getNodeContext(currentNode),\n                });\n                currentNode = currentNode.parent;\n            }\n            this.sidebar.state = {\n                mode: 'properties',\n                nodes: sidebarNodes,\n            };\n        } else {\n            this.sidebar.state = {\n                mode: 'new',\n            };\n        }\n        // TODO: this should probably not be done like that (setting state on\n        // sidebar) but pass paramaters to _updateSidebar instead.\n        this._updateSidebar();\n    },\n    /**\n     * @private\n     */\n    _onPagerChanged: async function ({ currentMinimum, limit }) {\n        this._cleanOperationsStack();\n        this.env.currentId = this.env.ids[currentMinimum - 1];\n        // TODO: maybe we should trigger_up and the action should handle\n        // this? But the pager will be reinstantiate and useless RPCs will\n        // be done (see willStart)\n        // OR should we put _getReportViews of report_editor_action here?\n        // But then it should be mocked in tests?\n        const result = await this._getReportViews();\n        this.pager.update({ currentMinimum, limit });\n        this.reportHTML = result.report_html;\n        this.reportViews = result.views;\n        this.updateEditor();\n    },\n    /**\n     * @private\n     */\n    _onPrintReport: function () {\n        var self = this;\n        this._rpc({\n            route: '/web_studio/print_report',\n            params: {\n                record_id: this.env.currentId,\n                report_name: this.reportName,\n                context: session.user_context,\n            },\n        }).then(function (action) {\n            self.do_action(action);\n        });\n    },\n    /**\n     * @override\n     * @param {OdooEvent} ev\n     * @param {Object} ev.data\n     * @param {Object} ev.data.operation the operation sent to the server\n     */\n    _onViewChange: function (ev) {\n        var self = this;\n        var def;\n\n        var node = ev.data.node || ev.data.targets[0].node;\n        var operation = _.extend(ev.data.operation, {\n            view_id: +node.attrs['data-oe-id'],\n            xpath: node.attrs['data-oe-xpath'],\n            context: node.context,\n        });\n\n        if (operation.type === 'add') {\n            def = ev.data.component.add({\n                targets: ev.data.targets,\n            }).then(function (result) {\n                // TODO: maybe modify the operation directly?\n                _.extend(operation, result);\n            });\n        } else {\n            if (node) {\n                this.view.selectedNode = node;\n            } else {\n                console.warn(\"the key 'node' should be present\");\n            }\n        }\n        Promise.resolve(def).then(function () {\n            return self._do(operation);\n        }).guardedCatch(ev.data.fail);\n    },\n});\n\nreturn ReportEditorManager;\n\n});\n", "odoo.define('web_studio.ReportEditorSidebar', function (require) {\n\"use strict\";\n\nvar config = require('web.config');\nvar core = require('web.core');\nvar relational_fields = require('web.relational_fields');\nvar StandaloneFieldManagerMixin = require('web.StandaloneFieldManagerMixin');\nvar utils = require('web.utils');\nvar Widget = require('web.Widget');\n\nvar editComponentsRegistry = require('web_studio.reportEditComponentsRegistry');\nvar newComponentsRegistry = require('web_studio.reportNewComponentsRegistry');\nvar studioUtils = require('web_studio.utils');\n\nvar Many2ManyTags = relational_fields.FieldMany2ManyTags;\nvar Many2One = relational_fields.FieldMany2One;\n\nvar qweb = core.qweb;\nvar _t = core._t;\n\nvar ReportEditorSidebar = Widget.extend(StandaloneFieldManagerMixin, {\n    template: 'web_studio.ReportEditorSidebar',\n    events: {\n        'change input': '_onChangeReport',\n        'click .o_web_studio_sidebar_header > div:not(.inactive)': '_onTab',\n        'click .o_web_studio_xml_editor': '_onXMLEditor',\n        'click .o_web_studio_parameters': '_onParameters',\n        'click .o_web_studio_remove': '_onRemove',\n    },\n    /**\n     * @constructor\n     * @param {Widget} parent\n     * @param {Object} params\n     * @param {Object} [params.models]\n     * @param {Object} [params.paperFormat]\n     * @param {Object} [params.previousState]\n     * @param {Object} [params.report] only mandatory if state.mode = 'report'\n     * @param {Object} [params.state]\n     * @param {Object} [params.widgetsOptions]\n     */\n    init: function (parent, params) {\n        this._super.apply(this, arguments);\n        StandaloneFieldManagerMixin.init.call(this);\n\n        this.debug = config.isDebug();\n        this.report = params.report;\n        this.state = params.state || {};\n        this.paperFormat = params.paperFormat || {};\n        this.previousState = params.previousState || {};\n        this.models = params.models;\n        this.widgetsOptions = params.widgetsOptions;\n    },\n    /**\n     * @override\n     */\n    willStart: function () {\n        var self = this;\n        var defs = [this._super.apply(this, arguments)];\n\n        if (this.state.mode === 'report') {\n            // make record for the many2many groups\n            var defReport = this.model.makeRecord('ir.model.fields', [{\n                name: 'groups_id',\n                fields: [{\n                    name: 'id',\n                    type: 'integer',\n                }, {\n                    name: 'display_name',\n                    type: 'char',\n                }],\n                relation: 'res.groups',\n                type: 'many2many',\n                value: this.report.groups_id,\n            }]).then(function (recordID) {\n                self.groupsHandle = recordID;\n            });\n            // load record for the many2one paperformat\n            var defPaperFormat = this.model.makeRecord('ir.model.fields', [{\n                name: 'paperformat_id',\n                relation: 'report.paperformat',\n                type: 'many2one',\n                value: this.report.paperformat_id,\n            }]).then(function (recordID) {\n                self.paperformatHandle = recordID;\n            });\n            defs.push(defReport);\n            defs.push(defPaperFormat);\n        }\n        return Promise.all(defs);\n    },\n    /**\n     * @override\n     */\n    start: function () {\n        var def;\n        switch (this.state.mode) {\n            case 'report':\n                def = this._startModeReport();\n                break;\n            case 'new':\n                def = this._startModeNew();\n                break;\n            case 'properties':\n                def = this._startModeProperties();\n                break;\n        }\n        return Promise.all([this._super.apply(this, arguments), def]);\n    },\n\n    //--------------------------------------------------------------------------\n    // Public\n    //--------------------------------------------------------------------------\n\n    /**\n     * Gets the state of all the widgets of all the node hierarchy of the\n     * sidebar.\n     *\n     * @returns {Object}\n     */\n    getLocalState: function () {\n        var self = this;\n        var state = {};\n\n        _.each(this.nodes, function (node) {\n            var nodeName = self._computeUniqueNodeName(node.node);\n            state[nodeName] = {};\n            _.each(node.widgets, function (comp) {\n                state[nodeName][comp.name] = comp.getLocalState();\n            });\n        });\n        return state;\n    },\n\n    //--------------------------------------------------------------------------\n    // Private\n    //--------------------------------------------------------------------------\n\n    /**\n     * Given a node, computes a unique name that will be the same between\n     * refresh of the preview.\n     *\n     * @param {Object} node\n     * @returns {string}\n     */\n    _computeUniqueNodeName: function (node) {\n        return node.attrs[\"data-oe-id\"] + node.attrs[\"data-oe-xpath\"].replace(/\\[\\]\\//g, \"_\");\n    },\n    /**\n     * Utility function that will create a fake jQuery node.\n     *\n     * Note that the 'real' DOM node cannot be used as it may not not exist\n     * (e.g. a <t> node which is defined in the arch but has no corresponding\n     * DOM node).\n     *\n     * TODO: if it's too slow, maybe instatiate the parse only once in init.\n     *\n     * @private\n     * @param {Object} node\n     * @returns {jQuery}\n     */\n    _getAssociatedDOMNode: function (node) {\n        var parser = new DOMParser();\n        var xml = utils.json_node_to_xml(node);\n        var xmlDoc = parser.parseFromString(xml, \"text/xml\");\n        var xmlNode = xmlDoc.getElementsByTagName(node.tag)[0];\n        return $(xmlNode);\n    },\n    /**\n     * @private\n     * @param {Object} components\n     * @returns {Object}\n     */\n    _getComponentsObject: function (components) {\n        return _.map(components, function (componentName) {\n            var Component = _.find(editComponentsRegistry.map, function (Component) {\n                return Component.prototype.name === componentName;\n            });\n            return Component;\n        });\n    },\n    /**\n     * @private\n     * @param {Object} components\n     * @returns {string}\n     */\n    _getComponentsBlacklist: function (components) {\n        var blacklist = '';\n        _.each(this._getComponentsObject(components), function (Component) {\n            if (Component.prototype.blacklist) {\n                if (blacklist.length) {\n                    blacklist += ',';\n                }\n                blacklist += Component.prototype.blacklist;\n            }\n        });\n        return blacklist;\n    },\n    /**\n     * @private\n     * @param {Object} node\n     * @returns {string} a attempt of meaningful name for the given node\n     */\n    _getNodeDisplayName: function (node) {\n        var displayName = { name: node.tag, attr: '', icon: '' };\n\n        if (node.attrs) {\n            if (node.attrs.name) {\n                displayName.attr += '(' + node.attrs.name + ')';\n            }\n            if (node.attrs['t-field'] || node.attrs['t-esc']) {\n                displayName.attr += '[' + (node.attrs['t-field'] || node.attrs['t-esc']) + ']';\n            }\n            if (node.attrs['t-call']) {\n                displayName.attr += '[t-call=\"' + node.attrs['t-call'] + '\"]';\n            }\n            if (node.attrs['t-foreach']) {\n                displayName.attr += '[foreach=\"' + node.attrs['t-foreach'] + '\"]';\n            }\n        }\n\n        if (node.key) {\n            displayName.attr += ' - ' + node.key;\n        }\n\n        if (displayName.name === 'div' && node.attrs.class) {\n            displayName.attr += ' ' + node.attrs.class;\n        }\n\n        switch (displayName.name) {\n            case 't':\n                displayName.icon = 'fa-cog';\n                break;\n\n            case 'html':\n            case 'body':\n            case 'main':\n                displayName.icon = 'fa-file';\n                break;\n\n            case 'table':\n                displayName.icon = 'fa-table';\n                break;\n\n            case 'thead':\n            case 'tr':\n            case 'tfoot':\n                displayName.icon = 'fa-ellipsis-h';\n\n                if (node.attrs.hasOwnProperty('t-foreach')) {\n                    displayName.icon = 'fa-retweet text-primary';\n                }\n\n                break;\n\n            case 'tbody':\n                displayName.icon = 'fa-th';\n                break;\n\n            case 'th':\n            case 'td':\n                displayName.icon = 'fa-square-o';\n                break;\n\n            case 'img':\n                displayName.icon = 'fa-picture-o';\n                break;\n\n            case 'div':\n                displayName.icon = 'fa-folder';\n\n                if (!node.attrs.hasOwnProperty('class')) {\n                    break;\n                }\n\n                if (node.attrs.class.indexOf('col-') !== -1) {\n                    displayName.icon = 'fa-columns';\n                } else if (node.attrs.class.indexOf('row') !== -1) {\n                    displayName.icon = 'fa-ellipsis-h';\n                }\n                break;\n\n            case 'address':\n                displayName.icon = 'fa-address-book-o';\n                break;\n\n            case 'h1':\n            case 'h2':\n            case 'h3':\n            case 'h4':\n            case 'h5':\n            case 'h6':\n            case 'p':\n            case 'b':\n            case 'i':\n            case 'span':\n            case 'strong':\n                displayName.icon = 'fa-i-cursor';\n                break;\n        }\n\n        return displayName;\n    },\n    /**\n     * Given a specific node selected (clicked) on the report, get a list of all\n     * the components that are applicable to edit this node.\n     *\n     * This function uses the selector defined on the editable components\n     * themselves to check wether it applies to a node or not\n     *\n     * @private\n     * @param {Object} node\n     * @returns {string[]}\n     */\n    _getNodeEditableComponents: function (node) {\n        var self = this;\n        var components = [];\n\n        var $node = this._getAssociatedDOMNode(node);\n        _.each(editComponentsRegistry.map, function (Component) {\n            var selector = Component.prototype.selector;\n            if (self.debug) {\n                selector = Component.prototype.debugSelector || selector;\n            }\n            if ($node.is(selector)) { // use last because DOM eject t tag in table tag\n                components.push(Component.prototype.name);\n            }\n        });\n\n        _.each(['layout', 'tif', 'groups'], function (componentName) {\n            if (!_.contains(components, componentName)) {\n                components.push(componentName);\n            }\n        });\n        return components;\n    },\n    /**\n     * @private\n     * @returns {Promise}\n     */\n    _startModeNew: function () {\n        var self = this;\n        var defs = [];\n        var $sidebarContent = this.$('.o_web_studio_sidebar_content');\n\n        _.each(newComponentsRegistry.map, function (components, title) {\n            $sidebarContent.append($('<h3>', {\n                html: title,\n            }));\n            var $componentsContainer = $('<div>', {\n                class: 'o_web_studio_field_type_container',\n            });\n            _.each(components, function (Component) {\n                const component = new Component(self, { models: self.models });\n                const reportModel = self.report && self.report.model;\n                // Don't add component if the report model is not compatible with this one\n                // Example: Don't display Subtotal & Total block in other models than\n                // purchase.order, sale.order, account.move\n                if (!reportModel || !component.modelWhitelist.length || component.modelWhitelist.includes(reportModel)){\n                    defs.push(component.appendTo($componentsContainer));\n                }\n            });\n            $sidebarContent.append($componentsContainer);\n        });\n\n        return Promise.all(defs);\n    },\n    /**\n     * A node has been clicked on the report, build the content of the sidebar so this node can be edited\n     *\n     * @private\n     * @returns {Promise}\n     */\n    _startModeProperties: function () {\n        var self = this;\n        var componentsAppendedPromise;\n        var $accordion = this.$('.o_web_studio_sidebar_content .o_web_studio_accordion');\n\n        var blacklists = [];\n        this.nodes = [];\n\n        if (!this.debug) {\n            // hide all nodes after .page, they are too technical\n            var pageNodeIndex = _.findIndex(this.state.nodes, function (node) {\n                return node.node.tag === 'div' && _.str.include(node.node.attrs.class, 'page');\n            });\n            if (pageNodeIndex !== -1) {\n                this.state.nodes.splice(pageNodeIndex + 1, this.state.nodes.length - (pageNodeIndex + 1));\n            }\n        }\n\n        for (var index = this.state.nodes.length - 1; index >= 0; index--) {\n            // copy to not modifying in place the node\n            var node = _.extend({}, this.state.nodes[index]);\n            if (!this.debug && blacklists.length) {\n                if (this._getAssociatedDOMNode(node.node).is(blacklists.join(','))) {\n                    continue;\n                }\n            }\n            var components = this._getNodeEditableComponents(node.node);\n            node.components = components;\n            var blacklist = this._getComponentsBlacklist(components);\n            if (blacklist.length) {\n                blacklists.push(blacklist);\n            }\n            node.widgets = [];\n            this.nodes.unshift(node);\n        }\n        // TODO: do not reverse but put nodes in correct order directly\n        this.nodes.reverse();\n\n        this.nodes.forEach(function (node) {\n            var $accordionSection = $(qweb.render('web_studio.AccordionSection', {\n                id: 'id_' + studioUtils.randomString(6),\n                header: 'header_' + studioUtils.randomString(6),\n                nodeName: self._getNodeDisplayName(node.node).name,\n                nodeAttr: self._getNodeDisplayName(node.node).attr,\n                nodeIcon: self._getNodeDisplayName(node.node).icon,\n                node: node.node,\n            }));\n            var renderingProms = self._getComponentsObject(node.components).map(function (Component) {\n                if (!Component) {\n                    self.displayNotification({ title: \"Missing component\", message: self.state.directive, type: 'danger' });\n                    return;\n                }\n                var previousWidgetState = self.previousState[self._computeUniqueNodeName(node.node)] &&\n                    self.previousState[self._computeUniqueNodeName(node.node)][Component.prototype.name];\n                var directiveWidget = new Component(self, {\n                    widgetsOptions: self.widgetsOptions,\n                    node: node.node,\n                    context: node.context,\n                    state: previousWidgetState,\n                    models: self.models,\n                    componentsList: node.components,\n                });\n                node.widgets.push(directiveWidget);\n                var fragment = document.createDocumentFragment();\n                return directiveWidget.appendTo(fragment);\n            });\n            componentsAppendedPromise = Promise.all(renderingProms).then(function () {\n                for (var i = 0; i < node.widgets.length; i++) {\n                    var widget = node.widgets[i];\n                    var selector = '.collapse' + (i > 0 ? '>div:last()' : '');\n                    widget.$el.appendTo($accordionSection.find(selector));\n                }\n                var $removeButton = $(qweb.render('web_studio.Sidebar.Remove'));\n                $removeButton.data('node', node.node); // see @_onRemove\n                $accordionSection.find('.collapse')\n                    .append($('<hr>'))\n                    .append($removeButton);\n            });\n            $accordionSection.appendTo($accordion);\n            $accordionSection\n                .on('mouseenter', function () {\n                    self.trigger_up('hover_editor', {\n                        node: node.node,\n                    });\n                })\n                .on('click', function () {\n                    self.trigger_up('node_expanded', {\n                        node: node.node,\n                    });\n                })\n                .on('mouseleave', function () {\n                    self.trigger_up('hover_editor', {\n                        node: undefined,\n                    });\n                })\n                .find('.collapse').on('show.bs.collapse hide.bs.collapse', function (ev) {\n                    $(this).parent('.card').toggleClass('o_web_studio_active', ev.type === 'show');\n                });\n        });\n\n        // open the last section\n        // NB: this is the only way with BS4 to open the tab synchronously\n        var $lastCard = $accordion.find('.card:last');\n        $lastCard.addClass('o_web_studio_active');\n        $lastCard.find('.collapse').addClass('show');\n\n        return componentsAppendedPromise;\n    },\n    /**\n     * @private\n     * @returns {Promise}\n     */\n    _startModeReport: function () {\n        var defs = [];\n        var paperFormatRecord = this.model.get(this.paperformatHandle);\n        var many2one = new Many2One(this, 'paperformat_id', paperFormatRecord, {\n            attrs: {\n                placeholder: _t('By default: ') + this.paperFormat.display_name,\n            },\n            mode: 'edit',\n        });\n        this._registerWidget(this.paperformatHandle, 'paperformat_id', many2one);\n        defs.push(many2one.appendTo(this.$('.o_web_studio_paperformat_id')));\n        this.paperformatMany2one = many2one;\n\n        // append many2many for groups_id\n        var groupsRecord = this.model.get(this.groupsHandle);\n        var many2many = new Many2ManyTags(this, 'groups_id', groupsRecord, {\n            mode: 'edit',\n        });\n        this._registerWidget(this.groupsHandle, 'groups_id', many2many);\n        defs.push(many2many.appendTo(this.$('.o_groups')));\n        return Promise.all(defs);\n    },\n\n    //--------------------------------------------------------------------------\n    // Handlers\n    //--------------------------------------------------------------------------\n\n    /**\n     * @private\n     * @param {JQueryEvent} ev\n     */\n    _onChangeReport: function (ev) {\n        var $input = $(ev.currentTarget);\n        var attribute = $input.attr('name');\n        if (attribute) {\n            var newAttrs = {};\n            if ($input.attr('type') === 'checkbox') {\n                newAttrs[attribute] = $input.is(':checked') ? 'True' : '';\n            } else {\n                newAttrs[attribute] = $input.val();\n            }\n            this.trigger_up('studio_edit_report', newAttrs);\n        }\n    },\n    /**\n     * @private\n     * @override\n     * @param {OdooEvent} ev\n     */\n    _onFieldChanged: function (ev) {\n        var self = this;\n        StandaloneFieldManagerMixin._onFieldChanged.apply(this, arguments).then(function () {\n            if (self.state.mode !== 'report') {\n                return;\n            }\n            var newAttrs = {};\n            var fieldName = ev.target.name;\n            var record;\n            if (fieldName === 'groups_id') {\n                record = self.model.get(self.groupsHandle);\n                newAttrs[fieldName] = record.data.groups_id.res_ids;\n            } else if (fieldName === 'paperformat_id') {\n                record = self.model.get(self.paperformatHandle);\n                newAttrs[fieldName] = record.data.paperformat_id && record.data.paperformat_id.res_id;\n            }\n            self.trigger_up('studio_edit_report', newAttrs);\n        });\n    },\n    /**\n     * @private\n     */\n    _onParameters: function () {\n        this.trigger_up('open_record_form_view');\n    },\n    /**\n     * @private\n     * @param {ClickEvent} ev\n     */\n    _onRemove: function (ev) {\n        var node = $(ev.currentTarget).data('node');\n        this.trigger_up('element_removed', {\n            node: node,\n        });\n    },\n    /**\n     * @private\n     * @param {ClickEvent} ev\n     */\n    _onTab: function (ev) {\n        var mode = $(ev.currentTarget).attr('name');\n        if (mode === 'options') {\n            // one cannot manually select options\n            return;\n        }\n        this.trigger_up('sidebar_tab_changed', {\n            mode: mode,\n        });\n    },\n    /**\n     * @private\n     */\n    _onXMLEditor: function () {\n        this.trigger_up('open_xml_editor');\n    },\n});\n\nreturn ReportEditorSidebar;\n\n});\n", "odoo.define('web_studio.AbstractReportComponent', function (require) {\n\"use strict\";\n\nvar Widget = require('web.Widget');\n\nvar AbstractReportComponent = Widget.extend({\n    /**\n     * @override\n     * @param {Widget} parent\n     * @param {Object} params\n     * @param {Object} params.models\n     */\n    init: function (parent, params) {\n        this.models = params.models;\n        this.node = {\n            context: {},\n            contextOrder: [],\n        };\n        this._super.apply(this, arguments);\n    },\n\n    //--------------------------------------------------------------------------\n    // Private\n    //--------------------------------------------------------------------------\n    /**\n     * Given a node of the DOM of the report preview, get the avaiable context of this node\n     * The context is filled in the branding on the node itself. It represents\n     * all the variables available at a moment in the report\n     *\n     * @param {Object} node\n     */\n    _getContextKeys: function (node) {\n        var self = this;\n        var contextOrder = node.contextOrder || [];\n\n        var keys = _.compact(_.map(node.context, function (relation, key) {\n            if (!self.models[relation]) {\n                return {\n                    name: key,\n                    string: key + ' (' + relation + ')',\n                    type: relation,\n                    store: true,\n                    related: true,\n                    searchable: true,\n                    order: -contextOrder.indexOf(key),\n                };\n            }\n            return {\n                name: key,\n                string: key + ' (' + self.models[relation] + ')',\n                relation: relation,\n                type: key[key.length-1] === 's' ? 'one2many' : 'many2one',\n                store: true,\n                related: true,\n                searchable: true,\n                order: -contextOrder.indexOf(key),\n            };\n        }));\n        keys.sort(function (a, b) {\n            return a.order - b.order;\n        });\n        return keys;\n    },\n});\n\nreturn AbstractReportComponent;\n\n});\n", "odoo.define('web_studio.reportEditComponents', function (require) {\n\"use strict\";\n\nvar {ColorpickerDialog} = require('web.Colorpicker');\nvar config = require('web.config');\nvar core = require('web.core');\nvar utils = require('web.utils');\nvar fieldRegistry = require('web.field_registry');\nvar ModelFieldSelector = require('web.ModelFieldSelector');\nvar StandaloneFieldManagerMixin = require('web.StandaloneFieldManagerMixin');\nconst { WidgetAdapterMixin } = require('web.OwlCompatibility');\n\nconst Wysiwyg = require('web_editor.wysiwyg');\n\nvar Abstract = require('web_studio.AbstractReportComponent');\nvar DomainSelectorDialog = require('web.DomainSelectorDialog');\nvar Domain = require(\"web.Domain\");\n\nvar py = window.py; // look py.js\nvar qweb = core.qweb;\n\nvar AbstractEditComponent = Abstract.extend(WidgetAdapterMixin, StandaloneFieldManagerMixin, {\n    events: {\n        'change input': function (e) {\n            e.stopPropagation();\n        },\n    },\n    custom_events: _.extend({}, Abstract.prototype.custom_events, {\n        field_changed: '_onDirectiveChange',\n        field_chain_changed: '_onDirectiveChange',\n    }),\n    /**\n     * @override\n     * @param {Object} params\n     * @param {Object} params.context\n     * @param {Object} params.node\n     * @param {Object} [params.state]\n     * @param {string[]} [params.componentsList] the list of components for the\n     *                                           node\n     */\n    init: function (parent, params) {\n        this._super.apply(this, arguments);\n        StandaloneFieldManagerMixin.init.call(this);\n        this.state = params.state || {};\n        this.node = params.node;\n        this.context = params.context;\n        this.componentsList = params.componentsList;\n        // TODO: check if using a real model with widgets is reasonnable or if\n        // we should use actual html components in QWEB\n        this.directiveFields = {};\n\n        // will be set in the willStart defDirective callback\n        this.directiveRecordId = '';\n\n        // add in init: directive => field selector\n        this.fieldSelector = {};\n\n    },\n    /**\n     * @override\n     */\n    willStart: function () {\n        var self = this;\n\n        var directiveModel = [];\n        _.each(this.directiveFields, function (options, directiveKey) {\n            var value = options.value;\n            if (!value) {\n                value = self.node.attrs[options.attributeName || directiveKey];\n            }\n\n            if (options.type === 'related') {\n                directiveModel.push({\n                    name: directiveKey,\n                    type: 'char',\n                    value: options.freecode ? value : self._splitRelatedValue(value).chain.join('.'),\n                });\n            } else {\n                directiveModel.push(_.extend({}, {\n                    name: directiveKey,\n                    value: value,\n                }, options));\n            }\n        });\n\n        var defDirective = this.model.makeRecord('ir.model.fields', directiveModel)\n            .then(function (recordId) {\n                self.directiveRecordId = recordId;\n\n                _.each(self.directiveFields, function (options, directiveKey) {\n                    if (options.type === 'related') {\n                        self.createFieldSelector(directiveKey, options);\n                    } else {\n                        self.createField(directiveKey, options);\n                    }\n                });\n            });\n        var defParent = this._super.apply(this, arguments);\n        return Promise.all([defDirective, defParent]);\n    },\n    /**\n     * @override\n     */\n    destroy: function () {\n        this._super.apply(this, arguments);\n        WidgetAdapterMixin.destroy.call(this);\n    },\n    /**\n     * Called each time the widget is attached into the DOM.\n     */\n    on_attach_callback: function () {\n        WidgetAdapterMixin.on_attach_callback.call(this);\n    },\n    /**\n     * Called each time the widget is detached from the DOM.\n     */\n    on_detach_callback: function () {\n        WidgetAdapterMixin.on_detach_callback.call(this);\n    },\n\n    //--------------------------------------------------------------------------\n    // Public\n    //--------------------------------------------------------------------------\n\n    /**\n     * Creates a new field (for basic fields, as field registry).\n     *\n     * @param {String} directiveKey unique key\n     * @param {Object} options\n     */\n    createField: function (directiveKey, options) {\n        var directiveRecord = this.model.get(this.directiveRecordId);\n\n        options = _.extend({mode: 'edit', attrs: _.extend({\n            quick_create: false, can_create: false}, options)}, options);\n\n        var field = directiveRecord.fields[directiveKey];\n        const FieldClass = fieldRegistry.getAny([options.Widget, field.type]);\n        this.fieldSelector[directiveKey] = new FieldClass(this, directiveKey, directiveRecord, options);\n    },\n    /**\n     * Creates a new field selector (for related fields).\n     *\n     * @param {String} directiveKey unique key\n     * @param {Object} options\n     */\n    createFieldSelector: function (directiveKey, options) {\n        var directiveRecord = this.model.get(this.directiveRecordId);\n\n        var split = this._splitRelatedValue(directiveRecord.data[directiveKey]);\n\n        if (this.context[split.chain[0]] === 'undefined') {\n            // if we don't know what the variable is, we won't be able to follow\n            // the relations (and fetch the fields) with the FieldSelector\n            console.warn(\"We don't know what \" + split.chain[0] + \" is ...\");\n            return this.createField(directiveKey);\n        }\n\n        if (options.freecode && split.rest) {\n            var InputField = fieldRegistry.get('input');\n            this.fieldSelector[directiveKey] = new InputField(\n                this, directiveKey,\n                directiveRecord,\n                _.extend({mode: 'edit', attrs: options}, options));\n            return;\n        }\n\n        var availableKeys = this._getContextKeys(this.node);\n        if (options.loop) {\n            availableKeys = _.filter(availableKeys, function (relation) {\n                return relation.type === 'one2many' || relation.type === 'many2one';\n            });\n        }\n\n        this.fieldSelector[directiveKey] = new ModelFieldSelector(this, 'record_fake_model', split.chain,\n            _.extend({\n                readonly: options.mode === 'readonly',\n                searchable: false,\n                fields: availableKeys,\n                filters: {searchable: false},\n                filter: options.filter || function () {\n                    return true;\n                },\n                followRelations: options.followRelations || function (field) {\n                    return field.type === 'many2one';\n                },\n            }, options));\n    },\n    /**\n     * To be overriden.\n     */\n    getLocalState: function() {\n    },\n\n    //--------------------------------------------------------------------------\n    // Private\n    //--------------------------------------------------------------------------\n\n    /**\n     * @private\n     * @param {any} value\n     * @returns {Object}\n     */\n    _splitRelatedValue: function (value) {\n        var chain = [];\n        var rest = value || '';\n        if (typeof value === \"string\") {\n            try {\n                value = py.extract(value);\n            } catch {\n                return {\n                    chain: [],\n                    rest: value,\n                };\n            }\n        }\n        if (value) {\n            if (value.isOperator) {\n                if (value.params.values[0].isField) {\n                    chain = value.params.values[0].expr.split('.');\n                    rest = value.expr.slice(chain.length);\n                } else {\n                    rest = value.expr;\n                }\n            }\n            if (value.isCall) {\n                rest = (value.params.object.length ? '.' : '') + value.params.method + '(' + value.params.args.join(', ') + ')';\n                chain = value.params.object;\n            }\n            if (value.isField) {\n                rest = '';\n                chain = value.expr.split('.');\n            }\n        }\n        return {\n            chain: chain,\n            rest: rest,\n        };\n    },\n    /**\n     * @private\n     * @param {Object} newAttrs\n     */\n    _tSetAttributes: function (newAttrs) {\n        var self = this;\n        var node = this.node;\n        var op = [];\n        _.each(newAttrs, function (tvalue, tset) {\n            if (tvalue === self.directiveFields[tset].value) {\n                return;\n            }\n            op.push({\n                content: '<attribute name=\"t-value\">' + tvalue + '</attribute>',\n                position: \"attributes\",\n                view_id: +node.attrs['data-oe-id'],\n                xpath: node.attrs['data-oe-xpath'] + \"//t[@t-set='\" + tset + \"']\"\n            });\n        });\n        if (!op.length) {\n            return;\n        }\n        this.trigger_up('view_change', {\n            node: node,\n            operation: {\n                inheritance: op,\n            },\n        });\n    },\n    /**\n     * @private\n     * @param {String} attributeName\n     * @param {String} toAdd\n     * @param {String} toRemove\n     */\n    _editDomAttribute: function (attributeName, toAdd, toRemove) {\n        var attribute = '<attribute name=\"' + attributeName + '\" separator=\"' + (attributeName === 'class' ? ' ' : ';') + '\"';\n        if (toAdd) {\n            attribute += ' add=\"' + toAdd + '\"';\n        }\n        if (toRemove) {\n            attribute += ' remove=\"' + toRemove + '\"';\n        }\n        attribute += '/>';\n\n        this.trigger_up('view_change', {\n            node: this.node,\n            operation: {\n                inheritance: [{\n                    content: attribute,\n                    position: \"attributes\",\n                    view_id: +this.node.attrs['data-oe-id'],\n                    xpath: this.node.attrs['data-oe-xpath']\n                }],\n            },\n        });\n    },\n    /**\n     * Triggered by a field modification (see @createField and\n     * @createFieldSelector).\n     * To be overriden if the attributes need to be preprocessed.\n     *\n     * @private\n     * @param {Object} newAttrs\n     */\n    _triggerViewChange: function (newAttrs) {\n        this.trigger_up('view_change', {\n            node: this.node,\n            operation: {\n                type: 'attributes',\n                new_attrs: newAttrs,\n            },\n        });\n    },\n\n    //--------------------------------------------------------------------------\n    // Handlers\n    //--------------------------------------------------------------------------\n    /**\n     * @private\n     * @param {OdooEvent} e\n     */\n    _onDirectiveChange: function (e) {\n        var self = this;\n        e.stopPropagation();  // TODO: is it really useful on an OdooEvent\n\n        e.data.dataPointID = this.directiveRecordId;\n\n        var always = function () {\n            var newAttrs = {};\n            _.each(self.fieldSelector, function (fieldType, directiveKey) {\n                var directiveTarget = self.fieldSelector[directiveKey];\n                var target = e.target;\n                if (!e.data.forceChange && target !== directiveTarget) {\n                    return;\n                }\n                var data = self.model.get(self.directiveRecordId).data;\n                var fieldValue = data[directiveKey];\n                // TODO: for relation field, maybe set id (or ids) in fieldValue to\n                // avoid overwritting _triggerViewChange in every directive\n                if (e.data.chain) {\n                    fieldValue = e.data.chain.join('.');\n                }\n                if (fieldValue.res_ids) {\n                    fieldValue = fieldValue.res_ids.slice();\n                }\n                newAttrs[directiveKey] = fieldValue;\n            });\n\n            if (e.data.chain) {\n                e.data.dataPointID = self.directiveRecordId;\n                e.data.changes = newAttrs;\n            }\n\n            self._triggerViewChange(newAttrs);\n        };\n\n        StandaloneFieldManagerMixin._onFieldChanged.call(this, e).then(always, always);\n    },\n});\n\nvar LayoutEditable = AbstractEditComponent.extend({\n    name: 'layout',\n    template : 'web_studio.ReportLayoutEditable',\n    events : _.extend({}, AbstractEditComponent.prototype.events, {\n        \"change .o_web_studio_margin>input\": \"_onMarginInputChange\",\n        \"change .o_web_studio_width>input\": \"_onWidthInputChange\",\n        \"click .o_web_studio_font_size .dropdown-item-text\": \"_onFontSizeChange\",\n        \"change .o_web_studio_table_style > select\": \"_onTableStyleInputChange\",\n        \"click .o_web_studio_text_decoration button\": \"_onTextDecorationChange\",\n        \"click .o_web_studio_text_alignment button\": \"_onTextAlignmentChange\",\n        \"change .o_web_studio_classes>input\": \"_onClassesChange\",\n        \"click .o_web_studio_colors .o_web_studio_reset_color\": \"_onResetColor\",\n        \"click .o_web_studio_colors .o_web_studio_custom_color\": \"_onCustomColor\",\n    }),\n    /**\n     * @override\n     */\n    init: function (parent, params) {\n        this._super.apply(this, arguments);\n\n        this.debug = config.isDebug();\n        this.isTable = params.node.tag === 'table';\n        this.isNodeText = _.contains(this.componentsList, 'text');\n        this.allClasses = params.node.attrs.class || \"\";\n        this.classesArray =(params.node.attrs.class || \"\").split(' ');\n        this.stylesArray =(params.node.attrs.style || \"\").split(';');\n\n        var fontSizeRegExp= new RegExp(/^\\s*(h[123456]{1})|(small)|(display-[1234]{1})\\s*$/gim);\n        var backgroundColorRegExp= new RegExp(/^\\s*background\\-color\\s*:/gi);\n        var colorRegExp= new RegExp(/^\\s*color\\s*:/gi);\n        var widthRegExp= new RegExp(/^\\s*width\\s*:/gi);\n        const colClassRegex = /\\bcol((-(sm|md|lg|xl))?-(\\d{1,2}|auto))?\\b/;\n\n        this[\"margin-top\"] = this._findMarginValue('margin-top');\n        this[\"margin-bottom\"] = this._findMarginValue('margin-bottom');\n        this[\"margin-left\"] = this._findMarginValue('margin-left');\n        this[\"margin-right\"] = this._findMarginValue('margin-right');\n\n        this[\"background-color-class\"] = _.find(this.classesArray, function(item) {\n            return !item.indexOf('bg-');\n        });\n        this[\"font-color-class\"] = _.find(this.classesArray, function(item) {\n            return !item.indexOf('text-');\n        });\n        this.tableStyle = _.find(this.classesArray, function(item) {\n            return !item.indexOf('table-');\n        });\n        this[\"background-color\"] = _.find(this.stylesArray, function(item) {\n            return backgroundColorRegExp.test(item);\n        });\n        this.color = _.find(this.stylesArray, function(item) {\n            return colorRegExp.test(item);\n        });\n        // the width on div.col is set with col-. instead of width style\n        this.displayWidth = !(params.node.tag === 'div' && _.find(this.classesArray, function(item) {\n            return colClassRegex.test(item);\n        }));\n        this.originalWidth =  _.find(this.stylesArray, function(item) {\n            return widthRegExp.test(item);\n        });\n        if (this.originalWidth) {\n            this.width = this.originalWidth.replace(/\\D+/g,''); //replaces all non-digits with nothing\n        }\n\n        this.fontSize = _.find(this.classesArray, function(item) {\n            return fontSizeRegExp.test(item);\n        });\n\n        this.italic = _.contains(this.classesArray, 'o_italic');\n        this.bold =_.contains(this.classesArray, 'o_bold');\n        this.underline = _.contains(this.classesArray, 'o_underline');\n\n        this.alignment = _.intersection(this.classesArray, ['text-start', 'text-center', 'text-end'])[0];\n        this.displayAlignment = !_.contains(['inline', 'float'], this.node.$nodes.css('display'));\n\n        this.allClasses = params.node.attrs.class || \"\";\n    },\n    /**\n     * @override\n     */\n    willStart: async function () {\n        await this._super();\n        this._groupColors = await this._getColors();\n    },\n    /**\n     * Override to re-render the color picker on each component rendering.\n     *\n     * @override\n     */\n    renderElement: function() {\n        var self = this;\n        this._super.apply(this, arguments);\n        this.$('.o_web_studio_background_colorpicker .o_web_studio_color_palette').append(this._createPalette());\n        this.$('.o_web_studio_background_colorpicker').on(\"mousedown\", 'button[data-color]', function (e) {\n            self._onColorChange($(e.currentTarget).data('value').replace('text-', 'bg-'), \"background\");\n        });\n        this.$('.o_web_studio_font_colorpicker .o_web_studio_color_palette').append(this._createPalette());\n        this.$('.o_web_studio_font_colorpicker').on(\"mousedown\", 'button[data-color]', function (e) {\n            self._onColorChange($(e.currentTarget).data('value'), \"font\");\n        });\n     },\n\n\n\n    //--------------------------------------------------------------------------\n    // Private\n    //--------------------------------------------------------------------------\n\n    /**\n     * @private\n     * @returns {JQuery Node}\n     */\n    _createPalette: function () {\n        var $fontPlugin = $('<div/>');\n        this._groupColors.forEach(function (color) {\n            var $row;\n            if (typeof color === 'string') {\n                $row = $('<h6/>').text(color);\n            } else {\n                $row = $('<div class=\"o_web_studio_color_row\"/>');\n                color.forEach(function (color) {\n                    var $button = $('<button/>').appendTo($row);\n                    $button.attr('data-color', color);\n                    if (color.startsWith('#')) {\n                        $button.css('background-color', color);\n                        $button.attr('data-value', color);\n                    } else {\n                        $button.addClass('bg-' + color);\n                        $button.attr('data-value', 'text-' + color);\n                    }\n                    $row.append($button);\n                });\n            }\n            $fontPlugin.append($row);\n        });\n        return $fontPlugin;\n    },\n    /**\n     * @private\n     * @param {String} marginName the short name of the margin property (mt for\n     * margin top, etc.)\n     * @returns {Integer|undefined}\n     */\n    _findMarginValue: function(marginName) {\n        if (this.node.attrs.style) {\n            var margin = this.node.attrs.style\n                .split(';')\n                .map(function(item) {return item.trim();})\n                .filter(function(item){return !item.indexOf(marginName);});\n            if (margin.length) {\n                var marginValue = margin[0].split(':')[1].trim().replace('px','');\n                return parseInt(marginValue, 10);\n            }\n        }\n    },\n    /**\n     * @private\n     * @returns {Array}\n     */\n    _getColors: async function () {\n        if (!this._colorpickerArch) {\n            this._colorpickerArch = await this._rpc({\n                model: 'ir.ui.view',\n                method: 'render_public_asset',\n                args: ['web_editor.colorpicker', {}],\n            });\n        }\n\n        var groupColors = [];\n        var $clpicker = $(this._colorpickerArch);\n        $clpicker.children('.o_colorpicker_section').each(function () {\n            if (this.dataset.display) {\n                groupColors.push(this.dataset.display);\n            }\n            var colors = [];\n            $(this).children('button').each(function () {\n                var $el = $(this);\n                if (!$el.hasClass('d-none')) {\n                    colors.push($el.attr('data-color') || '');\n                }\n            });\n            if (colors.length) {\n                groupColors.push(colors);\n            }\n            if (this.dataset.name === 'common') {\n                groupColors = groupColors.concat([\n                    ['#FF0000', '#FF9C00', '#FFFF00', '#00FF00', '#00FFFF', '#0000FF', '#9C00FF', '#FF00FF'],\n                    ['#F7C6CE', '#FFE7CE', '#FFEFC6', '#D6EFD6', '#CEDEE7', '#CEE7F7', '#D6D6E7', '#E7D6DE'],\n                    ['#E79C9C', '#FFC69C', '#FFE79C', '#B5D6A5', '#A5C6CE', '#9CC6EF', '#B5A5D6', '#D6A5BD'],\n                    ['#E76363', '#F7AD6B', '#FFD663', '#94BD7B', '#73A5AD', '#6BADDE', '#8C7BC6', '#C67BA5'],\n                    ['#CE0000', '#E79439', '#EFC631', '#6BA54A', '#4A7B8C', '#3984C6', '#634AA5', '#A54A7B'],\n                    ['#9C0000', '#B56308', '#BD9400', '#397B21', '#104A5A', '#085294', '#311873', '#731842'],\n                    ['#630000', '#7B3900', '#846300', '#295218', '#083139', '#003163', '#21104A', '#4A1031']\n                ]);\n            }\n        });\n        return groupColors;\n    },\n\n    //--------------------------------------------------------------------------\n    // Handlers\n    //--------------------------------------------------------------------------\n\n    /**\n     * @private\n     * @param {JQelement} $elem\n     * @param {String} type either font or background\n     */\n    _onColorChange: function (value, type) {\n        var isClass = /^(text|bg)-/ .test(value);\n        if (isClass) {\n            this._editDomAttribute(\"class\", value, type === \"background\" ? this[\"background-color-class\"] : this[\"font-color-class\"]);\n        } else {\n            var attributeName = type === \"background\" ? 'background-color' : 'color';\n            this._editDomAttribute(\"style\", attributeName + ':' + value, this[attributeName]);\n        }\n    },\n    /**\n     * @private\n     * @param {JQEvent} e\n     */\n    _onClassesChange: function (e) {\n        e.preventDefault();\n        var newAttrs = {class : e.target.value};\n        this.trigger_up('view_change', {\n            node: this.node,\n            operation: {\n                type: 'attributes',\n                new_attrs: newAttrs,\n            },\n        });\n    },\n    /**\n     * @private\n     * @param {JQEvent} e\n     */\n    _onCustomColor: function (e) {\n        e.preventDefault();\n        const colorpicker = new ColorpickerDialog(this, {\n            defaultColor: 'rgb(255, 0, 0)',\n        });\n        colorpicker.on('colorpicker:saved', this, (ev) => {\n            var color = ev.data.cssColor;\n            var $button = $('<button/>');\n            $button.attr('data-color', color);\n            $button.attr('data-value', color);\n            $button.css('background-color', color);\n            $(e.target).closest('.dropdown-item').find('.o_web_studio_custom_colors').append($button);\n            $button.mousedown();\n        });\n        colorpicker.open();\n    },\n    /**\n     * @private\n     * @param {JQEvent} e\n     */\n    _onFontSizeChange: function (e) {\n        e.preventDefault();\n        this._editDomAttribute('class', $(e.currentTarget).data('value'), this.fontSize);\n    },\n    /**\n     * @private\n     * @param {JQEvent} e\n     */\n    _onTableStyleInputChange: function (e) {\n        e.preventDefault();\n        this._editDomAttribute(\"class\", e.target.value, this.tableStyle);\n    },\n    _onMarginInputChange: function (e) {\n        e.preventDefault();\n        var toRemove, toAdd;\n        if (e.target.value !== \"\") {\n            toAdd = e.target.dataset.margin + ':' + e.target.value + 'px';\n        }\n        if (this[e.target.dataset.margin]) {\n            toRemove = e.target.dataset.margin + ':' + this[e.target.dataset.margin] + 'px';\n        }\n        this._editDomAttribute(\"style\", toAdd, toRemove);\n    },\n    /**\n     * @private\n     * @param {JQEvent} e\n     */\n    _onResetColor: function (e) {\n        e.preventDefault();\n        if (e.currentTarget.dataset.target === \"background\") {\n            if (this[\"background-color-class\"]) {\n                this._editDomAttribute(\"class\", null, this[\"background-color-class\"]);\n            } else if (this[\"background-color\"]) {\n                this._editDomAttribute(\"style\", null, this[\"background-color\"]);\n            }\n        } else {\n            if (this[\"font-color-class\"]) {\n                this._editDomAttribute(\"class\", null, this[\"font-color-class\"]);\n            } else if (this.color) {\n                this._editDomAttribute(\"style\", null, this.color);\n            }\n        }\n    },\n    /**\n     * @private\n     * @param {JQEvent} e\n     */\n    _onTextAlignmentChange : function(e) {\n        e.preventDefault();\n        var data = $(e.currentTarget).data();\n        var toAdd = this.alignment !== data.property ? data.property : null;\n        this._editDomAttribute(\"class\", toAdd, this.alignment);\n    },\n    /**\n     * @private\n     * @param {JQEvent} e\n     */\n    _onTextDecorationChange : function(e) {\n        e.preventDefault();\n        var data = $(e.target).closest(\"button\").data();\n        this._editDomAttribute(\"class\",\n            !this[data.property] && (\"o_\" + data.property),\n            this[data.property] && (\"o_\" + data.property));\n    },\n    /**\n     * @private\n     * @param {JQEvent} e\n     */\n    _onWidthInputChange: function(e) {\n        e.preventDefault();\n        var addDisplayInlineBlock = \"\";\n        var hasDisplay = _.any((this.node.attrs.style || '').split(';'), function (item) {\n            return _.str.startsWith(item, 'display');\n        });\n        if (this.node.tag.toLowerCase() === 'span' && !hasDisplay) {\n            addDisplayInlineBlock = \";display:inline-block\";\n        }\n        this._editDomAttribute(\"style\", e.target.value && (\"width:\" + e.target.value + \"px\" + addDisplayInlineBlock), this.originalWidth);\n    }\n});\n\nvar TField = AbstractEditComponent.extend({\n    name: 'tfield',\n    template : 'web_studio.ReportDirectiveTField',\n    selector: '[t-field]',\n    /**\n     * @override\n     */\n    init: function () {\n        this._super.apply(this, arguments);\n        this.directiveFields['t-field'] = {\n            type: 'related',\n        };\n    },\n    /**\n     * @override\n     */\n    start: function () {\n        var self = this;\n        return this._super.apply(this, arguments).then(function () {\n            var $expr = self.$('.o_web_studio_tfield_fieldexpression');\n            return self.fieldSelector['t-field'].appendTo($expr);\n        });\n    },\n});\n\nvar TIf = AbstractEditComponent.extend({\n    name: 'tif',\n    template : 'web_studio.ReportDirectiveTIf',\n    selector: '',\n    events: _.extend({}, AbstractEditComponent.prototype.events, {\n        \"click .o_field_domain_dialog_button\": \"_onDialogEditButtonClick\",\n    }),\n    /**\n     * @override\n     */\n    init: function () {\n        this._super.apply(this, arguments);\n        this.directiveFields['t-if'] = {\n            type: 'char',\n        };\n    },\n    /**\n     * @override\n     */\n    start: function () {\n        var self = this;\n        try {\n            Domain.prototype.conditionToDomain(this.node.attrs['t-if'] || '');\n        } catch (e) {\n            console.warn(\"Can't convert the condition in an Odoo domain\", this.node.attrs['t-if'], e);\n            this.$('.o_field_domain_dialog_button').hide();\n        }\n        return this._super.apply(this, arguments).then(function () {\n            return self.fieldSelector['t-if'].appendTo(self.$('.o_web_studio_tif_ifexpression'));\n        });\n    },\n\n    //--------------------------------------------------------------------------\n    // Handlers\n    //--------------------------------------------------------------------------\n\n    /**\n     * Called when the \"Edit domain\" button is clicked (when using the in_dialog\n     * option) -> Open a DomainSelectorDialog to edit the value\n     *\n     * @param {Event} e\n     */\n    _onDialogEditButtonClick: function (e) {\n        e.preventDefault();\n        var self = this;\n        var availableKeys = this._getContextKeys(this.node);\n        // set a default document on the domain selector\n        var defaultDoc = _.findWhere(availableKeys, {relation: this.context.docs, type: 'many2one'});\n        defaultDoc = defaultDoc && defaultDoc.name || _.first(availableKeys).name;\n        var value = Domain.prototype.conditionToDomain(this.node.attrs['t-if'] || '');\n        var dialog = new DomainSelectorDialog(this, 'record_fake_model', value, {\n            readonly: this.mode === \"readonly\",\n            debugMode: config.isDebug(),\n            fields: availableKeys,\n            default: [[defaultDoc, '!=', false]],\n            operators: [\"=\", \"!=\", \">\", \"<\", \">=\", \"<=\", \"in\", \"not in\", \"set\", \"not set\"],\n        }).open();\n        dialog.on(\"domain_selected\", this, function (e) {\n            var condition = Domain.prototype.domainToCondition(e.data.domain);\n            self.$('input').val(condition === 'True' ? '' : condition).trigger('change');\n        });\n    },\n\n    /**\n    * @override\n    */\n    _onDirectiveChange: function (e) {\n        if (e.target.name === \"t-if\") {\n            return this._super.apply(this, arguments);\n        }\n        e.stopPropagation();\n    },\n    _isSameValue(value) {\n        const currentValue = this.node.attrs['t-if'];\n        const newValue = value['t-if'];\n        if (!currentValue || !newValue || typeof newValue !== \"string\") {\n            return currentValue === newValue;\n        }\n        function normalizeValue(value) {\n            const charset = {\n                \"'\": /\"/,\n                \"[\": /\\(/,\n                \"]\": /\\)/,\n                \"','\": /',\\s+'/,\n                \"']\": /'\\s+]/,\n                \"['\": /\\[\\s+'/,\n            }\n            for (const key in charset) {\n                const toReplace = new RegExp(charset[key], \"g\");\n                value = value.replace(toReplace, key);\n            }\n            return value;\n        }\n        return normalizeValue(currentValue) == normalizeValue(newValue);\n    },\n    _triggerViewChange: function (newAttrs) {\n        if (!this._isSameValue(newAttrs)) {\n            this._super.apply(this, arguments);\n        }\n    },\n});\n\nvar TElse = AbstractEditComponent.extend({\n    name: 'telse',\n    template : 'web_studio.ReportDirectiveTElse',\n    selector: '[t-else]',\n    insertAsLastChildOfPrevious: true,\n    /**\n     * @override\n     */\n    init: function () {\n        this._super.apply(this, arguments);\n        this.tIf = this.node.parent.children[this.node.parent.children.indexOf(this.node) - 1].attrs['t-if'];\n        this.directiveFields['t-else'] = {\n            type: 'boolean',\n        };\n    },\n    /**\n     * @override\n     */\n    start: function () {\n        var self = this;\n        return this._super.apply(this, arguments).then(function () {\n            return self.fieldSelector['t-else'].appendTo(self.$('.o_web_studio_telse_elseexpression'));\n        });\n    },\n    /**\n     * @override\n     */\n    _triggerViewChange: function (newAttrs) {\n        this.trigger_up('view_change', {\n            node: this.node,\n            operation: {\n                type: 'attributes',\n                new_attrs: {\n                    't-else': newAttrs['t-else'] ? 'else' : null,\n                },\n            },\n        });\n    },\n\n    //--------------------------------------------------------------------------\n    // Handlers\n    //--------------------------------------------------------------------------\n});\n\nvar TEsc = AbstractEditComponent.extend({\n    name: 'tesc',\n    template : 'web_studio.ReportDirectiveTEsc',\n    selector: '[t-esc]',\n    /**\n     * @override\n     */\n    init: function () {\n        this._super.apply(this, arguments);\n        this.directiveFields['t-esc'] = {\n            type: 'related',\n            freecode: true,\n        };\n    },\n    /**\n     * @override\n     */\n    start: function () {\n        var self = this;\n        return this._super.apply(this, arguments).then(function () {\n            return self.fieldSelector['t-esc'].appendTo(self.$('.o_web_studio_tesc_escexpression'));\n        });\n    },\n});\n\nvar TSet = AbstractEditComponent.extend({\n    name: 'tset',\n    template : 'web_studio.ReportDirectiveTSet',\n    selector: '[t-set]',\n    /**\n     * @override\n     */\n    init: function () {\n        this._super.apply(this, arguments);\n\n        this.directiveFields['t-set'] = {\n            type: 'char',\n        };\n        this.directiveFields['t-value'] = {\n            type: 'related',\n            freecode: true,\n        };\n    },\n    /**\n     * @override\n     */\n    start: function () {\n        var self = this;\n        return this._super.apply(this, arguments).then(function () {\n            return Promise.all([\n                self.fieldSelector['t-set'].appendTo(self.$('.o_web_studio_tset_setexpression')),\n                self.fieldSelector['t-value'].appendTo(self.$('.o_web_studio_tset_valueexpression'))\n            ]);\n        });\n    },\n});\n\nvar TForeach = AbstractEditComponent.extend({\n    name: 'tforeach',\n    template : 'web_studio.ReportDirectiveTForeach',\n    debugSelector: '[t-foreach]',\n    /**\n     * @override\n     */\n    init: function () {\n        this._super.apply(this, arguments);\n        this.directiveFields['t-foreach'] = {\n            type: 'related',\n            freecode: true,\n            loop: true,\n        };\n        this.directiveFields['t-as'] = {\n            type: 'char',\n        };\n    },\n    /**\n     * @override\n     */\n    start: function () {\n        var self = this;\n        return this._super.apply(this, arguments).then(function () {\n            return Promise.all([\n                self.fieldSelector['t-as'].appendTo(self.$('.o_web_studio_tas_asexpression')),\n                self.fieldSelector['t-foreach'].appendTo(self.$('.o_web_studio_tforeach_foreachexpression'))\n            ]);\n        });\n    },\n});\n\nvar BlockTotal = AbstractEditComponent.extend({\n    name: 'blockTotal',\n    template : 'web_studio.BlockTotal',\n    selector: '.o_report_block_total',\n    blacklist: 't, tr, td, th, small, span',\n    /**\n     * @override\n     */\n    init: function () {\n        this._super.apply(this, arguments);\n        this.directiveFields.total_amount_untaxed = {\n            type: 'related',\n            value: this.node.children[2].attrs['t-value'],\n            filter: function (field) {\n                return _.contains(['many2one', 'float', 'monetary'], field.type);\n            },\n            followRelations: function (field) {\n                return field.type === 'many2one';\n            },\n        };\n        this.directiveFields.total_currency_id = {\n            type: 'related',\n            value: this.node.children[0].attrs['t-value'],\n            filter: function (field) {\n                return field.type === 'many2one';\n            },\n            followRelations: function (field) {\n                return field.type === 'many2one' && field.relation !== 'res.currency';\n            },\n        };\n        this.directiveFields.total_amount_total = {\n            type: 'related',\n            value: this.node.children[1].attrs['t-value'],\n            filter: function (field) {\n                return _.contains(['many2one', 'float', 'monetary'], field.type);\n            },\n            followRelations: function (field) {\n                return field.type === 'many2one';\n            },\n        };\n        this.directiveFields.total_amount_by_groups = {\n            type: 'related',\n            value: this.node.children[3].attrs['t-value'],\n        };\n    },\n    /**\n     * @override\n     */\n    start: function () {\n        var self = this;\n        return this._super.apply(this, arguments).then(function () {\n            return Promise.all([\n                self.fieldSelector.total_currency_id.appendTo(self.$('.o_web_studio_report_currency_id')),\n                self.fieldSelector.total_amount_untaxed.appendTo(self.$('.o_web_studio_report_amount_untaxed')),\n                self.fieldSelector.total_amount_total.appendTo(self.$('.o_web_studio_report_amount_total')),\n                self.fieldSelector.total_amount_by_groups.appendTo(self.$('.o_web_studio_report_amount_by_groups'))\n            ]);\n        });\n    },\n    /**\n     * @override\n     */\n    _triggerViewChange: function (newAttrs) {\n        this._tSetAttributes(newAttrs);\n    },\n});\n\nvar Column = AbstractEditComponent.extend({\n    name: 'column',\n    template : 'web_studio.ReportColumn',\n    selector: 'div[class*=col-]',\n    /**\n     * @override\n     */\n    init: function () {\n        this._super.apply(this, arguments);\n\n        this.classes = (this.node.attrs.class || \"\").split(' ');\n        // TODO: deal with multiple classes (ex: col-6 col-md-3)\n        this.sizeClass = _.find(this.classes, function (item) {\n            return item.indexOf('col-') !== -1;\n        }) || '';\n        this.offsetClass = _.find(this.classes, function (item) {\n            return item.indexOf('offset-') !== -1;\n        }) || '';\n        this.size = +this.sizeClass.split('col-')[1];\n        this.offset = +this.offsetClass.split('offset-')[1];\n        this.directiveFields.size = {\n            type: 'integer',\n            value: this.size,\n        };\n        this.directiveFields.offset = {\n            type: 'integer',\n            value: this.offset,\n        };\n    },\n    /**\n     * @override\n     */\n    start: function () {\n        var self = this;\n        return this._super.apply(this, arguments).then(function () {\n            return Promise.all([\n                self.fieldSelector.size.prependTo(self.$('.o_web_studio_size')),\n                self.fieldSelector.offset.prependTo(self.$('.o_web_studio_offset'))\n            ]);\n        });\n    },\n    /**\n     * @override\n     */\n    _triggerViewChange: function (newAttrs) {\n        if ('size' in newAttrs && newAttrs.size >= 0) {\n            this._editDomAttribute(\"class\", 'col-' + newAttrs.size, this.sizeClass);\n        } else if ('offset' in newAttrs && newAttrs.offset >= 0) {\n            this._editDomAttribute(\"class\", 'offset-' + newAttrs.offset, this.offsetClass);\n        }\n    },\n});\n\nvar Table = AbstractEditComponent.extend({\n    selector: 'table.o_report_block_table',\n    blacklist: 'thead, tbody, tfoot, tr, td[colspan=\"99\"]',\n});\n\nvar TextSelectorTags = 'span, p, h1, h2, h3, h4, h5, h6, blockquote, pre, small, u, i, b, font, strong, ul, li, dl, dt, ol, th, td';\nvar filter = ':not([t-field]):not(:has(t, [t-' + QWeb2.ACTIONS_PRECEDENCE.join('], [t-field], [t-') + ']))';\nvar Text = AbstractEditComponent.extend({\n    name: 'text',\n    template : 'web_studio.ReportText',\n    selector: TextSelectorTags.split(',').join(filter + ',') + filter,\n    blacklist: TextSelectorTags,\n    custom_events: {\n        wysiwyg_blur: '_onBlurWysiwygEditor',\n    },\n    /**\n     * @override\n     */\n    init: function () {\n        this._super.apply(this, arguments);\n        this.$node = $(utils.json_node_to_xml(this.node));\n        this.$node.find('*').add(this.$node).each(function () {\n                var node = this;\n                _.each(Array.prototype.slice.call(node.attributes), function (attr) {\n                    if (!attr.name.indexOf('data-oe-')) {\n                        node.removeAttribute(attr.name);\n                    }\n                });\n            });\n        this.directiveFields.text = {\n            type: 'text',\n            value: utils.xml_to_str(this.$node[0]).split('>').slice(1).join('>').split('</').slice(0, -1).join('</'),\n        };\n    },\n    /**\n     * @override\n     */\n    start: function () {\n        var self = this;\n        return this._super.apply(this, arguments)\n            .then(function () {\n                return self.fieldSelector.text.appendTo(self.$('.o_web_studio_text'));\n            }).then(function () {\n                return self._startWysiwygEditor();\n            });\n    },\n\n    //--------------------------------------------------------------------------\n    // Private\n    //--------------------------------------------------------------------------\n\n    _onBlurWysiwygEditor: function () {\n        this._triggerViewChange({text: this.wysiwyg.getValue()});\n    },\n    _startWysiwygEditor: function () {\n        var self = this;\n        const options = {\n            lang: \"odoo\",\n            recordInfo: {context: this.context},\n            value: this.directiveFields.text.value,\n            resizable: true,\n            toolbarTemplate: 'web_studio.Sidebar.web_editor_toolbar',\n            allowInlineAtRoot: true,\n        };\n        this.wysiwyg = new Wysiwyg(this, options);\n        this.$textarea = this.$('textarea:first').val(this.directiveFields.text.value);\n\n        this.$textarea.after(this.$wysiwygWrapper);\n        this.$textarea.hide();\n\n        this.$textarea.off().on('input', function (e) { // to test simple\n            e.preventDefault();\n            e.stopImmediatePropagation();\n            self.wysiwyg.setValue($(this).val());\n            self.wysiwyg.trigger_up('wysiwyg_blur');\n        });\n\n        return this.wysiwyg.insertAfter(this.$textarea);\n    },\n    /**\n     * @override\n     */\n    _triggerViewChange: function (newAttrs) {\n        var node = this.node;\n        var $node = this.$node.clone().html(newAttrs.text);\n        var xml = utils.xml_to_str($node[0]).replace(/ xmlns=\"[^\"]+\"/, \"\");\n        this.trigger_up('view_change', {\n            node: node,\n            operation: {\n                inheritance: [{\n                    content: xml,\n                    position: \"replace\",\n                    view_id: +node.attrs['data-oe-id'],\n                    xpath: node.attrs['data-oe-xpath']\n                }],\n            },\n        });\n    },\n});\n\nvar Image = LayoutEditable.extend({\n    name: 'image',\n    template: 'web_studio.ReportImage',\n    selector: 'img',\n    /**\n     * @override\n     */\n    init: function() {\n        this._super.apply(this, arguments);\n        this.directiveFields.src = {\n            type: 'text', value: this.node.attrs.src\n        };\n    },\n    /**\n     * @override\n     */\n    start: function() {\n        var self = this;\n        return this._super.apply(this, arguments).then(function () {\n            return self.fieldSelector.src.appendTo(self.$('.o_web_studio_source'));\n        });\n    },\n});\n\nvar Groups = AbstractEditComponent.extend({\n    name: 'groups',\n    template: 'web_studio.ReportGroups',\n    insertAsLastChildOfPrevious: true,\n    /**\n     * @override\n     */\n    init: function () {\n        this._super.apply(this, arguments);\n\n        var groups = this.node.attrs.studio_groups && JSON.parse(this.node.attrs.studio_groups);\n        this.directiveFields.groups = {\n            name: 'groups',\n            fields: [{\n                name: 'id',\n                type: 'integer',\n            }, {\n                name: 'display_name',\n                type: 'char',\n            }],\n            value: groups,\n            relation: 'res.groups',\n            type: 'many2many',\n            Widget: 'many2many_tags',\n        };\n    },\n    /**\n     * @override\n     */\n    start: function() {\n        var self = this;\n        return this._super.apply(this, arguments).then(function () {\n            return self.fieldSelector.groups.appendTo(self.$('.o_web_studio_groups'));\n        });\n    },\n});\n\nvar TOptions = AbstractEditComponent.extend( {\n    name: 'toptions',\n    template : 'web_studio.ReportDirectiveTOptions',\n    selector: '[t-field], [t-esc]',\n    insertAsLastChildOfPrevious: true,\n    events: _.extend({}, AbstractEditComponent.prototype.events, {\n        'change select:first': '_onChangeWidget',\n    }),\n    /**\n     * @override\n     * @param {Object} [params.widgetsOptions]\n     */\n    init: function (parent, params) {\n        this._super.apply(this, arguments);\n\n        this.changes = {};\n        this.widgetsOptions = params.widgetsOptions;\n\n        // for contact widget, we don't want to display all options\n        if (this.widgetsOptions && this.widgetsOptions.contact) {\n            this.widgetsOptions.contact = _.pick(this.widgetsOptions.contact, [\n                'fields',\n                'separator',\n                'no_marker',\n            ]);\n        }\n\n        this.widget = null;  // the selected widget\n        this.values = {};  // dict containing the t-options values\n\n        this._extractTOptions();\n    },\n    /**\n     * @override\n     */\n    willStart: function () {\n        var self = this;\n\n        // create fields for each widget options\n        var directiveFields = this.directiveFields;\n        this.widgets = _.map(this.widgetsOptions, function (widgetConf, widgetKey) {\n            var values = self.values.widget === widgetKey ? self.values : {};\n\n            var options = _.map(widgetConf, function (option, optionKey) {\n                option.key = optionKey;\n                if (option.default_value) {\n                    option.default_value = option.default_value;\n                }\n                var required = typeof option.required === 'string' ?\n                        option.required === 'value_to_html' && !('t-field' in self.node.attrs) :\n                        option.required;\n                var params = {\n                    key: option.key,\n                    string: option.string,\n                    required: required,\n                    attributeName: 't-options-' + optionKey,\n                    value: values[optionKey],\n                };\n                switch (option.type) {\n                    case 'model':\n                        params.type = 'related';\n                        //filter => m2o > model name\n                        break;\n                    case 'boolean':\n                        params.type = 'boolean';\n                        break;\n                    case 'select':\n                        params.type = 'selection';\n                        params.selection = option.params;\n                        break;\n                    case 'float':\n                        params.type = 'float';\n                        break;\n                    case 'integer':\n                        params.type = 'integer';\n                        break;\n                    case 'date':\n                    case 'datetime':\n                        params.type = 'related';\n                        params.filter = function (field) {\n                            return field.type === 'many2one' || field.type === 'datetime';\n                        };\n                        params.followRelations = function (field) {\n                            return field.type === 'many2one';\n                        };\n                        // free object date / datetime\n                        params.freecode = true;\n                        break;\n                    case 'array':\n                        if (option.params && option.params.type === 'selection') {\n                            params.type = 'many2many';\n                            params.Widget = 'many2many_select';\n                            params.value = params.value && params.value.length ? params.value : option.default_value || [];\n                            params.selection = option.params.params;\n                        } else {\n                            params.type = 'char';\n                            params.value = JSON.stringify(params.value);\n                        }\n                        break;\n                    case 'selection':\n                        if (option.params && option.params.type === 'selection' && option.params.selection) {\n                            params.type = option.params.type;\n                            params.value = params.value ? params.value : option.default_value || false;\n                            params.placeholder = option.params.placeholder || '';\n                            params.selection = option.params.selection || [];\n                        } else {\n                            params.type = 'char';\n                        }\n                        break;\n                    default:\n                        params.type = 'char';\n                }\n\n                directiveFields[widgetKey + ':' + optionKey] = params;\n\n                return params;\n            });\n            options.sort(function (a, b) {\n                return (a.type === 'boolean' && b.type === 'boolean' ?\n                        a.string.localeCompare(b.string) :\n                        a.type === 'boolean' && a.key !== 'no_marker' ? -1 : 1);\n            });\n\n            return {\n                key: widgetKey,\n                string: widgetKey,\n                options: options,\n            };\n        });\n        this.widgets.sort(function (a, b) {\n            return a.string.localeCompare(b.string);\n        });\n\n        // selected widget\n        this.widget = _.findWhere(this.widgets, {key: this.values.widget && this.values.widget});\n\n        return this._super.apply(this, arguments);\n    },\n    /**\n     * @override\n     */\n    start: function () {\n        var defs = [this._super.apply(this, arguments)];\n        if (this.widget) {\n            this.$('.o_web_studio_toption_widget select').val(this.widget.key);\n            defs.push(this._updateWidgetOptions());\n        }\n        return Promise.all(defs);\n    },\n\n    //--------------------------------------------------------------------------\n    // Private\n    //--------------------------------------------------------------------------\n\n    /**\n     * Extracts t-options widget and options for this node.\n     *\n     * @private\n     */\n    _extractTOptions: function () {\n        this.values = py.extract(this.node.attrs['t-options'] || '{}');\n        for (var k in this.node.attrs) {\n            if (k.slice(0, 10) === 't-options-') {\n                this.values[k.slice(10)] = py.extract(this.node.attrs[k]);\n            }\n        }\n    },\n    /**\n     * @private\n     * @returns {Promise}\n     */\n    _updateWidgetOptions: function () {\n        var self = this;\n        this.$('button').toggleClass('hidden', !this.widget || !this.widget.options.length);\n        this.$('.o_web_studio_toption_options').remove();\n        if (!this.widget || !this.widget.options.length) {\n            return;\n        }\n        var $options = $(qweb.render('web_studio.ReportDirectiveTOptions.options', this));\n        var mountedComponents = [];\n        var defs = _.map(this.widget.options, function (option) {\n            var $option = $options.find('.o_web_studio_toption_option_' + self.widget.key + '_' + option.key);\n            var field = self.fieldSelector[self.widget.key + ':' + option.key];\n            if (option.type === \"boolean\") {\n                return field.prependTo($option.find('label'));\n            } else {\n                return field.appendTo($option);\n            }\n        });\n        return Promise.all(defs).then (function () {\n            self.$el.find('.o_studio_report_options_container').append($options);\n            if (!self.isDestroyed()) {\n                mountedComponents.forEach(widget => widget.on_attach_callback());\n            }\n        });\n    },\n    /**\n     * @private\n     * @override\n     */\n    _triggerViewChange: function (newAttrs) {\n        var self = this;\n        var changes = {};\n\n        // this.widget is the recently set `widget` key\n        if (this.widget) {\n            var options = _.findWhere(this.widgets, {key: this.widget.key}).options;\n\n            if (this.values.widget !== this.widget.key) {\n                changes['t-options-widget'] = '\"' + this.widget.key + '\"';\n            }\n            _.each(newAttrs, function (val, key) {\n                var field = key.split(':');\n                if (self.widget.key === field[0]) {\n                    var option = _.findWhere(options, {key: field[1]});\n                    var value = val;\n                    if (value) {\n                        if (option.type === 'char' || option.type === 'selection') {\n                            value = '\"' + val.replace(/\"/g, '\\\\\"') + '\"';\n                        }\n                    }\n\n                    if (option.format) {\n                        value = option.format(value);\n                    }\n\n                    if ((self.widget.key !== self.values.widget || value !== self.values[key])) {\n                        changes['t-options-' + field[1]] = value;\n                    }\n                }\n            });\n        } else {\n            changes['t-options-widget'] = '\"\"';\n            // TODO: remove all other set t-options-..\n            // t-options='\"{}\"' doesn't work because t-options-.. has precedence\n        }\n        this.trigger_up('view_change', {\n            node: this.node,\n            operation: {\n                type: 'attributes',\n                new_attrs: changes,\n            },\n        });\n    },\n    //--------------------------------------------------------------------------\n    // Handlers\n    //--------------------------------------------------------------------------\n    /**\n     * @private\n     * @param {OdooEvent} ev\n     */\n    _onChangeWidget: function (ev) {\n        var widget = _.findWhere(this.widgets, {key: $(ev.target).val()});\n        if (widget !== this.widget) {\n            this.widget = widget;\n            this._triggerViewChange({});\n        }\n        this._updateWidgetOptions();\n    },\n    /**\n     * @override\n     */\n    _onDirectiveChange: function (e) {\n        if (e.target.name === 'contact:fields') {\n            // this field uses a special FieldWidget (many2many_select) which is\n            // not a real FieldWidget so the changes are not formatted as\n            // expected\n            e.stopPropagation();\n            var changes = _.clone(e.data.changes);\n            var key = _.keys(changes)[0];\n            changes[key] = changes[key].ids;\n            this._triggerViewChange(changes);\n        } else {\n            this._super.apply(this, arguments);\n        }\n    },\n});\n\nreturn {\n    BlockTotal: BlockTotal,\n    Column: Column,\n    Groups: Groups,\n    Image: Image,\n    LayoutEditable: LayoutEditable,\n    Table: Table,\n    Text: Text,\n    TField: TField,\n    TForeach: TForeach,\n    TElse: TElse,\n    TEsc: TEsc,\n    TIf: TIf,\n    TOptions: TOptions,\n    TSet: TSet,\n};\n\n});\n", "odoo.define('web_studio.reportEditComponentsRegistry', function (require) {\n\"use strict\";\n\nvar Registry = require('web.Registry');\nvar reportEditComponents = require('web_studio.reportEditComponents');\n\nvar registry = new Registry();\n\nregistry\n    .add('column', reportEditComponents.Column)\n    .add('groups', reportEditComponents.Groups)\n    .add('layout', reportEditComponents.LayoutEditable)\n    .add('image', reportEditComponents.Image)\n    .add('table', reportEditComponents.Table)\n    .add('text', reportEditComponents.Text)\n    .add('total', reportEditComponents.BlockTotal)\n    .add('tEsc', reportEditComponents.TEsc)\n    .add('tElse', reportEditComponents.TElse)\n    .add('tField', reportEditComponents.TField)\n    .add('tForeach', reportEditComponents.TForeach)\n    .add('tIf', reportEditComponents.TIf)\n    .add('tOptions', reportEditComponents.TOptions)\n    .add('tSet', reportEditComponents.TSet);\n\nreturn registry;\n\n});\n", "odoo.define('web_studio.reportNewComponents', function (require) {\n\"use strict\";\n\nvar config = require('web.config');\nvar core = require('web.core');\nvar Dialog = require('web.Dialog');\n\nvar Abstract = require('web_studio.AbstractReportComponent');\nvar NewFieldDialog = require('web_studio.NewFieldDialog');\n\nconst { MediaDialogWrapper } = require('@web_editor/components/media_dialog/media_dialog');\nconst { ComponentWrapper } = require('web.OwlCompatibility');\n\nvar _t = core._t;\nvar _lt = core._lt;\n\nvar AbstractNewBuildingBlock = Abstract.extend({\n    type: false,\n    structure: false,\n    label: false,\n    fa: false,\n    description: false,\n    addEmptyRowsTargets: true,\n    modelWhitelist: [],\n    events: _.extend({}, Abstract.prototype.events, {\n        mouseenter: '_onHover',\n        focusin: '_onHover',\n        mouseleave: '_onStopHover',\n        focusout: '_onStopHover',\n    }),\n    /**\n     * @override\n     */\n    start: function () {\n        var self = this;\n        this.$el.addClass('o_web_studio_component');\n        this.$el.text(this.label);\n        if (this.fa) {\n            this.$el.append('<i class=\"fa ' + this.fa + '\">');\n        }\n        if (config.isDebug() && this.description) {\n            this.$el.addClass('o_web_studio_debug');\n            this.$el.append($('<div>')\n                .addClass('o_web_studio_component_description')\n                .text(this.description)\n            );\n        }\n        var dragFunction = _.cancellableThrottleRemoveMeSoon(function (e) {\n                self.trigger_up('drag_component', {\n                    position: { pageX: e.pageX, pageY: e.pageY },\n                    widget: self,\n                });\n            }, 100);\n        this.$el.draggable({\n            helper: 'clone',\n            opacity: 0.4,\n            scroll: false,\n            // revert: 'invalid',  // this causes _setTimeout in tests for stop\n            revertDuration: 200,\n            refreshPositions: true,\n            iframeFix: true,\n            start: function (e, ui) {\n                $(ui.helper).addClass(\"ui-draggable-helper\");\n                self.trigger_up('begin_drag_component', {\n                    widget: self\n                });\n            },\n            drag: dragFunction,\n            stop: function (e) {\n                dragFunction.cancel();\n                self.trigger_up('drop_component', {\n                    position: { pageX: e.pageX, pageY: e.pageY },\n                    widget: self,\n                });\n            }\n        });\n\n        return this._super.apply(this, arguments);\n    },\n\n    //--------------------------------------------------------------------------\n    // Public\n    //--------------------------------------------------------------------------\n\n    /**\n     * To be overriden.\n     *\n     * @param {Object} options\n     * @param {Object[]} options.targets\n     * @param {Integer} [options.oeIndex]\n     * @returns {Promise<Object>}\n     */\n    add: function (options) {\n        this.targets = options.targets;\n        var first = options.targets[0];\n        this.index = first.data.oeIndex;\n        this.position = first.data.oePosition;\n        this.node = first.node;\n        return Promise.resolve({\n            type: this.type,\n            options: {\n                columns: this.dropColumns,\n                index: first.data.oeIndex,\n            },\n        });\n    },\n    //--------------------------------------------------------------------------\n    // Handlers\n    //--------------------------------------------------------------------------\n    /**\n     * @private\n     * @param {MouseEvent} e\n     */\n    _onHover: function (e) {\n        this.trigger_up('begin_preview_drag_component', {\n            widget: this,\n        });\n    },\n\n    /**\n     * @private\n     * @param {MouseEvent} e\n     */\n    _onStopHover: function (e) {\n        this.trigger_up('end_preview_drag_component', {\n            widget: this,\n        });\n    },\n    //--------------------------------------------------------------------------\n    // Private\n    //--------------------------------------------------------------------------\n    /**\n     * create td and th in table, manage colspan.\n     *\n     * @param {Object} options\n     * @param {string} options.head\n     * @param {string} options.headLoop\n     * @param {string} options.body\n     * @param {string} options.bodyLoop\n     * @param {string} options.foot\n     * @param {string} options.footLoop\n     * @returns {Object}\n     */\n    _createReportTableColumn: function (options) {\n        var self = this;\n        var inheritance = [];\n        var updatedNodes = [];\n\n        // add cells in rows\n\n        _.each(this.targets, function (target) {\n            var node = target.node;\n            var inheritanceItem;\n            if (node.tag === 'th' || node.tag === 'td') {\n                var loop = self._findParentWithTForeach(node) ? true : false;\n                var dataName = loop ? 'Loop' : '';\n                var content = '<' + node.tag + '>';\n                if (node.tag === 'th' || node.parent.parent.tag === 'thead') {\n                    content += options['head' + dataName] || options.head || '';\n                } else if (node.parent.parent.tag === 'tfoot') {\n                    content += options['foot' + dataName] || options.foot || '';\n                } else {\n                    content += options['body' + dataName] || options.body || '';\n                }\n                content += '</' + node.tag + '>';\n\n                updatedNodes.push(node);\n                inheritanceItem = {\n                    content: content,\n                    position: target.position,\n                    xpath: node.attrs['data-oe-xpath'],\n                    view_id: +node.attrs['data-oe-id'],\n                };\n            } else if (node.tag === 'tr') {\n                updatedNodes.push(node);\n                inheritanceItem = {\n                    content: '<td>' + (options.tbody || '') + '</td>',\n                    position: target.position,\n                    xpath: node.attrs['data-oe-xpath'],\n                    view_id: +node.attrs['data-oe-id'],\n                };\n            }\n            inheritance.push(inheritanceItem);\n        });\n\n        // colspan\n        var cellsToGrow = [];\n        _.each(this.targets, function (target) {\n            var node = target.node;\n            if (target.position !== 'after') {\n                return;\n            }\n\n            // define td index\n\n            var nodeIndex = 0;\n            var nodeRow = self._getParentNode(node, function (node) { return node.tag === 'tr'; });\n            var cells = self._getChildrenNode(nodeRow, function (node) { return node.tag === 'td' || node.tag === 'th'; });\n            for (var k = 0; k < cells.length; k++) {\n                nodeIndex += +(cells[k].attrs.colspan || 1);\n                if (cells[k] === node) {\n                    break;\n                }\n            }\n\n            // select colspan to grow\n\n            var table = self._getParentNode(node, function (node) { return node.tag === 'table'; });\n            var rows = self._getChildrenNode(table, function (node) { return node.tag === 'tr'; });\n            _.each(rows, function (row) {\n                if (row === nodeRow) {\n                    return;\n                }\n\n                var cells = self._getChildrenNode(row, function (node) { return node.tag === 'td' || node.tag === 'th'; });\n\n                var cellIndex = 0;\n                for (var k = 0; k < cells.length; k++) {\n                    var cell = cells[k];\n                    cellIndex += +(cell.attrs.colspan || 1);\n                    if (cellIndex >= nodeIndex) {\n                        if (((+cell.attrs.colspan) > 1) && cellsToGrow.indexOf(cell) === -1) {\n                            cellsToGrow.push(cell);\n                        }\n                        break;\n                    }\n                }\n            });\n        });\n        _.each(cellsToGrow, function (node) {\n            inheritance.push({\n                content: '<attribute name=\"colspan\">' + ((+node.attrs.colspan) + 1) + '</attribute>',\n                position: 'attributes',\n                xpath: node.attrs['data-oe-xpath'],\n                view_id: +node.attrs['data-oe-id'],\n            });\n        });\n\n        return inheritance;\n    },\n    _createStructure: function (options) {\n        var xml = ['<div class=\"row'];\n        if (this.structureClass) {\n            xml.push(' ' + this.structureClass);\n        }\n        xml.push('\">');\n        for (var k = 0; k < this.dropColumns.length; k++) {\n            var column = this.dropColumns[k];\n            xml.push('<div class=\"col-');\n            xml.push(column[1]);\n            if (column[0]) {\n                xml.push(' offset-');\n                xml.push(column[0]);\n            }\n            xml.push('\">');\n            if (options.content && (k === options.index || options.fillStructure)) {\n                xml.push(options.content);\n            }\n            xml.push('</div>');\n        }\n        xml.push('</div>');\n\n        return [{\n            content: xml.join(''),\n            position: this.position,\n            xpath: this.node.attrs['data-oe-xpath'],\n            view_id: +this.node.attrs['data-oe-id'],\n        }];\n    },\n    _createContent: function (options) {\n        if (this.dropColumns && typeof this.index === 'number') {\n            return this._createStructure({\n                index: this.index,\n                content: options.contentInStructure || options.content,\n                fillStructure: options.fillStructure || false,\n            });\n        } else {\n            return _.map(this.targets, function (target) {\n                var isCol = (target.node.attrs.class || '').match(/(^|\\s)(col(-[0-9]+)?)(\\s|$)/);\n                return {\n                    content: isCol ? options.contentInStructure || options.content : options.content,\n                    position: target.position,\n                    xpath: target.node.attrs['data-oe-xpath'],\n                    view_id: +target.node.attrs['data-oe-id'],\n                };\n            });\n        }\n    },\n    _getParentNode: function (node, fn) {\n        while (node) {\n            if (fn(node)) {\n                return node;\n            }\n            node = node.parent;\n        }\n    },\n    /**\n     * TODO: rewrite this function\n     */\n    _getChildrenNode: function (parent, fn) {\n        var children = [];\n        var stack = [parent];\n        parent = stack.shift();\n        while (parent) {\n            if (parent.children) {\n                for (var k = 0; k < parent.children.length; k++) {\n                    var node = parent.children[k];\n                    if (fn(node)) {\n                        children.push(node);\n                    }\n                }\n                stack = parent.children.concat(stack);\n            }\n            parent = stack.shift();\n        }\n        return children;\n    },\n    /**\n     * Goes through the hierachy of parents of the node in parameter until we\n     * find the closest parent with a t-foreach defined on it.\n     *\n     * @private\n     * @param {Object} node\n     * @returns {Object|undefined} node that contains a t-foreach as parent of the node in parameter\n     */\n    _findParentWithTForeach: function (node) {\n        if (!node || !node.parent || (node.tag === \"div\" && node.attrs.class === \"page\")) {\n            return;\n        }\n        if (node.attrs[\"t-foreach\"]) {\n            return node;\n        }\n        return this._findParentWithTForeach(node.parent);\n    },\n});\nvar TextSelectorTags = 'span, p, h1, h2, h3, h4, h5, h6, blockquote, pre, small, u, i, b, font, strong, ul, li, dl, dt, ol, .page > .row > div:empty';\nvar filter = ':not([t-field]):not(:has(t, [t-' + QWeb2.ACTIONS_PRECEDENCE.join('], [t-') + ']))';\n\n// ----------- TEXT -----------\n\nvar BlockText = AbstractNewBuildingBlock.extend({\n    type: 'text',\n    label: _lt('Text'),\n    dropIn: '.page',\n    className: 'o_web_studio_field_char',\n    hookClass: 'o_web_studio_block_char',\n    add: function () {\n        var self = this;\n        return this._super.apply(this, arguments).then(function () {\n            return Promise.resolve({\n                inheritance: self._createContent({\n                    content: '<div class=\"row\"><div class=\"col\"><span>New Text Block</span></div></div>',\n                })\n            });\n        });\n    },\n});\n\nvar InlineText = AbstractNewBuildingBlock.extend({\n    type: 'text',\n    label: _lt('Text'),\n    className: 'o_web_studio_field_char',\n    hookClass: 'o_web_studio_hook_inline',\n    hookAutoHeight: true,\n    dropIn: TextSelectorTags.split(',').join(filter + '|') + filter,\n    selectorSeparator: '|',\n    hookTag: 'span',\n    add: function () {\n        var self = this;\n        return this._super.apply(this, arguments).then(function () {\n            return Promise.resolve({\n                inheritance: self._createContent({\n                    content: '<span>New Text Block</span>',\n                })\n            });\n        });\n    },\n});\n\nvar ColumnHalfText = AbstractNewBuildingBlock.extend({\n    type: 'text',\n    label: _lt('Two Columns'),\n    dropIn: '.page',\n    className: 'o_web_studio_field_fa',\n    fa: 'fa-align-left',\n    hookClass: 'o_web_studio_block_char',\n    hookTag: 'div',\n    dropColumns: [[0, 6], [0, 6]],\n    addEmptyRowsTargets: false,\n    add: function () {\n        var self = this;\n        return this._super.apply(this, arguments).then(function () {\n            return Promise.resolve({\n                inheritance: self._createContent({\n                    fillStructure: true,\n                    contentInStructure: '<span>New Column</span>',\n                })\n            });\n        });\n    },\n});\n\nvar ColumnThirdText = AbstractNewBuildingBlock.extend({\n    type: 'text',\n    label: _lt('Three Columns'),\n    dropIn: '.page',\n    className: 'o_web_studio_field_fa',\n    fa: 'fa-align-left',\n    hookClass: 'o_web_studio_block_char',\n    hookTag: 'div',\n    dropColumns: [[0, 4], [0, 4], [0, 4]],\n    addEmptyRowsTargets: false,\n    add: function () {\n        var self = this;\n        return this._super.apply(this, arguments).then(function () {\n            return Promise.resolve({\n                inheritance: self._createContent({\n                    fillStructure: true,\n                    contentInStructure: '<span>New Column</span>',\n                })\n            });\n        });\n    },\n});\n\nvar TableCellText = AbstractNewBuildingBlock.extend({\n    type: 'text',\n    label: _lt('Text in Cell'),\n    className: 'o_web_studio_field_char',\n    hookAutoHeight: false,\n    hookClass: 'o_web_studio_hook_inline',\n    dropIn: 'td, th',\n    hookTag: 'span',\n    add: function () {\n        var self = this;\n        return this._super.apply(this, arguments).then(function () {\n            return Promise.resolve({\n                inheritance: self._createContent({\n                    content: '<span>New Text Block</span>',\n                })\n            });\n        });\n    },\n});\n\n\n// ----------- FIELD -----------\n/**\n * Defines the behavior of a field building block. It behaves by default by asking\n * the user to select a field in a model, and takes the first target as\n * destination node\n */\nvar AbstractFieldBlock = AbstractNewBuildingBlock.extend({\n    type: 'field',\n    add: function () {\n        var self = this;\n        return self._super.apply(this, arguments).then(function() {\n            return new Promise(function (resolve, reject) {\n                var field = {\n                    order: 'order',\n                    type: 'related',\n                    filters: { searchable: false },\n                filter: function (field) {\n                    // For single fields (i.e. NOT a table), forbid putting x2many's\n                    // Because it just doesn't make sense otherwise\n                    return ! _.contains(['one2many', 'many2many'], field.type);\n                }\n                };\n\n                var target = self.targets[0];\n                if (self._filterTargets) {\n                    target = self._filterTargets() || target;\n                }\n\n                var availableKeys = _.filter(self._getContextKeys(target.node), function (field) {\n                    // \"docs\" is a technical object referring to all records selected to issue the report for\n                    // it shouldn't be manipulated by the user\n                    return !!field.relation && field.name !== 'docs';\n                });\n                var fieldChain = [];\n                if (availableKeys.length) {\n                    fieldChain.push(_.first(availableKeys).name);\n                }\n                var dialog = new NewFieldDialog(self, 'record_fake_model', field, availableKeys, fieldChain).open();\n                dialog.on('field_default_values_saved', self, function (values) {\n                    if (values.related.split('.').length < 2) {\n                        Dialog.alert(self, _t('The record field name is missing'));\n                    } else {\n                        resolve({\n                            inheritance: self._dataInheritance(values),\n                        });\n                        dialog.close();\n                    }\n                });\n                dialog.on('closed', self, function () {\n                    reject();\n                });\n            });\n        });\n    },\n});\n\nvar BlockField = AbstractFieldBlock.extend({\n    label: _lt('Field'),\n    className: 'o_web_studio_field_many2one',\n    hookClass: 'o_web_studio_hook_field',\n    dropIn: '.page',\n    _dataInheritance: function (values) {\n        var $field = $('<span/>').attr('t-field', values.related);\n        if (values.type === 'binary') {\n            $field.attr('t-options-widget', '\"image\"');\n        }\n        var fieldHTML = $field.prop('outerHTML');\n\n        return this._createContent({\n            content: \"<div class='row'><div class='col'>\" + fieldHTML + \"</div></div>\",\n        });\n    },\n});\n\nvar InlineField = AbstractFieldBlock.extend({\n    label: _lt('Field'),\n    className: 'o_web_studio_field_many2one',\n    hookClass: 'o_web_studio_hook_inline',\n    hookAutoHeight: true,\n    dropIn: TextSelectorTags.split(',').join(filter + '|') + filter,\n    selectorSeparator: '|',\n    hookTag: 'span',\n    _dataInheritance: function (values) {\n        var $field = $('<span/>').attr('t-field', values.related);\n        if (values.type === 'binary') {\n            $field.attr('t-options-widget', '\"image\"');\n        }\n        var fieldHTML = $field.prop('outerHTML');\n        if (this.node.tag === 'td' || this.node.tag === 'th') {\n            return this._createReportTableColumn({\n                head: $('<span/>').text(values.string).prop('outerHTML'),\n                bodyLoop: fieldHTML,\n            });\n        } else {\n            return this._createContent({\n                content: fieldHTML,\n            });\n        }\n    },\n    _filterTargets: function () {\n        var self = this;\n        var target = this.targets[0];\n        if (this.targets.length > 1 && (target.node.tag === 'td' || target.node.tag === 'th')) {\n            target = _.find(this.targets, function (target) {\n                return self._findParentWithTForeach(target.node) ? true : false;\n            });\n        }\n        return target;\n    },\n});\n\nvar TableColumnField = AbstractFieldBlock.extend({\n    label: _lt('Field Column'),\n    className: 'o_web_studio_field_fa',\n    fa: ' fa-plus-square',\n    hookAutoHeight: true,\n    hookClass: 'o_web_studio_hook_table_column',\n    dropIn: 'tr',\n    _dataInheritance: function (values) {\n        var $field = $('<span/>').attr('t-field', values.related);\n        if (values.type === 'binary') {\n            $field.attr('t-options-widget', '\"image\"');\n        }\n        var fieldHTML = $field.prop('outerHTML');\n        if (this.node.tag === 'td' || this.node.tag === 'th') {\n            // add content either in looped cells, or if no loop in normal cells\n            var targetInLoop = _.find(this.targets, function (target) {\n                return this._findParentWithTForeach(target.node);\n            }.bind(this)) ? true : false;\n            return this._createReportTableColumn({\n                head: $('<span/>').text(values.string).prop('outerHTML'),\n                body: targetInLoop ? undefined : fieldHTML,\n                bodyLoop: targetInLoop ? fieldHTML : undefined,\n            });\n        } else {\n            return this._createContent({\n                contentInStructure: '<span><strong>' + values.string + ':</strong><br/></span>' + fieldHTML,\n                content: fieldHTML,\n            });\n        }\n    },\n    _filterTargets: function () {\n        var self = this;\n        var target = this.targets[this.targets.length - 1];\n        if (this.targets.length > 1) {\n            target = _.find(this.targets, function (target) {\n                return self._findParentWithTForeach(target.node) ? true : false;\n            });\n        }\n        return target;\n    },\n});\n\nvar TableCellField = AbstractFieldBlock.extend({\n    label: _lt('Field in Cell'),\n    className: 'o_web_studio_field_many2one',\n    hookAutoHeight: false,\n    hookClass: 'o_web_studio_hook_inline',\n    dropIn: 'td, th',\n    hookTag: 'span',\n    _dataInheritance: function (values) {\n        var $field = $('<span/>').attr('t-field', values.related);\n        if (values.type === 'binary') {\n            $field.attr('t-options-widget', '\"image\"');\n        }\n        var fieldHTML = $field.prop('outerHTML');\n        if (this.node.tag === 'td' || this.node.tag === 'th') {\n            return this._createReportTableColumn({\n                head: $('<span/>').text(values.string).prop('outerHTML'),\n                bodyLoop: fieldHTML,\n            });\n        } else {\n            return this._createContent({\n                contentInStructure: '<span><strong>' + values.string + ':</strong><br/></span>' + fieldHTML,\n                content: fieldHTML,\n            });\n        }\n    },\n    _filterTargets: function () {\n        var self = this;\n        var target = this.targets[0];\n        if (this.targets.length > 1) {\n            target = _.find(this.targets, function (target) {\n                return self._findParentWithTForeach(target.node) ? true : false;\n            }) ;\n        }\n        return target;\n    },\n});\n\nvar LabelledField = AbstractFieldBlock.extend({\n    label: _lt('Field & Label'),\n    className: 'o_web_studio_field_many2one',\n    hookClass: 'o_web_studio_hook_information',\n    dropColumns: [[0, 3], [0, 3], [0, 3], [0, 3]],\n    hookAutoHeight: false,\n    dropIn: '.page, .row > div.col*:empty',\n    _dataInheritance: function (values) {\n        var $field = $('<span/>').attr('t-field', values.related);\n        if (values.type === 'binary') {\n            $field.attr('t-options-widget', '\"image\"');\n        }\n        var fieldHTML = $field.prop('outerHTML');\n\n        return this._createContent({\n            contentInStructure: '<span><strong>' + values.string + ':</strong><br/></span>' + fieldHTML,\n            content: fieldHTML,\n        });\n    },\n});\n\n\n\n// ----------- OTHER -----------\n\nvar Image = AbstractNewBuildingBlock.extend({\n    type: 'image',\n    label: _lt('Image'),\n    dropIn: '.page',\n    className: 'o_web_studio_field_picture',\n    hookClass: 'o_web_studio_hook_picture',\n    add: function () {\n        var self = this;\n        return this._super.apply(this, arguments).then(function () {\n            var def = new Promise(function (resolve, reject) {\n                const dialog = new ComponentWrapper(this, MediaDialogWrapper, {\n                    onlyImages: true,\n                    save: el => {\n                        // el is a vanilla JS element\n                        // Javascript Element.src returns the full url (including protocol)\n                        // But we want only a relative path\n                        // https://www.w3schools.com/jsref/prop_img_src.asp\n                        // We indeed expect only one image at this point\n                        const value = el.attributes.src && el.attributes.src.value;\n                        resolve({\n                            inheritance: self._createContent({\n                                content: '<img class=\"img-fluid\" src=\"' + value + '\"/>',\n                            })\n                        });\n                    },\n                    close: () => {\n                        reject();\n                    }\n                });\n                dialog.mount(self.el);\n            });\n            return def;\n        });\n    },\n});\n\nvar BlockTitle = AbstractNewBuildingBlock.extend({\n    type: 'block_title',\n    label: _lt('Title Block'),\n    className: 'o_web_studio_field_char',\n    hookClass: 'o_web_studio_hook_title',\n    dropIn: '.page',\n    add: function () {\n        var self = this;\n        return this._super.apply(this, arguments).then(function () {\n            return Promise.resolve({\n                inheritance: [{\n                    content: '<div class=\"row\"><div class=\"col h2\"><span>New Title</span></div></div>',\n                    position: self.position,\n                    xpath: self.node.attrs['data-oe-xpath'],\n                    view_id: +self.node.attrs['data-oe-id'],\n                }],\n            });\n        });\n    },\n});\n\nvar BlockAddress = AbstractNewBuildingBlock.extend({\n    type: 'block_address',\n    label: _lt('Address Block'),\n    fa: 'fa-address-card',\n    className: 'o_web_studio_field_fa',\n    hookAutoHeight: false,\n    hookClass: 'o_web_studio_hook_address',\n    structureClass: 'address',\n    dropColumns: [[0, 5], [2, 5]],\n    add: function () {\n        var self = this;\n        var callersArguments = arguments;\n        return new Promise(function (resolve, reject) {\n            self._super.apply(self, callersArguments).then(function () {\n                var field = {\n                    order: 'order',\n                    type: 'related',\n                    filters: {},\n                    filter: function (field) {\n                        return field.type === 'many2one';\n                    },\n                    followRelations: function (field) {\n                        return field.type === 'many2one' && field.relation !== 'res.partner';\n                    },\n                };\n                var availableKeys = self._getContextKeys(self.node);\n                // TODO: maybe filter keys to only get many2one fields to res.partner?\n                // For reports, set the current model ('doc') by default\n                // in 'ModelFieldSelector' whenever available\n                var fieldChain = [];\n                if (availableKeys.length) {\n                    fieldChain.push(_.first(availableKeys).name);\n                }\n                var dialog = new NewFieldDialog(self, 'record_fake_model', field, availableKeys, fieldChain).open();\n                dialog.on('field_default_values_saved', self, function (values) {\n                    if (!_.contains(values.related, '.')) {\n                        Dialog.alert(self, _t('Please specify a field name for the selected model.'));\n                        return;\n                    }\n                    if (values.relation === 'res.partner') {\n                        resolve({\n                            inheritance: self._createContent({\n                                content: '<div t-field=\"' + values.related + '\" t-options-widget=\"\\'contact\\'\"/>',\n                            })\n                        });\n                        dialog.close();\n                    } else {\n                        Dialog.alert(self, _t('You can only display a user or a partner'));\n                    }\n                });\n                dialog.on('closed', self, function () {\n                    reject();\n                });\n            });\n        });\n    },\n});\n\nvar BlockTable = AbstractNewBuildingBlock.extend({\n    type: 'block_table',\n    label: _lt('Data table'),\n    fa: 'fa-th-list',\n    className: 'o_web_studio_field_fa',\n    hookClass: 'o_web_studio_hook_table',\n    dropIn: '.page',\n    add: function () {\n        var self = this;\n        var callersArguments = arguments;\n        return new Promise(function (resolve, reject) {\n            self._super.apply(self, callersArguments).then(function () {\n                var field = {\n                    order: 'order',\n                    type: 'related',\n                    filters: {},\n                    filter: function (field) {\n                        return field.type === 'many2one' || field.type === 'one2many' || field.type === 'many2many';\n                    },\n                    followRelations: function (field) {\n                        return field.type === 'many2one';\n                    },\n                };\n                var availableKeys = self._getContextKeys(self.node);\n                // For reports, set the current model ('doc') by default\n                // in 'ModelFieldSelector' whenever available\n                var fieldChain = [];\n                if (availableKeys.length) {\n                    fieldChain.push(_.first(availableKeys).name);\n                }\n                var dialog = new NewFieldDialog(self, 'record_fake_model', field, availableKeys, fieldChain).open();\n                dialog.on('field_default_values_saved', self, function (values) {\n                    if (values.type === 'one2many' || values.type === 'many2many') {\n                        resolve({\n                            inheritance: self._dataInheritance(values),\n                        });\n                        dialog.close();\n                    } else {\n                        Dialog.alert(self, _t('You need to use a many2many or one2many field to display a list of items'));\n                    }\n                });\n                dialog.on('closed', self, function () {\n                    reject();\n                });\n            });\n        });\n    },\n    _dataInheritance: function (values) {\n        var target = this.targets[0];\n        return [{\n            content:\n                '<table class=\"table o_report_block_table\">' +\n                '<thead>' +\n                '<tr>' +\n                '<th><span>Name</span></th>' +\n                '</tr>' +\n                '</thead>' +\n                '<tbody>' +\n                '<tr t-foreach=\"' + values.related + '\" t-as=\"table_line\">' +\n                '<td><span t-field=\"table_line.display_name\"/></td>' +\n                '</tr>' +\n                '</tbody>' +\n                '</table>',\n            position: target.position,\n            xpath: target.node.attrs['data-oe-xpath'],\n            view_id: +target.node.attrs['data-oe-id'],\n        }];\n    },\n});\n\nvar TableBlockTotal = AbstractNewBuildingBlock.extend({\n    type: 'block_total',\n    label: _lt('Subtotal & Total'),\n    fa: 'fa-money',\n    className: 'o_web_studio_field_fa',\n    dropIn: '.page',\n    hookClass: 'o_web_studio_hook_total',\n    dropColumns: [[0, 5], [2, 5]],\n    modelWhitelist: ['account.move', 'sale.order', 'purchase.order'],\n    add: function () {\n        var self = this;\n        var callersArguments = arguments;\n        return new Promise(function (resolve, reject) {\n            self._super.apply(self, callersArguments).then(function () {\n                var field = {\n                    order: 'order',\n                    type: 'related',\n                    filters: {},\n                    filter: function (field) {\n                        return field.type === 'many2one';\n                    },\n                    followRelations: function (field) {\n                        return field.type === 'many2one' && !self.modelWhitelist.includes(field.relation);\n                    },\n                };\n                var availableKeys = self._getContextKeys(self.node);\n                // For reports, set the current model ('doc') by default\n                // in 'ModelFieldSelector' whenever available\n                var fieldChain = [];\n                if (availableKeys.length) {\n                    fieldChain.push(_.first(availableKeys).name);\n                }\n                var dialog = new NewFieldDialog(self, 'record_fake_model', field, availableKeys, fieldChain).open();\n                dialog.on('field_default_values_saved', self, function (values) {\n                    resolve({\n                        inheritance: self._dataInheritance(values),\n                    });\n                    dialog.close();\n                });\n                dialog.on('closed', self, function () {\n                    reject();\n                });\n            });\n        });\n    },\n    _dataInheritance: function (values) {\n        var data = this._dataInheritanceValues(values);\n        return this._createContent({\n            contentInStructure:\n                '<table class=\"table table-sm\">' +\n                    `<t t-set=\"tax_totals\" t-value=\"${data.tax_totals}\"/>` +\n                    '<t t-call=\"account.document_tax_totals\"/>' +\n                '</table>'\n        });\n    },\n    _dataInheritanceValues: function (values) {\n        const tax_totals = `${values.related}.tax_totals`;\n        return { tax_totals };\n    },\n});\n\n\nreturn {\n    BlockText: BlockText,\n    InlineText: InlineText,\n    ColumnHalfText: ColumnHalfText,\n    ColumnThirdText: ColumnThirdText,\n    TableCellText: TableCellText,\n    BlockField: BlockField,\n    InlineField: InlineField,\n    TableColumnField: TableColumnField,\n    TableCellField: TableCellField,\n    LabelledField: LabelledField,\n    Image: Image,\n    BlockTitle: BlockTitle,\n    BlockAddress: BlockAddress,\n    BlockTable: BlockTable,\n    TableBlockTotal: TableBlockTotal,\n};\n\n});\n", "odoo.define('web_studio.reportNewComponentsRegistry', function (require) {\n\"use strict\";\n\nvar core = require('web.core');\nvar Registry = require('web.Registry');\nvar reportNewComponents = require('web_studio.reportNewComponents');\n\nvar _lt = core._lt;\n\nvar registry = new Registry();\n\nregistry\n    .add(_lt('Block'), [\n        reportNewComponents.BlockText,\n        reportNewComponents.BlockField,\n        reportNewComponents.BlockTitle,\n        reportNewComponents.LabelledField,\n        reportNewComponents.Image,\n        reportNewComponents.BlockAddress,\n    ])\n    .add(_lt('Inline'), [\n        reportNewComponents.InlineText,\n        reportNewComponents.InlineField,\n    ])\n    .add(_lt('Table'), [\n        reportNewComponents.BlockTable,\n        reportNewComponents.TableColumnField,\n        reportNewComponents.TableCellText,\n        reportNewComponents.TableCellField,\n        reportNewComponents.TableBlockTotal,\n    ])\n    .add(_lt('Column'), [\n        reportNewComponents.ColumnHalfText,\n        reportNewComponents.ColumnThirdText,\n    ]);\n\nreturn registry;\n\n});\n", "odoo.define('web_studio.view_components', function (require) {\n\"use strict\";\n\nvar config = require('web.config');\nvar core = require('web.core');\nvar Registry = require('web.Registry');\nvar Widget = require('web.Widget');\n\nvar _lt = core._lt;\n\nvar AbstractComponent = Widget.extend({\n    structure: false,\n    label: false,\n    description: false,\n    /**\n     * @override\n     */\n    start: function () {\n        var self = this;\n        this.$el.addClass('o_web_studio_component');\n        this.$el.data('structure', this.structure);\n        this.$el.text(this.label);\n        if (config.isDebug() && this.description) {\n            this.$el.addClass('o_web_studio_debug');\n            this.$el.append($('<div>')\n                .addClass('o_web_studio_component_description')\n                .text(this.description)\n            );\n        }\n        this.$el.draggable({\n            helper: 'clone',\n            opacity: 0.4,\n            scroll: false,\n            revert: 'invalid',\n            revertDuration: 200,\n            refreshPositions: true,\n            start: function (e, ui) {\n                ui.helper.data(self.$el.data());\n                ui.helper.addClass(\"ui-draggable-helper\");\n            }\n        });\n        return this._super.apply(this, arguments);\n    },\n});\nvar NotebookComponent = AbstractComponent.extend({\n    structure: 'notebook',\n    label: _lt('Tabs'),\n    type: 'tabs',\n    className: 'o_web_studio_field_tabs',\n});\nvar GroupComponent = AbstractComponent.extend({\n    structure: 'group',\n    label: _lt('Columns'),\n    type: 'columns',\n    className: 'o_web_studio_field_columns',\n});\nvar FilterComponent = AbstractComponent.extend({\n    structure: 'filter',\n    label: _lt('Filter'),\n    type: 'filter',\n    className: 'o_web_studio_filter',\n});\nvar FilterSeparatorComponent = AbstractComponent.extend({\n    structure: 'separator',\n    label: _lt('Separator'),\n    type: 'separator',\n    className: 'o_web_studio_filter_separator',\n});\nvar AbstractNewFieldComponent = AbstractComponent.extend({\n    structure: 'field',\n    type: false,\n    special: false,\n\n    /**\n     * @override\n     * @param {Object} attrs\n     */\n    init: function (parent, attrs) {\n        this._super(parent);\n        this.fieldAttrs = attrs;\n    },\n    /**\n     * @override\n     */\n    start: function () {\n        this.description = this.type;\n        this.$el.data('field_description', {\n            type: this.type,\n            field_description: 'New ' + this.label,\n            special: this.special,\n        });\n        this.$el.data('new_attrs', this.fieldAttrs);\n        return this._super.apply(this, arguments);\n    },\n});\nvar CharFieldComponent = AbstractNewFieldComponent.extend({\n    type: 'char',\n    label: _lt('Text'),\n    className: 'o_web_studio_field_char',\n});\nvar TextFieldComponent = AbstractNewFieldComponent.extend({\n    type: 'text',\n    label: _lt('Multiline Text'),\n    className: 'o_web_studio_field_text',\n});\nvar IntegerFieldComponent = AbstractNewFieldComponent.extend({\n    type: 'integer',\n    label: _lt('Integer'),\n    className: 'o_web_studio_field_integer',\n});\nvar DecimalFieldComponent = AbstractNewFieldComponent.extend({\n    type: 'float',\n    label: _lt('Decimal'),\n    className: 'o_web_studio_field_float',\n});\nvar HtmlFieldComponent = AbstractNewFieldComponent.extend({\n    type: 'html',\n    label: _lt('Html'),\n    className: 'o_web_studio_field_html',\n});\nvar MonetaryFieldComponent = AbstractNewFieldComponent.extend({\n    type: 'monetary',\n    label: _lt('Monetary'),\n    className: 'o_web_studio_field_monetary',\n});\nvar DateFieldComponent = AbstractNewFieldComponent.extend({\n    type: 'date',\n    label: _lt('Date'),\n    className: 'o_web_studio_field_date',\n});\nvar DatetimeFieldComponent = AbstractNewFieldComponent.extend({\n    type: 'datetime',\n    label: _lt('Date & Time'),\n    className: 'o_web_studio_field_datetime',\n});\nvar BooleanFieldComponent = AbstractNewFieldComponent.extend({\n    type: 'boolean',\n    label: _lt('Checkbox'),\n    className: 'o_web_studio_field_boolean',\n});\nvar SelectionFieldComponent = AbstractNewFieldComponent.extend({\n    type: 'selection',\n    label: _lt('Selection'),\n    className: 'o_web_studio_field_selection',\n});\nvar BinaryFieldComponent = AbstractNewFieldComponent.extend({\n    type: 'binary',\n    label: _lt('File'),\n    className: 'o_web_studio_field_binary',\n});\nvar Many2manyFieldComponent = AbstractNewFieldComponent.extend({\n    type: 'many2many',\n    label: _lt('Many2many'),\n    className: 'o_web_studio_field_many2many',\n});\nvar One2manyFieldComponent = AbstractNewFieldComponent.extend({\n    type: 'one2many',\n    label: _lt('One2many'),\n    className: 'o_web_studio_field_one2many',\n});\nconst LinesFieldComponent = AbstractNewFieldComponent.extend({\n    type: 'one2many',\n    label: _lt('Lines'),\n    className: 'o_web_studio_field_lines',\n    special: 'lines',\n});\nvar Many2oneFieldComponent = AbstractNewFieldComponent.extend({\n    type: 'many2one',\n    label: _lt('Many2one'),\n    className: 'o_web_studio_field_many2one',\n});\nvar ExistingFieldComponent = AbstractComponent.extend({\n    /**\n     * @override\n     * @param {Widget} parent\n     * @param {String} name\n     * @param {String} field_description\n     * @param {String} type\n     * @param {Boolean} store\n     * @param {Object} attrs\n     */\n    init: function (parent, name, field_description, type, store, attrs) {\n        this._super(parent);\n        this.structure = 'field';\n        this.label = field_description;\n        this.description = name;\n        this.className = 'o_web_studio_field_' + type;\n        this.type = type;\n        this.store = store;\n        this.fieldAttrs = attrs;\n    },\n    /**\n     * @override\n     */\n    start: function () {\n        const newAttrs = Object.assign(this.fieldAttrs || {}, {\n            name: this.description,\n            label: this.label,\n            type: this.type,\n            store: this.store ? \"true\":\"false\",\n        });\n        this.$el.data('new_attrs', newAttrs);\n        this.$el.attr(\"title\", this.label);\n        return this._super.apply(this, arguments);\n    },\n});\nvar AbstractNewWidgetComponent = AbstractNewFieldComponent.extend({\n    attrs: {},\n    /**\n     * @override\n     */\n    start: function () {\n        const newAttrs = Object.assign(this.fieldAttrs || {}, this.attrs);\n        this.$el.data('new_attrs', newAttrs);\n        return this._super.apply(this, arguments);\n    },\n});\nvar ImageWidgetComponent = AbstractNewWidgetComponent.extend({\n    type: 'binary',\n    label: _lt('Image'),\n    className: 'o_web_studio_field_picture',\n    attrs: {widget: 'image', options: '{\"size\": [0, 90]}'},\n});\nvar TagWidgetComponent = AbstractNewWidgetComponent.extend({\n    type: 'many2many',\n    label: _lt('Tags'),\n    className: 'o_web_studio_field_tags',\n    attrs: {widget: 'many2many_tags'},\n});\nvar PriorityWidgetComponent = AbstractNewWidgetComponent.extend({\n    type: 'selection',\n    label: _lt('Priority'),\n    className: 'o_web_studio_field_priority',\n    attrs: {widget: 'priority'},\n});\nvar SignatureWidgetComponent = AbstractNewWidgetComponent.extend({\n    type: 'binary',\n    label: _lt('Signature'),\n    className: 'o_web_studio_field_signature',\n    attrs: {widget: 'signature'},\n});\nvar RelatedFieldComponent = AbstractNewFieldComponent.extend({\n    type: 'related',\n    label: _lt('Related Field'),\n    className: 'o_web_studio_field_related',\n});\nvar form_component_widget_registry = new Registry();\nform_component_widget_registry\n    .add('form_components', [\n        NotebookComponent,\n        GroupComponent,\n    ])\n    .add('search_components', [\n        FilterComponent,\n        FilterSeparatorComponent,\n    ])\n    .add('new_field', [\n        CharFieldComponent,\n        TextFieldComponent,\n        IntegerFieldComponent,\n        DecimalFieldComponent,\n        HtmlFieldComponent,\n        MonetaryFieldComponent,\n        DateFieldComponent,\n        DatetimeFieldComponent,\n        BooleanFieldComponent,\n        SelectionFieldComponent,\n        BinaryFieldComponent,\n        LinesFieldComponent,\n        One2manyFieldComponent,\n        Many2oneFieldComponent,\n        Many2manyFieldComponent,\n        ImageWidgetComponent,\n        TagWidgetComponent,\n        PriorityWidgetComponent,\n        SignatureWidgetComponent,\n        RelatedFieldComponent,\n    ])\n    .add('existing_field', ExistingFieldComponent);\n\nreturn {\n    registry: form_component_widget_registry,\n};\n\n});\n", "odoo.define('web_studio.ViewEditorManager', function (require) {\n\"use strict\";\n\nconst { ComponentWrapper, WidgetAdapterMixin } = require('web.OwlCompatibility');\nvar core = require('web.core');\nvar Dialog = require('web.Dialog');\nvar dom = require('web.dom');\nvar framework = require('web.framework');\nvar session = require('web.session');\nconst { processArch } = require(\"@web/legacy/legacy_load_views\");\n\nvar AbstractEditorManager = require('web_studio.AbstractEditorManager');\nvar bus = require('web_studio.bus');\n\nvar SearchEditor = require('web_studio.SearchEditor');\nvar SearchRenderer = require('web_studio.SearchRenderer');\n\nvar FieldSelectorDialog = require('web_studio.FieldSelectorDialog');\nvar NewButtonBoxDialog = require('web_studio.NewButtonBoxDialog');\nvar NewFieldDialog = require('web_studio.NewFieldDialog');\nvar utils = require('web_studio.utils');\nconst { ViewEditorSidebar } = require('@web_studio/legacy/js/views/view_editor_sidebar');\nconst viewUtils = require(\"web.viewUtils\");\n\nconst { computeReportMeasures } = require(\"@web/views/utils\");\nconst { evaluateExpr } = require(\"@web/core/py_js/py\");\nconst { registry } = require(\"@web/core/registry\");\nconst { SearchModel } = require(\"@web/search/search_model\");\nconst { StudioView } = require(\"@web_studio/client_action/studio_view\");\n\nconst wrapperRegistry = registry.category(\"wowl_editors_wrappers\");\nconst editorsRegistry = registry.category(\"studio_editors\");\nconst viewRegistry = registry.category(\"views\");\n\nconst { resetViewCompilerCache, getModifier } = require(\"@web/views/view_compiler\");\nconst { extendEnv } = require('@web_studio/client_action/view_editors/utils')\nconst { getNodesFromXpath, getLegacyNode, xpathToLegacyXpathInfo, serializeXmlToString, parseStringToXml, nodeStudioXpathSymbol } = require('@web_studio/client_action/view_editors/xml_utils')\n\nvar _t = core._t;\nvar QWeb = core.qweb;\n\nvar Editors = {\n    search: SearchEditor,\n};\n\nclass EditorWrapper extends ComponentWrapper {\n    handleDrop() {\n        return this.componentRef.comp &&\n            this.componentRef.comp.handleDrop(...arguments);\n    }\n    highlightNearestHook() {\n        return this.componentRef.comp &&\n            this.componentRef.comp.highlightNearestHook(...arguments);\n    }\n    setSelectable() {\n        return this.componentRef.comp &&\n            this.componentRef.comp.setSelectable(...arguments);\n    }\n    unselectedElements() {\n        return this.componentRef.comp &&\n            this.componentRef.comp.unselectedElements(...arguments);\n    }\n}\n\nclass GenericWowlEditor extends EditorWrapper {\n    setup() {\n        super.setup();\n        this.state = {\n            getFieldNames: () => [],\n        }\n    }\n    getLocalState() {}\n    setLocalState() {}\n    unselectedElements() {}\n    handleDrop() {}\n    highlightNearestHook() {}\n    setSelectable() {}\n}\n\nfunction getX2MFullXpath(x2mPathsInfos) {\n    return x2mPathsInfos.map(info => info.xpath).join(\"/\");\n}\n\n/**\n * Returns the arch + position of the subview\n *\n * @param {String} mainArch\n * @param {String} xpathToField\n * @param {String} viewType\n * @param {boolean} throwIfNotFound\n * @returns {null|{position: number, arch: string}}\n */\nfunction getSubArch(mainArch, xpathToField, viewType, throwIfNotFound=true) {\n    let xpathToArch;\n    if (viewType === \"list\") {\n        xpathToArch = \"/tree\";\n    } else {\n        xpathToArch = `/${viewType}`;\n    }\n    xpathToArch = `${xpathToField}${xpathToArch}`;\n\n    const nodes = getNodesFromXpath(xpathToArch, parseStringToXml(mainArch));\n    const index = nodes.findIndex(node => !getModifier(node, \"invisible\"));\n    const node = nodes[index];\n    if (throwIfNotFound && !node) {\n        throw new Error(`Single sub-view arch not found for xpath: ${xpathToArch}`);\n    } else if (node && !node.getAttribute(\"studio_subview_inlined\")) {\n        return {\n            arch: serializeXmlToString(node),\n            position: index + 1,\n        };\n    }\n    return null;\n}\n\nasync function wowlCreateInlineView(env, { subViewType, viewId, fullXpath, subViewRef, resModel, fieldName }) {\n    const { rpc, user } = env.services;\n    subViewType = subViewType === 'list' ? 'tree' : subViewType;\n    // We build the correct xpath if we are editing a 'sub' subview\n    // Use specific view if available in context\n    // We write views in the base language to make sure we do it on the source term field\n    // of ir.ui.view\n    const context = { ...user.context, lang: false, studio: true };\n    if (subViewRef) {\n        context[`${subViewType}_view_ref`] = subViewRef;\n    }\n\n    const studioViewArch = await rpc('/web_studio/create_inline_view', {\n        model: resModel,\n        view_id: viewId,\n        field_name: fieldName,\n        subview_type: subViewType,\n        subview_xpath: fullXpath,\n        context,\n    });\n    return studioViewArch;\n}\n\nvar ViewEditorManager = AbstractEditorManager.extend(WidgetAdapterMixin, {\n    custom_events: _.extend({}, AbstractEditorManager.prototype.custom_events, {\n        approval_archive: '_onApprovalArchive',\n        approval_change: '_onApprovalChange',\n        approval_condition: '_onApprovalCondition',\n        approval_group_change: '_onApprovalGroupChange',\n        approval_responsible_change: '_onApprovalResponsibleChange',\n        approval_new_rule: '_onApprovalNewRule',\n        default_value_change: '_onDefaultValueChange',\n        email_alias_change: '_onEmailAliasChange',\n        field_edition: '_onFieldEdition',\n        field_renamed: '_onFieldRenamed',\n        open_defaults: '_onOpenDefaults',\n        open_field_form: '_onOpenFieldForm',\n        open_record_form_view: '_onOpenRecordFormView',\n        toggle_form_invisible: '_onShowInvisibleToggled',\n    }),\n    /**\n     * The init always takes the main view's descriptions as parameters.\n     * If we are editing a nested x2m field, the ViewManager's properties are changed\n     * in order to target the right field and the right view.\n     *\n     * @override\n     * @param {Widget} parent\n     * @param {Object} params\n     * @param {Object} params.action\n     * @param {Object} params.fields_view\n     * @param {string} params.viewType\n     * @param {Object} [params.chatter_allowed]\n     * @param {String} [params.controllerState]\n     * @param {Object} [params.studio_view_id]\n     * @param {Object} [params.studio_view_arch]\n     */\n    init: function (parent, params) {\n        this._super.apply(this, arguments);\n        this.wowlEnv = params.wowlEnv;\n        this.viewDescriptions = params.viewDescriptions;\n\n        const { resId, resIds } = params.controllerState || {};\n        this.resId = resId;\n        this.resIds = resIds;\n\n        this.action = params.action;\n\n        this.fields_view = params.fields_view;\n        this.fields = this._processFields(this.viewDescriptions.fields);\n\n        this.model_name = this.fields_view.model;\n        this.view_type = params.viewType;\n        this.mainViewType = this.view_type;\n        this.view_id = this.fields_view.view_id;\n\n        this.studio_view_id = params.studio_view_id;\n        this.studio_view_arch = params.studio_view_arch;\n\n        this.isEditingX2m = params.x2mEditorPath && params.x2mEditorPath.length;\n        if (this.isEditingX2m) {\n            this.x2mEditorPath = params.x2mEditorPath;\n            this.chatter_allowed = false;\n\n            const currentX2m = this.x2mEditorPath[this.x2mEditorPath.length - 1];\n            this.currentX2m = currentX2m;\n\n            this.x2mField = currentX2m.x2mField;\n            this.x2mViewType = currentX2m.x2mViewType;\n            this.x2mModel = currentX2m.x2mModel;\n\n            this.view_type = this.x2mViewType;\n            this.x2mViewParams = currentX2m.x2mViewParams;\n        } else {\n            this.chatter_allowed = params.chatter_allowed || false;\n            this.controllerState = params.controllerState;\n        }\n\n        this.renamingAllowedFields = []; // those fields can be renamed\n\n        this.expr_attrs = {\n            'field': ['name'],\n            'label': ['for'],\n            'page': ['name'],\n            'group': ['name'],\n            'div': ['name'],\n            'filter': ['name'],\n            'button': ['name'],\n        };\n    },\n\n    destroy() {\n        WidgetAdapterMixin.destroy.call(this);\n        this._super();\n    },\n\n    on_attach_callback() {\n        WidgetAdapterMixin.on_attach_callback.call(this);\n        this._super();\n    },\n\n    on_detach_callback() {\n        WidgetAdapterMixin.on_detach_callback.call(this);\n        this._super();\n    },\n\n    //--------------------------------------------------------------------------\n    // Public\n    //--------------------------------------------------------------------------\n\n    /**\n     * @param {Object} options\n     * @returns {Promise}\n     */\n    updateEditor: function (options) {\n        var self = this;\n        var rendererScrollTop = this.$el.scrollTop();\n        var localState = false;\n        if (this.editor && this.editor.getLocalState) {\n            localState = this.editor.getLocalState();\n        }\n        var oldEditor = this.editor;\n\n        return this._instantiateEditor(options).then(function (editor) {\n            var fragment = document.createDocumentFragment();\n            let prom = undefined;\n            if (editor instanceof ComponentWrapper) {\n                prom = editor.mount(fragment);\n            } else {\n                prom = editor.appendTo(fragment);\n            }\n            return prom.then(function () {\n                dom.append(self.$('.o_web_studio_view_renderer'), [fragment], {\n                    in_DOM: self.isInDOM,\n                    callbacks: [{ widget: editor }],\n                });\n                self.editor = editor;\n                oldEditor.destroy();\n\n                // restore previous state\n                self.$el.scrollTop(rendererScrollTop);\n                if (localState) {\n                    self.editor.setLocalState(localState);\n                }\n            }).guardedCatch(function (e) {\n                self.trigger_up('studio_error', {error: 'view_rendering'});\n                self._undo(null, true);\n            });\n        });\n    },\n\n    //--------------------------------------------------------------------------\n    // Private\n    //--------------------------------------------------------------------------\n\n    /**\n     * @private\n     * @param {Object} data\n     */\n    _addAvatarImage: function (data) {\n        this._do({\n            type: 'avatar_image',\n            field: data.field,\n        });\n    },\n    /**\n     * Enable approval for a <button> node as well as all other nodes of the\n     * same type and the same name in the view; this is done server-side.\n     * @private\n     * @param {Object} data\n     */\n    _addApproval: async function (data) {\n        const attrs = data.node.attrs;\n        // enabling approval on node\n        // need to enable it on all similar nodes silently in a single op\n        await this._do({\n            type: 'enable_approval',\n            model: this.model_name,\n            btn_type: attrs.type,\n            btn_name: attrs.name,\n            view_id: this.view_id,\n            enable: data.enable,\n        })\n    },\n    /**\n     * @private\n     * @param {String} type\n     */\n    _addButton: function (data) {\n        var modelName = this.x2mModel ? this.x2mModel : this.model_name;\n        var dialog = new NewButtonBoxDialog(this, modelName).open();\n        dialog.on('saved', this, function (result) {\n            if (data.add_buttonbox) {\n                this.operations.push({type: 'buttonbox'});\n            }\n            this._do({\n                type: data.type,\n                target: {\n                    tag: 'div',\n                    attrs: {\n                        class: 'oe_button_box',\n                    }\n                },\n                position: 'inside',\n                node: {\n                    tag: 'button',\n                    field: result.field_id,\n                    string: result.string,\n                    attrs: {\n                        class: 'oe_stat_button',\n                        icon: result.icon,\n                    }\n                },\n            });\n        });\n    },\n    /**\n     * @private\n     * @param {Object} data\n     */\n    _addChatter: function (data) {\n        this._do({\n            type: 'chatter',\n            model: this.model_name,\n            remove_activity_ids: data.remove_activity_ids,\n            remove_message_ids: data.remove_message_ids,\n            remove_follower_ids: data.remove_follower_ids,\n        });\n    },\n    /**\n     * @private\n     * @param {String} type\n     * @param {Object} node\n     * @param {Object} xpath_info\n     * @param {String} position\n     * @param {String} tag\n     */\n    _addElement: function (type, node, xpath_info, position, tag) {\n        this._do({\n            type: type,\n            target: {\n                tag: node.tag,\n                attrs: _.pick(node.attrs, this.expr_attrs[node.tag]),\n                xpath_info: xpath_info,\n            },\n            position: position,\n            node: {\n                tag: tag,\n                attrs: {\n                    name: 'studio_' + tag + '_' + utils.randomString(5),\n                }\n            },\n        });\n    },\n    /**\n     * @private\n     * @param {String} type\n     * @param {Object} field_description\n     * @param {Object} node\n     * @param {Object} xpath_info\n     * @param {String} position\n     * @param {Object} new_attrs\n     * @param {Object} data\n     */\n    _addField: function (type, field_description, node, xpath_info, position, new_attrs, data) {\n        var self = this;\n        var def_field_values;\n        var dialog;\n\n        var openCurrencyCreationDialog = function (relatedCurrency, resolve) {\n            var msg = _t(\"In order to use a monetary field, you need a currency field on the model. \" +\n                \"Do you want to create a currency field first? You can make this field invisible afterwards.\");\n            return Dialog.confirm(this, msg, {\n                confirm_callback: function () {\n                    new_attrs = {};\n                    // modifies the current operation in place to create a\n                    // currency field instead\n                    field_description = {\n                        default_value: session.company_currency_id,\n                        field_description: 'Currency',\n                        model_name: modelName,\n                        name: 'x_currency_id',\n                        relation: 'res.currency',\n                        type: 'many2one',\n                    };\n                    if (relatedCurrency) {\n                        field_description.related = relatedCurrency;\n                    }\n                    resolve();\n                },\n            });\n        };\n\n        // The field doesn't exist: field_description is the definition of the new field.\n        // No need to have field_description of an existing field\n        if (field_description) {\n            var modelName = this.x2mModel ? this.x2mModel : this.model_name;\n            // \"extend\" avoids having the same reference in \"this.operations\"\n            // We can thus modify it without editing previous existing operations\n            field_description = _.extend({}, field_description, {\n                name: `x_studio_${field_description.type}_field_${utils.randomString(5)}`,\n                model_name: modelName,\n            });\n            // Fields with requirements\n            if (field_description.type === 'selection' && new_attrs.widget === 'priority') {\n                // should not be translated at the creation\n                field_description.selection = [\n                    ['0', \"Normal\"],\n                    ['1', \"Low\"],\n                    ['2', \"High\"],\n                    ['3', \"Very High\"],\n                ];\n            } else if (field_description.special === 'lines') {\n                // there's nothing to do, the operation will be fully handled server-side\n            } else if (_.contains(['selection', 'one2many', 'many2one', 'many2many', 'related'], field_description.type)) {\n                def_field_values = new Promise(function (resolve, reject) {\n                    var prom;\n                    if (field_description.type === 'one2many') {\n                        // check for existing m2o fields for current model\n                        var modelName = self.x2mModel ? self.x2mModel : self.model_name;\n                        prom = self._rpc({\n                            model:\"ir.model.fields\",\n                            method: \"search_count\",\n                            args: [[['relation', '=', modelName], ['ttype', '=', 'many2one'], [\"store\", \"=\", true]]],\n                        });\n                    } else {\n                        prom = Promise.resolve(true);\n                    }\n                    prom.then(function (openFieldDialog) {\n                        if (!openFieldDialog) {\n                            // In case of o2m fields, if there's no m2o field available, display a warning instead\n                            var $message = $(QWeb.render('web_studio.FieldOne2manyWarning'));\n                            dialog = Dialog.alert(self, '', {\n                                $content: $('<main/>', {\n                                    role: 'alert',\n                                    html: $message,\n                                }),\n                                title: _t(\"No related many2one fields found\"),\n                            });\n                            dialog.on('closed', self, function () {\n                                reject();\n                            });\n                        } else {\n                            // open dialog to precise the required fields for this field\n                            dialog = new NewFieldDialog(self, modelName, field_description, _.filter(self.fields, {type: 'many2one'})).open();\n                            dialog.on('field_default_values_saved', self, function (values) {\n                                if (values.related && values.type === 'monetary') {\n                                    if (self._hasCurrencyField()) {\n                                        resolve(values);\n                                        dialog.close();\n                                    } else {\n                                        var relatedCurrency = values._currency;\n                                        delete values._currency;\n                                        var currencyDialog = openCurrencyCreationDialog(relatedCurrency, resolve);\n                                        currencyDialog.on('closed', self, function () {\n                                            dialog.close();\n                                        });\n                                    }\n                                } else {\n                                    resolve(values);\n                                    dialog.close();\n                                }\n                            });\n                            dialog.on('closed', self, function () {\n                                reject();\n                            });\n                        }\n                    });\n                });\n            } else if (field_description.type === 'monetary') {\n                def_field_values = new Promise(function (resolve, reject) {\n                    if (self._hasCurrencyField()) {\n                        resolve();\n                    } else {\n                        dialog = openCurrencyCreationDialog(null, resolve);\n                        dialog.on('closed', self, function () {\n                            reject();\n                        });\n                    }\n                });\n            } else if (field_description.type === 'integer') {\n                field_description.default_value = '0'\n            }\n        }\n        // When the field values is selected, close the dialog and update the view\n        Promise.resolve(def_field_values).then(function (values) {\n            framework.blockUI();\n            if (field_description) {\n                self.renamingAllowedFields.push(field_description.name);\n            }\n            if (data.add_statusbar) {\n                self.operations.push({type: 'statusbar'});\n            }\n            var target = data.target || {\n                tag: node.tag,\n                attrs: _.pick(node.attrs, self.expr_attrs[node.tag]),\n                xpath_info: xpath_info,\n            };\n            self._do({\n                type: type,\n                target: target,\n                position: position,\n                node: {\n                    tag: 'field',\n                    attrs: new_attrs,\n                    field_description: _.extend(field_description, values),\n                },\n            }).then(function () {\n                framework.unblockUI();\n                if (self.editor.selectField && field_description) {\n                    self.editor.selectField(field_description.name);\n                }\n            }).guardedCatch(framework.unblockUI);\n        }).guardedCatch(function () {\n            self.updateEditor();\n        });\n    },\n    /**\n     * @private\n     * @param {String} type\n     * @param {Object} node\n     * @param {Object} xpath_info\n     * @param {String} position\n     * @param {Object} new_attrs\n     */\n    _addFilter: function (type, node, xpath_info, position, new_attrs) {\n        this._do({\n            type: type,\n            target: {\n                tag: node.tag,\n                attrs: _.pick(node.attrs, this.expr_attrs[node.tag]),\n                xpath_info: xpath_info,\n            },\n            position: position,\n            node: {\n                tag: 'filter',\n                attrs: new_attrs,\n            },\n        });\n    },\n    /**\n     * @private\n     */\n    _addKanbanDropdown: function () {\n        this._do({\n            type: 'kanban_dropdown',\n        });\n    },\n    /**\n     * @private\n     * @param {string} type\n     */\n    _editKanbanCover: function (type) {\n        if (type === 'kanban_set_cover') {\n            var compatibleFields = _.pick(this.fields, function (field) {\n               return field.type === \"many2one\" && field.relation === \"ir.attachment\";\n            });\n            var dialog = new FieldSelectorDialog(this, compatibleFields, true).open();\n            dialog.on('confirm', this, function (field) {\n                this._do({\n                    type: type,\n                    field: field,\n                });\n            });\n        }\n        if (type === 'remove') {\n            var fieldToRemove = _.pick(this.view.fieldsInfo[this.view_type], function (field) {\n                return field.widget === \"attachment_image\";\n            });\n\n            this._do({\n                type: type,\n                target: {\n                    tag: 'field',\n                    attrs: {name: _.keys(fieldToRemove)[0]},\n                    extra_nodes: [{\n                        tag: \"a\",\n                        attrs: {\n                            type: 'set_cover',\n                        },\n                    }],\n                },\n            });\n        }\n    },\n    /**\n     * @private\n     * @param {Object} data\n     */\n    _addKanbanPriority: function (data) {\n        this._do({\n            type: 'kanban_priority',\n            field: data.field,\n        });\n    },\n    /**\n     * @private\n     * @param {Object} data\n     */\n    _addKanbanImage: function (data) {\n        this._do({\n            type: 'kanban_image',\n            field: data.field,\n        });\n    },\n    /**\n     * @private\n     * @param {String} type\n     * @param {Object} node\n     * @param {Object} xpath_info\n     * @param {String} position\n     */\n    _addPage: function (type, node, xpath_info, position) {\n        this._do({\n            type: type,\n            target: {\n                tag: node.tag,\n                attrs: _.pick(node.attrs, this.expr_attrs[node.tag]),\n                xpath_info: xpath_info,\n            },\n            position: position,\n            node: {\n                tag: 'page',\n                attrs: {\n                    string: 'New Page',\n                    name: 'studio_page_' + utils.randomString(5),\n                }\n            },\n        });\n    },\n    /**\n     * @private\n     * @param {String} type\n     * @param {Object} node\n     * @param {Object} xpath_info\n     * @param {String} position\n     */\n    _addSeparator: function (type, node, xpath_info, position) {\n        this._do({\n            type: type,\n            target: {\n                tag: node.tag,\n                attrs: _.pick(node.attrs, this.expr_attrs[node.tag]),\n                xpath_info: xpath_info,\n            },\n            position: position,\n            node: {\n                tag: 'separator',\n                attrs: {\n                    name: 'studio_separator_' + utils.randomString(5),\n                },\n            },\n        });\n    },\n    /**\n     * @private\n     * @param {string} type operation type\n     * @param {integer[]} fieldIDs\n     */\n    _changeMapPopupFields: function (type, fieldIDs) {\n        this._do({\n            type: 'map_popup_fields',\n            target: {\n                operation_type: type,\n                field_ids: fieldIDs,\n            }\n        });\n    },\n    /**\n     * @private\n     * @param {string} type operation type\n     * @param {integer[]} fieldIDs\n     */\n    _changePivotMeasuresFields(type, fieldIDs) {\n        framework.blockUI();\n        this._do({\n            type: 'pivot_measures_fields',\n            target: {\n                operation_type: type,\n                field_ids: fieldIDs,\n            }\n        }).finally(framework.unblockUI);\n    },\n    /**\n     * @private\n     * @param {string} type operation type\n     * @param {object} data\n     */\n    _changeGraphPivotGroupbysFields(type, data) {\n        framework.blockUI();\n        this._do({\n            type: 'graph_pivot_groupbys_fields',\n            target: {\n                operation_type: data.options.operationType,\n                field_names: data.options.name,\n                old_field_names: data.options.oldname,\n                view_type: data.options.viewType,\n                field_type: data.options.type,\n            }\n        }).finally(framework.unblockUI);\n    },\n    /**\n     * @override\n     */\n    _applyChangeHandling: async function (result, opID) {\n        var self = this;\n        var prom = Promise.resolve();\n\n        const { models, studio_view_id, views } = result;\n        if (!views) {\n            // the operation can't be applied\n            this.trigger_up('studio_error', {error: 'wrong_xpath'});\n            return this._undo(opID, true).then(function () {\n                return Promise.reject();\n            });\n        }\n        // the studio_view could have been created at the first edition so\n        // studio_view_id must be updated (but /web_studio/edit_view_arch\n        // doesn't return the view id)\n        if (studio_view_id) {\n            this.studio_view_id = studio_view_id;\n        }\n        await this._updateLegacyArchState(models, views);\n        return prom.then(self.updateEditor.bind(self));\n    },\n    /**\n     * Find a currency field on the current model ; a monetary field can not be\n     * added if such a field does not exist on the model.\n     *\n     * @private\n     * @return {boolean} the presence of a currency field\n     */\n    _hasCurrencyField: function () {\n        var currencyField = _.find(this.fields, function (field) {\n            return field.type === 'many2one' && field.relation === 'res.currency' &&\n                (field.name === 'currency_id' || field.name === 'x_currency_id');\n        });\n        return !!currencyField;\n    },\n    /**\n     * @override\n     * @param {Object} [lastOp]\n     */\n    _cleanOperationsStack: function (lastOp) {\n        // As the studio view arch is stored in this widget, if this view\n        // is updated directly with the XML editor, the arch should be updated.\n        // The operations may not have any sense anymore so they are dropped.\n        if (lastOp && lastOp.view_id === this.studio_view_id) {\n            this.studio_view_arch = lastOp.new_arch;\n            this._super.apply(this, arguments);\n        }\n    },\n    /**\n     * @override\n     */\n    _do: function (op) {\n        // If we are editing an x2m field, we specify the xpath needed in front\n        // of the one generated by the default route.\n        // we also replace the `indice` of the view by the subView position\n        if (this.x2mField && op.target) {\n            this._setSubViewXPath(op);\n            const { type, position } = op.target.subview_xpath.match(/\\/(?<type>\\w+)\\[(?<position>\\d+)]$/).groups;\n            if (op.target.xpath_info && op.target.xpath_info[0].tag === type) {\n                op.target.xpath_info[0].indice = parseInt(position);\n            }\n        }\n\n        return this._super.apply(this, arguments);\n    },\n    /**\n     * @private\n     * @param {String} type\n     * @param {Object} node\n     * @param {Object} xpath_info\n     * @param {Object} new_attrs\n     */\n    _editElementAttributes: function (type, node, xpath_info, new_attrs) {\n        var newOp = {\n            type: type,\n            target: {\n                tag: node.tag,\n                attrs: _.pick(node.attrs, this.expr_attrs[node.tag]),\n                xpath_info: xpath_info,\n            },\n            position: 'attributes',\n            node: node,\n            new_attrs: new_attrs,\n        };\n        if (node.tag === 'field' && new_attrs.string &&\n            _.contains(this.renamingAllowedFields, node.attrs.name)) {\n            if (this.x2mField) {\n                this._setSubViewXPath(newOp);\n            }\n            this.operations.push(newOp);\n\n            // find a new name that doesn't exist yet, acording to the label\n            var baseName = 'x_studio_' + this._slugify(new_attrs.string);\n            var newName = baseName;\n            var index = 1;\n            while (newName in this.fields) {\n                newName = baseName + '_' + index;\n                index++;\n            }\n\n            this._renameField(node.attrs.name, newName);\n        } else {\n            this._do(newOp);\n        }\n    },\n    _editField(modelName, fieldName, values, forceEdit) {\n        return this._rpc({\n            route: '/web_studio/edit_field',\n            params: {\n                model_name: modelName,\n                field_name: fieldName,\n                values: values,\n                force_edit: forceEdit,\n            }\n        })\n    },\n    /**\n     * @override\n     */\n    _editView: async function (view_id, studio_view_arch, operations) {\n        core.bus.trigger('clear_cache');\n        return this._rpc({\n            route: '/web_studio/edit_view',\n            params: {\n                view_id: view_id,\n                studio_view_arch: studio_view_arch,\n                operations: operations,\n                model: this.x2mModel ? this.x2mModel : this.model_name,\n                // We write views in the base language to make sure we do it on the source term field\n                // of ir.ui.view\n                context: _.extend({}, session.user_context, {lang: false}, {studio: true}),\n            },\n        });\n    },\n    /**\n     * @override\n     */\n    _editViewArch: async function (view_id, view_arch) {\n        core.bus.trigger('clear_cache');\n        return this._rpc({\n            route: '/web_studio/edit_view_arch',\n            params: {\n                view_id: view_id,\n                view_arch: view_arch,\n                // We write views in the base language to make sure we do it on the source term field\n                // of ir.ui.view\n                context: _.extend({}, session.user_context, {lang: false}),\n            },\n        });\n    },\n    /**\n     * @private\n     * @param {String} type\n     * @param {Object} new_attrs\n     */\n    _editViewAttributes: function (type, new_attrs) {\n        this._do({\n            type: type,\n            target: {\n                tag: this.view_type === 'list' ? 'tree' : this.view_type,\n                isSubviewAttr: true,\n            },\n            position: 'attributes',\n            new_attrs: new_attrs,\n        });\n    },\n    /**\n     * Fetch the full spec of the approval rules for a specific\n     * action on the model. This is used by the sidebar to display the\n     * approval rules on a <button> node.\n     * @private\n     * @param {String} model_name\n     * @param {String} method\n     * @param {String} action\n     * @returns {Promise}\n     */\n    _getApprovalSpec: async function (model_name, method, action) {\n        const spec = await this._rpc({\n            model: 'studio.approval.rule',\n            method: 'get_approval_spec',\n            args: [model_name, method, action],\n            kwargs: { res_id: false },\n        });\n        return {approvalData: spec};\n    },\n    /**\n     * @private\n     * @param {String} model_name\n     * @param {String} field_name\n     * @returns {Promise}\n     */\n    _getDefaultValue: function (model_name, field_name) {\n        return this._rpc({\n            route: '/web_studio/get_default_value',\n            params: {\n                model_name: model_name,\n                field_name: field_name,\n            },\n        });\n    },\n    /**\n     * @private\n     */\n    _getDefaultSidebarMode: function () {\n        return _.contains(['form', 'list', 'search'], this.view_type) ? 'new' : 'view';\n    },\n    /**\n     * @private\n     * @param {String} model_name\n     * @returns {Promise}\n     */\n    _getEmailAlias: function (model_name) {\n        return this._rpc({\n            route: '/web_studio/get_email_alias',\n            params: {\n                model_name: model_name,\n            },\n        });\n    },\n    /**\n     * @private\n     * @returns {boolean}\n     */\n    _getShowInvisible() {\n        return Boolean(\n            this.sidebar &&\n            this.sidebar.state &&\n            this.sidebar.state.show_invisible\n        );\n    },\n    /**\n     * Makes a fields_get onto the current x2m model\n     * @private\n     */\n    async _getProcessedX2mFields() {\n        const fields = await this._rpc({\n            model: this.x2mModel,\n            method: 'fields_get',\n        })\n        return this._processFields(fields);\n    },\n    /**\n     * @override\n     * @param {Object} [params]\n     * @param {Object} [params.node] mandatory if mode \"properties\"\n     */\n    _getSidebarState: function (mode, params) {\n        var newState;\n        var def = Promise.resolve();\n        if (mode) {\n            newState = _.extend({}, params, {\n                renamingAllowedFields: this.renamingAllowedFields,\n                mode: mode,\n                show_invisible: this._getShowInvisible(),\n            });\n        } else {\n            newState = this.sidebar.state;\n        }\n        switch (mode) {\n            case 'view':\n                newState = _.extend(newState, {\n                    attrs: this.view.arch.attrs,\n                });\n                break;\n            case 'new':\n                break;\n            case 'properties':\n                var attrs;\n                var node = params.node;\n                if (node.tag === 'field' && this.view_type !== 'search') {\n                    var viewType = this.editor.state.viewType;\n                    if ([\"form\", \"list\", \"kanban\"].includes(this.view_type)) {\n                        attrs = {...node.attrs };\n                        attrs.options = evaluateExpr(attrs.options || \"{}\");\n                    } else {\n                        attrs = this.editor.state.fieldsInfo[viewType][node.attrs.name];\n                    }\n                } else {\n                    attrs = node.attrs;\n                }\n                newState = _.extend(newState, {\n                    attrs: attrs,\n                });\n\n                var modelName = this.x2mModel ? this.x2mModel : this.model_name;\n                if (node.tag === 'field') {\n                    def = this._getDefaultValue(modelName, node.attrs.name);\n                }\n                if (node.tag === 'div' && node.attrs.class === 'oe_chatter') {\n                    def = this._getEmailAlias(modelName);\n                }\n                if (node.tag === 'button' && node.attrs.studio_approval && node.attrs.studio_approval !== 'False') {\n                    let method, action;\n                    if (node.attrs.type === 'object') {\n                        method = node.attrs.name;\n                    } else if (node.attrs.type === 'action') {\n                        action = parseInt(node.attrs.name);\n                    }\n                    def = this._getApprovalSpec(modelName, method, action);\n                }\n                break;\n        }\n\n        return def.then(function (result) {\n            return _.extend(newState, result);\n        });\n    },\n    /**\n     * @private\n     * @param  {Array} x2mEditorPath\n     * @return {String}\n     */\n    _getSubviewXpath: function (x2mEditorPath) {\n        var subviewXpath = \"\";\n        _.each(x2mEditorPath, function (x2mPath) {\n            var x2mViewType = x2mPath.x2mViewType === 'list' ? 'tree' : x2mPath.x2mViewType;\n            const x2mViewPosition = x2mPath.wowlX2ManyInfo.archPosition;\n            subviewXpath += `//field[@name='${x2mPath.x2mField}']/${x2mViewType}[${x2mViewPosition}]`;\n        });\n        return subviewXpath;\n    },\n\n    async instantiateWowlController(viewParams) {\n        const mainViewType = this.mainViewType;\n        const x2ManyFullPath = this.x2mEditorPath ? this.x2mEditorPath.map(infos => infos.wowlX2ManyInfo) : [];\n        const x2ManyInfo = x2ManyFullPath.length ? x2ManyFullPath[x2ManyFullPath.length-1]  : null;\n        const nextViewType = x2ManyInfo ? x2ManyInfo.viewType : mainViewType;\n\n        const chatterAllowed = x2ManyInfo ? false : this.chatter_allowed;\n        const resModel = x2ManyInfo ? x2ManyInfo.resModel : viewParams.action.res_model;\n        const fullXpath = x2ManyInfo ? getX2MFullXpath(x2ManyFullPath) : \"\";\n\n        let viewDescriptions = this.viewDescriptions;\n        let { arch: mainArch, custom_view_id } = viewDescriptions.views[mainViewType];\n\n        let archToEdit;\n        if (x2ManyInfo) {\n            const subArch = getSubArch(mainArch, fullXpath, nextViewType, false);\n            if (subArch) {\n                archToEdit = subArch.arch;\n                x2ManyInfo.archPosition = subArch.position;\n            }\n        } else {\n            archToEdit = mainArch;\n        }\n\n        const shouldUpdateLegacyArchState = x2ManyInfo && !!archToEdit;\n        if (x2ManyInfo && !archToEdit) {\n            const { viewType, fieldName, resModel, fieldContext } = x2ManyInfo;\n            const viewId = viewDescriptions.views[mainViewType].id;\n            const subViewRef = fieldContext[`${nextViewType === \"list\" ? \"tree\" : nextViewType}_view_ref`] || null;;\n            const xpathToCurrentSubView = getX2MFullXpath(x2ManyFullPath);\n            const studioArch = await wowlCreateInlineView(this.wowlEnv, { subViewType: viewType, viewId, fullXpath: xpathToCurrentSubView, subViewRef, resModel, fieldName })\n            this.studio_view_arch = studioArch;\n            this.operations = [];\n\n            const context = Object.assign({}, this.action.context, { studio: true, lang: false });\n            const mainResModel = this.action.res_model;\n            const _views = this.action.views;\n            const actionId = this.action.id;\n            const loadActionMenus = false;\n            const loadIrFilters = true;\n            const { relatedModels, views } = await this.wowlEnv.services.view.loadViews(\n                { context, resModel: mainResModel, views: _views },\n                { actionId, loadActionMenus, loadIrFilters }\n            );\n\n            viewDescriptions = await this._updateLegacyArchState(relatedModels, views);\n            ({ arch: mainArch, custom_view_id } = viewDescriptions.views[mainViewType]);\n\n            const subArch = getSubArch(mainArch, fullXpath, nextViewType);\n            // TODO: should throw if null ?\n            if (subArch) {\n                archToEdit = subArch.arch;\n                x2ManyInfo.archPosition = subArch.position;\n            }\n        }\n\n        if (shouldUpdateLegacyArchState) { \n            viewDescriptions = await this._updateLegacyArchState(viewDescriptions.relatedModels, viewDescriptions.views);\n        }\n\n        // Get the editor, it should honor the View Interface\n        // We also need the original view, in case we are not in edition mode\n        let editor = editorsRegistry.contains(nextViewType) ? editorsRegistry.get(nextViewType) : null;\n        const view = viewRegistry.get(nextViewType);\n        const getControllerProps = editor ? editor.props : view.props;\n        editor = editor && this.mode === \"edition\" ? editor : view;\n\n        const parser = new DOMParser();\n        const archXml = parser.parseFromString(archToEdit, \"text/xml\");\n        const rootArchXmlNode = archXml.documentElement;\n\n        if (this.mode !== \"edition\") {\n            resetViewCompilerCache();\n        }\n        let resId, resIds = [];\n        if (x2ManyInfo) {\n            resIds = x2ManyInfo.resIds;\n            resId = x2ManyInfo.resId;\n        } else if (viewParams.controllerState) {\n            resId = viewParams.controllerState.resId || viewParams.controllerState.currentId;\n            resIds = viewParams.controllerState.resIds || viewParams.controllerState.res_ids;\n        } else {\n            resId = this.resId;\n            resIds = this.resIds;\n        }\n\n        const fields = x2ManyInfo ? viewDescriptions.relatedModels[x2ManyInfo.resModel] : viewDescriptions.fields;\n\n        let controllerProps = {\n            info: {},\n            arch: archToEdit,\n            fields,\n            relatedModels: viewDescriptions.relatedModels,\n            resModel,\n            useSampleModel: false,\n            searchMenuTypes: [],\n            className: `o_view_controller o_${nextViewType}_view`,\n            resId,\n            resIds,\n        };\n\n        if ([\"list\", \"tree\", \"form\"].includes(nextViewType) && this.mode === \"edition\" && x2ManyInfo) {\n            controllerProps.parentRecord = x2ManyInfo.parentRecord;\n        }\n\n        if (custom_view_id) {\n            // for dashboard\n            controllerProps.info.customViewId = custom_view_id;\n        }\n\n        const editorCallbacks = {};\n        const config = {\n            executeCallback: (name, ...args) => editorCallbacks[name](...args),\n            registerCallback: (name, fn) => editorCallbacks[name] = fn,\n            views: [],\n            getDisplayName: () => {},\n            setDisplayName: () => {},\n            mode: 'readonly',\n            chatterAllowed,\n            studioShowInvisible: this._getShowInvisible(),\n            x2mField: this.x2mField,\n            type: nextViewType,\n            breadcrumbs: [],\n            isStudioInEdition: this.mode === \"edition\",\n        };\n\n        config.onNodeClicked = (params) => {\n            this.wowlEditor.setLastClickedXpath(params.xpath);\n            const legacyNode = getLegacyNode(params.xpath, archXml)\n            const $node = $(params.target);\n            this._onNodeClicked({data: {\n                node: legacyNode,\n                isWowl: true,\n                $node,\n            }})\n        }\n        config.onViewChange = (data) => {\n            resetViewCompilerCache();\n            return this.__onViewChange(data)\n        };\n\n        config.onEditX2ManyView = ({viewType, fieldName, record, xpath}) => {\n            // Dummy object, no one uses those data anymore, but we keep relying\n            // on legacy stuff for the sidebar.\n            const data = {\n                getContext() {}\n            }\n            const legacyX2MPath = this._computeX2mPath(fieldName, viewType, null, data);\n            const staticList = record.data[fieldName];\n            const resIds = staticList.records.map((r) => r.resId);\n            const wowlX2ManyInfo = {\n                resModel: staticList.resModel,\n                fieldContext: record.getFieldContext(fieldName),\n                resId: resIds[0],\n                resIds,\n                viewType,\n                parentRecord: record,\n                xpath,\n                fieldName\n            }\n\n            legacyX2MPath.wowlX2ManyInfo = wowlX2ManyInfo;\n            bus.trigger('STUDIO_ENTER_X2M', legacyX2MPath);\n        }\n\n        config.structureChange = (params) => {\n            const legacyNode = getLegacyNode(params.xpath, archXml);\n            const xpathInfo = xpathToLegacyXpathInfo(params.xpath);\n            const data = {...params, node: legacyNode, xpathInfo }\n            resetViewCompilerCache();\n            this._onViewChange({data});\n        }\n\n        config.handleRenderingError = !this.wowlEditor || !this.wowlEditor.status === \"mounted\" ?\n            (error) => { throw error; } : // vem had not been mounted: re-throw the error as it is not the user's faults\n            (error) => {\n                this.trigger_up('studio_error', {error: 'view_rendering'});\n                this._undo(null, true);\n            }; // vem had been mounted: handle the error as its cause is a user's action\n\n        controllerProps = getControllerProps ? getControllerProps(controllerProps, editor, config) : controllerProps;\n\n        const Controller = editor.Controller;\n        const SearchModelClass = editor.SearchModel || SearchModel;\n\n        let searchViewArch, searchViewFields, searchViewIrFilters, globalState;\n        if (this.viewDescriptions.views.search && !x2ManyInfo) {\n            searchViewArch = this.viewDescriptions.views.search.arch;\n            searchViewIrFilters = this.viewDescriptions.views.search.irFilters;\n            searchViewFields = this.viewDescriptions.fields;\n            globalState = viewParams.action.globalState;\n        }\n\n        const env = extendEnv(this.wowlEnv, { config });\n        const studioViewProps = {\n            Controller,\n            SearchModelClass,\n            context: viewParams.context,\n            globalState,\n            searchViewArch, searchViewFields, searchViewIrFilters,\n            domain: viewParams.domain || [], // bug in cohort domain = false???\n            env, // deleted by ComponentWrapper (see owl_compatibility)\n            controllerProps,\n            setOverlay: ![\"form\", \"list\", \"tree\", \"kanban\"].includes(nextViewType),\n            resetSidebar: () => {\n                this._resetSidebarMode();\n            }\n        };\n\n        const Wrapper = wrapperRegistry.get(nextViewType, GenericWowlEditor);\n        this.wowlEditor = new Wrapper(this, StudioView, studioViewProps);\n\n        const attrs = {};\n        for (const { name, value } of rootArchXmlNode.attributes) {\n            attrs[name] = value;\n        }\n        if (attrs.sample && ![\"list\", \"kanban\"].includes(nextViewType)) {\n            controllerProps.useSampleModel = Boolean(evaluateExpr(attrs.sample));\n        }\n\n        this.view = {\n            //  in case we pass line: const arch = Editors[this.view_type].prototype.preprocessArch(this.view.arch);\n            arch: Object.assign({}, viewUtils.parseArch(archToEdit), { mode: \"view\"}),\n            controllerProps,\n            loadParams: {},\n            fieldsInfo: this.wowlEditor.state.fieldsInfo,\n        };\n        return this.wowlEditor;\n    },\n    /**\n     * @override\n     * @returns {Promise<Widget>}\n     */\n    _instantiateEditor: async function (params) {\n        params = params || {};\n\n        const fields_view = this.fields_view;\n\n        var viewParams = this.x2mField ? this.x2mViewParams : {\n            action: this.action,\n            context: this.action.context,\n            controllerState: this.controllerState,\n            withSearchPanel: false,\n            domain: this.action.domain,\n        };\n\n        var def;\n        // Different behaviour for the search view because\n        // it's not defined as a \"real view\", no inherit to abstract view.\n        // The search view in studio has its own renderer.\n        if (this.view_type === 'search') {\n            if (this.mode === 'edition') {\n                const editorParams = _.defaults(params, {\n                    show_invisible: this._getShowInvisible(),\n                });\n                this.view = new Editors.search(this, fields_view, editorParams);\n            } else {\n                this.view = new SearchRenderer(this, fields_view);\n            }\n            def = Promise.resolve(this.view);\n        } else {\n            return this.instantiateWowlController(viewParams);\n        }\n        const editor = await def;\n        return editor;\n    },\n    /**\n     * @override\n     */\n    _instantiateSidebar: function (state, previousState) {\n\n        var defaultMode = this._getDefaultSidebarMode();\n        state = _.defaults(state || {}, {\n            mode: defaultMode,\n            attrs: defaultMode === 'view' ? this.view.arch.attrs : {},\n        });\n        var modelName = this.x2mModel ? this.x2mModel : this.model_name;\n        var params = {\n            view_type: this.view_type,\n            model_name: modelName,\n            fields: this.fields,\n            renamingAllowedFields: this.renamingAllowedFields,\n            state: state,\n            previousState: previousState,\n            isEditingX2m: !!this.x2mField,\n            // In case of a search view, the editor doesn't have state\n            editorData: this.editor.state && this.editor.state.data || {},\n            fieldsInfo: this.view.fieldsInfo ? this.view.fieldsInfo[this.view_type] : false,\n            defaultOrder: this.view.arch.attrs.default_order || false,\n        };\n\n        if (_.contains(['list', 'form', 'kanban'], this.view_type)) {\n            var fields_in_view = _.pick(this.fields, this.editor.state.getFieldNames());\n            var fields_not_in_view = _.omit(this.fields, this.editor.state.getFieldNames());\n            params.fields_not_in_view = fields_not_in_view;\n            params.fields_in_view = fields_in_view;\n        } else if (this.view_type === 'search') {\n            // we return all the model fields since it's possible\n            // to have multiple times the same field defined in the search view.\n            params.fields_not_in_view = this.fields;\n            params.fields_in_view = [];\n        } else if (this.view_type === 'pivot') {\n            const { controllerProps } = this.view;\n            const {\n                colGroupBys,\n                rowGroupBys,\n                activeMeasures,\n                fieldAttrs,\n            } = controllerProps.modelParams.metaData;\n            params.fieldsInfo = false // useless for pivot search for fields_in_view\n            params.colGroupBys = colGroupBys;\n            params.rowGroupBys = rowGroupBys;\n            params.measures = computeReportMeasures(this.fields, fieldAttrs, activeMeasures);\n        } else if (this.view_type === 'graph') {\n            const { controllerProps } = this.view;\n            const { groupBy, measure } = controllerProps.modelParams;\n            params.groupBys = groupBy;\n            params.measure = measure;\n        }\n\n        return new ViewEditorSidebar(this, params);\n    },\n\n    _computeX2mPath(x2mField, x2mViewType, fieldsView=null, x2mData=null) {\n        let fields = this.fields;\n        if (fieldsView) {\n            fields = fieldsView.fields;\n        }\n        const x2mModel = fields[x2mField].relation;\n\n        let data = x2mData;\n        if (x2mViewType === 'form' && data.count) {\n            // the x2m data is a datapoint type list and we need the datapoint\n            // type record to open the form view with an existing record\n            data = data.data[0];\n        }\n        const context = _.omit(data.getContext(), function (val, key) {\n            return key.startsWith('default_');\n        });\n\n        const x2mViewParams = {\n            currentId: data.res_id,\n            context: context,\n            ids: data.res_ids,\n            model: this.editor.model,  // reuse the same BasicModel instance\n            modelName: x2mModel,\n            parentID: this.editor.state.id,\n        };\n\n        return  {\n            parentViewType: this.view_type,\n            x2mField: x2mField,\n            x2mViewType: x2mViewType,\n            x2mModel,\n            x2mData,\n            x2mViewParams,\n            x2mViewContext: this.view.loadParams.context,\n        };\n    },\n    /**\n     * Processes the fields to write the field name inside the description. This\n     * name is mainly used in the sidebar.\n     *\n     * @private\n     * @param {Object} fields\n     * @returns {Object} a deep copy of fields with the key as attribute `name`\n     */\n    _processFields: function (fields) {\n        fields = $.extend(true, {}, fields);  // deep copy\n        _.each(fields, function (value, key) {\n            value.name = key;\n        });\n        return fields;\n    },\n    /**\n     * @private\n     * @param {String} type\n     * @param {Object} node\n     * @param {Object} xpath_info\n     */\n    _removeElement: function (type, node, xpath_info) {\n        // After the element removal, if the parent doesn't contain any children\n        // anymore, the parent node is also deleted (except if the parent is\n        // the only remaining node and if we are editing a x2many subview)\n        if (!this.x2mField) {\n            if (node.attrs[nodeStudioXpathSymbol]) {\n                node = findNodeViewArch([this.view.arch], node.attrs[nodeStudioXpathSymbol]);\n            }\n            var parent_node = findParent(this.view.arch, node, this.expr_attrs);\n            var is_root = !findParent(this.view.arch, parent_node, this.expr_attrs);\n            var is_group = parent_node.tag === 'group';\n            if (parent_node.children.length === 1 && !is_root && !is_group) {\n                node = parent_node;\n                // Since we changed the node being deleted, we recompute the xpath_info\n                // if necessary\n                if (node && _.isEmpty(_.pick(node.attrs, this.expr_attrs[node.tag]))) {\n                    xpath_info = findParentsPositions(this.view.arch, node);\n                }\n            }\n        }\n\n        this.editor.unselectedElements();\n        this._resetSidebarMode();\n        this._do({\n            type: type,\n            target: {\n                tag: node.tag,\n                attrs: _.pick(node.attrs, this.expr_attrs[node.tag]),\n                xpath_info: xpath_info,\n            },\n        });\n    },\n    /**\n     * Rename field.\n     *\n     * @private\n     * @param {string} oldName\n     * @param {string} newName\n     * @returns {Promise}\n     */\n    _renameField: function (oldName, newName) {\n        var self = this;\n\n        // blockUI is used to prevent the user from doing any operation\n        // because the hooks are still related to the old field name\n        framework.blockUI();\n        this.sidebar.$('input').attr('disabled', true);\n        this.sidebar.$('select').attr('disabled', true);\n\n        return this._rpc({\n            route: '/web_studio/rename_field',\n            params: {\n                studio_view_id: this.studio_view_id,\n                studio_view_arch: this.studio_view_arch,\n                model: this.x2mModel ? this.x2mModel : this.model_name,\n                old_name: oldName,\n                new_name: newName,\n            },\n        }).then(function () {\n            self._updateOperations(oldName, newName);\n            var oldFieldIndex = self.renamingAllowedFields.indexOf(oldName);\n            self.renamingAllowedFields.splice(oldFieldIndex, 1);\n            self.renamingAllowedFields.push(newName);\n            return self._applyChanges().then(framework.unblockUI).guardedCatch(framework.unblockUI);\n        }).guardedCatch(framework.unblockUI);\n    },\n    /**\n     * @private\n     */\n    _resetSidebarMode: function () {\n        this._updateSidebar(this._getDefaultSidebarMode());\n    },\n    /**\n     * @private\n     * @param {int} view_id\n     * @returns {Promise}\n     */\n    _restoreDefaultView: async function (view_id) {\n        core.bus.trigger('clear_cache');\n        const result = await this._rpc({\n            route: '/web_studio/restore_default_view',\n            params: {\n                view_id: view_id,\n            },\n        });\n        await this._applyChangeHandling(result);\n        this.studio_view_id = null;\n        this.operations = [];\n        this.operations_undone = [];\n        this.studio_view_arch = \"\";\n        this._updateButtons();\n        await this._updateSidebar(this.sidebar.state.mode);\n        bus.trigger('toggle_snack_bar', 'saved');\n    },\n    /**\n     * @private\n     * @param {String} model_name\n     * @param {String} field_name\n     * @param {*} value\n     * @returns {Promise}\n     */\n    _setDefaultValue: function (model_name, field_name, value) {\n        var params = {\n            model_name: model_name,\n            field_name: field_name,\n            value: value,\n        };\n        return this._rpc({route: '/web_studio/set_default_value', params: params});\n    },\n    /**\n     * @private\n     * @param {String} model_name\n     * @param {[type]} value\n     * @returns {Promise}\n     */\n    _setEmailAlias: function (model_name, value) {\n        return this._rpc({\n            route: '/web_studio/set_email_alias',\n            params: {\n                model_name: model_name,\n                value: value,\n            },\n        });\n    },\n    /**\n     * Modifies in place the operation to add `subview_xpath` on the target key.\n     *\n     * @private\n     * @param {Object} op\n     */\n    _setSubViewXPath: function (op) {\n        var subviewXpath = this._getSubviewXpath(this.x2mEditorPath);\n        // If the xpath_info last element is the same than the subview type\n        // we remove it since it will be added by the subviewXpath.\n        if (op.target.xpath_info && op.target.xpath_info[0].tag === this.x2mViewType) {\n            op.target.xpath_info.shift();\n        }\n        op.target.subview_xpath = subviewXpath;\n\n        if (op.type === 'move') {\n            // the node also comes from the subview in 'move' operations\n            op.node.subview_xpath = subviewXpath;\n        }\n    },\n    /**\n     * Slugifies a string (used to transform a label into a field name)\n     * Source: https://gist.github.com/mathewbyrne/1280286\n     *\n     * @private\n     * @param {string} text\n     * @returns {string}\n     */\n    _slugify: function (text) {\n        return text.toString().toLowerCase().trim()\n            .replace(/[^\\w\\s-]/g, '') // remove non-word [a-z0-9_], non-whitespace, non-hyphen characters\n            .replace(/[\\s_-]+/g, '_') // swap any length of whitespace, underscore, hyphen characters with a single _\n            .replace(/^-+|-+$/g, ''); // remove leading, trailing -\n    },\n    /**\n     * Updates the list of operations after a field renaming (i.e. replace all\n     * occurences of @oldName by @newName).\n     *\n     * @private\n     * @param {string} oldName\n     * @param {string} newName\n     */\n    _updateOperations: function (oldName, newName) {\n        var strOperations = JSON.stringify(this.operations);\n        // We only want to replace exact matches of the field name, but it can\n        // be preceeded/followed by other characters, like parent.my_field or in\n        // a domain like [('...', '...', my_field)] etc.\n        // Note that negative lookbehind is not correctly handled in JS ...\n        var chars = '[^\\\\w\\\\u007F-\\\\uFFFF]';\n        var re = new RegExp('(' + chars + '|^)' + oldName + '(' + chars + '|$)', 'g');\n        this.operations = JSON.parse(strOperations.replace(re, '$1' + newName + '$2'));\n    },\n\n    //--------------------------------------------------------------------------\n    // Handlers\n    //--------------------------------------------------------------------------\n\n    /**\n    * Handler for 'Remove rule' button.\n    * @private\n    * @param {OdooEvent} ev\n    */\n    _onApprovalArchive: async function (ev) {\n        bus.trigger(\"toggle_snack_bar\", \"saving\");\n        await this._rpc({\n            model: \"studio.approval.rule\",\n            method: \"write\",\n            args: [[ev.data.ruleId], { active: false }],\n        });\n        await this._updateSidebar(this.sidebar.state.mode, {\n            node: this.sidebar.state.node,\n        });\n        bus.trigger(\"toggle_snack_bar\", \"saved\");\n        this.updateEditor();\n    },\n    /**\n     * Handler for generic edition of approval rule.\n     * @private\n     * @param {OdooEvent} ev\n     */\n    _onApprovalChange: async function(ev) {\n        const node = ev.data.node;\n        // modifying approval spec, everything done server-side\n        // and widgets will fetch their spec on re-render\n        const isMethod = node.attrs.type === 'object';\n        bus.trigger('toggle_snack_bar', 'saving');\n        await this._rpc({\n            route: '/web_studio/edit_approval',\n            params: {\n                model: this.model_name,\n                method: isMethod?node.attrs.name:false,\n                action: isMethod?false:node.attrs.name,\n                operations: [[ev.data.type, ev.data.ruleId, ev.data.payload]],\n            }\n        });\n        bus.trigger('toggle_snack_bar', 'saved');\n    },\n    /**\n    * Handler for writing the domain on an approval rule (when the domain\n    * selection dialog is closed).\n    * @private\n    * @param {OdooEvent} ev\n    */\n   _onApprovalCondition: async function (ev) {\n        bus.trigger(\"toggle_snack_bar\", \"saving\");\n        await this._rpc({\n            model: \"studio.approval.rule\",\n            method: \"write\",\n            args: [[ev.data.ruleId], { domain: ev.data.domain }],\n        });\n        bus.trigger(\"toggle_snack_bar\", \"saved\");\n        this._updateSidebar(this.sidebar.state.mode, {\n            node: this.sidebar.state.node,\n        });\n    },\n    /**\n    * Handler for changes on the 'group_id' field of an approval rule.\n    * @private\n    * @param {OdooEvent} ev\n    */\n    _onApprovalGroupChange: async function (ev) {\n        bus.trigger(\"toggle_snack_bar\", \"saving\");\n        await this._rpc({\n            model: \"studio.approval.rule\",\n            method: \"write\",\n            args: [[ev.data.ruleId], { group_id: ev.data.groupId }],\n        });\n        bus.trigger(\"toggle_snack_bar\", \"saved\");\n        this._updateSidebar(this.sidebar.state.mode, {\n            node: this.sidebar.state.node,\n        });\n    },\n    /**\n    * Handler for 'add approval rule' button.\n    * @private\n    * @param {OdooEvent} ev\n    */\n    _onApprovalNewRule: async function (ev) {\n        bus.trigger(\"toggle_snack_bar\", \"saving\");\n        await this._rpc({\n            model: \"studio.approval.rule\",\n            method: \"create_rule\",\n            args: [],\n            kwargs: {\n                model: ev.data.model,\n                method: ev.data.method,\n                action_id: parseInt(ev.data.action),\n            },\n        });\n        await this._updateSidebar(this.sidebar.state.mode, {\n            node: this.sidebar.state.node,\n        });\n        bus.trigger(\"toggle_snack_bar\", \"saved\");\n        this.updateEditor();\n    },\n    /**\n    * Handler for changes on the 'responsible_id' field of an approval rule.\n    * @private\n    * @param {OdooEvent} ev\n    */\n     _onApprovalResponsibleChange: async function (ev) {\n        bus.trigger(\"toggle_snack_bar\", \"saving\");\n        await this._rpc({\n            model: \"studio.approval.rule\",\n            method: \"write\",\n            args: [[ev.data.ruleId], { responsible_id: ev.data.responsibleId }],\n        });\n        bus.trigger(\"toggle_snack_bar\", \"saved\");\n        this._updateSidebar(this.sidebar.state.mode, {\n            node: this.sidebar.state.node,\n        });\n    },\n    /**\n     * @override\n     */\n    _onCloseXMLEditor: function () {\n        this._super.apply(this, arguments);\n        resetViewCompilerCache();\n        this.updateEditor();\n    },\n    /**\n     * Show nearrest hook.\n     *\n     * @override\n     */\n    _onDragComponent: function (ev) {\n        var is_nearest_hook = this.editor.highlightNearestHook(ev.data.$helper, ev.data.position);\n        ev.data.$helper.toggleClass('ui-draggable-helper-ready', is_nearest_hook);\n    },\n    /**\n     * @private\n     * @param {OdooEvent} event\n     */\n    _onDefaultValueChange: function (event) {\n        var data = event.data;\n        var modelName = this.x2mModel ? this.x2mModel : this.model_name;\n        this._setDefaultValue(modelName, data.field_name, data.value)\n            .guardedCatch(function () {\n                if (data.on_fail) {\n                    data.on_fail();\n                }\n            });\n    },\n    /**\n     * @private\n     * @param {OdooEvent} event\n     */\n    _onEmailAliasChange: function (event) {\n        var value = event.data.value;\n        var modelName = this.x2mModel ? this.x2mModel : this.model_name;\n        this._setEmailAlias(modelName, value);\n    },\n    /**\n     * @private\n     * @param {OdooEvent} event\n     */\n    _onFieldEdition: function (event) {\n        var self = this;\n        var node = event.data.node;\n        var field = this.fields[node.attrs.name];\n        var dialog = new NewFieldDialog(this, this.model_name, field, this.fields).open();\n        var modelName = this.x2mModel ? this.x2mModel : this.model_name;\n        dialog.on('field_default_values_saved', this, function (values) {\n            self._editField(modelName, field.name, values).then(function (result) {\n                const _closeDialog = function () {\n                    dialog.close();\n                    self._applyChanges(false, false);\n                };\n                if (result && result.records_linked) {\n                    const message = result.message || _t(\"Are you sure you want to remove the selection values?\");\n                    Dialog.confirm(self, message, {\n                        confirm_callback: async function () {\n                            await self._editField(modelName, field.name, values, true);\n                            _closeDialog();\n                        },\n                        dialogClass: 'o_web_studio_preserve_space'\n                    });\n                } else {\n                    _closeDialog();\n                }\n            });\n        });\n    },\n    /**\n     * @private\n     * @param {OdooEvent} event\n     */\n    _onFieldRenamed: function (event) {\n        this._renameField(event.data.oldName, event.data.newName);\n    },\n    /**\n     * Toggle editor sidebar.\n     *\n     * @param {Object} ev.data.node\n     * @param {jQueryElement} [ev.data.$node]\n     * @override\n     *\n     */\n    _onNodeClicked: function (ev) {\n        var self = this;\n        var node = ev.data.node;\n        var $node = ev.data.$node;\n        if (this.view_type === 'form' && node.tag === 'field') {\n            var field = this.fields[node.attrs.name];\n            const attrs = {};\n            //var attrs = this.editor.state.fieldsInfo[this.editor.state.viewType][node.attrs.name];\n            var isX2Many = _.contains(['one2many','many2many'], field.type);\n            var notEditableWidgets = ['many2many_tags', 'hr_org_chart'];\n            if (!ev.data.isWowl && isX2Many && !_.contains(notEditableWidgets, attrs.widget)) {\n                // If the node is a x2many we offer the possibility to edit or\n                // create the subviews\n                var message = $(QWeb.render('web_studio.X2ManyEdit'));\n                var options = {\n                    baseZ: 1000, // reset z-index to 1000 from 1100 for element blocking else dialog hides behind it\n                    message: message,\n                    css: {\n                        cursor: 'auto',\n                    },\n                    overlayCSS: {\n                        cursor: 'auto',\n                    }\n                };\n                // Only the o_field_x2many div needs to be overlaid.\n                // So if the node is not the div we find it before applying the overlay.\n                if ($node.hasClass('o_field_one2many') || $node.hasClass('o_field_many2many')) {\n                    $node.block(options);\n                } else {\n                    $node.find('div.o_field_one2many, div.o_field_many2many').block(options);\n                }\n                $node.find('.o_web_studio_editX2Many').click(function (e) {\n                    e.preventDefault();\n                    e.stopPropagation();\n                    const x2mFieldName = node.attrs.name;\n                    const x2mViewType = e.currentTarget.dataset.type;\n                    // trigger on studioBus\n                    bus.trigger('STUDIO_ENTER_X2M',\n                        self._computeX2mPath(x2mFieldName, x2mViewType, null, self.editor.state.data[x2mFieldName])\n                    );\n                });\n            }\n        }\n        this._updateSidebar('properties', ev.data);\n    },\n    /**\n     * @private\n     * @param {OdooEvent} event\n     */\n    _onOpenDefaults: function () {\n        var modelName = this.x2mModel ? this.x2mModel : this.model_name;\n        this.do_action({\n            name: _t('Default Values'),\n            type: 'ir.actions.act_window',\n            res_model: 'ir.default',\n            target: 'current',\n            views: [[false, 'list'], [false, 'form']],\n            domain: [['field_id.model', '=', modelName]],\n        });\n    },\n    /**\n     * @private\n     * @param {OdooEvent} event\n     */\n    _onOpenFieldForm: function (event) {\n        var self = this;\n        var field_name = event.data.field_name;\n        var modelName = this.x2mModel ? this.x2mModel : this.model_name;\n        this._rpc({\n            model: 'ir.model.fields',\n            method: 'search_read',\n            fields: ['id'],\n            domain: [['model', '=', modelName], ['name', '=', field_name]],\n        }).then(function (result) {\n            var res_id = result.length && result[0].id;\n            if (res_id) {\n                self.do_action({\n                    type: 'ir.actions.act_window',\n                    res_model: 'ir.model.fields',\n                    res_id: res_id,\n                    views: [[false, 'form']],\n                    target: 'current',\n                });\n            }\n        });\n    },\n    /**\n     * @private\n     */\n    _onOpenRecordFormView: function () {\n        this.do_action({\n            type: 'ir.actions.act_window',\n            res_model: 'ir.ui.view',\n            res_id: this.view_id,\n            views: [[false, 'form']],\n            target: 'current',\n        });\n    },\n    /**\n     * @override\n     */\n    _onOpenXMLEditor: function () {\n        this._super.apply(this, arguments);\n        this.renamingAllowedFields = [];\n        this.updateEditor();  // the editor will be rendered in `rendering` mode\n    },\n    /**\n     * @private\n     * @param {OdooEvent} ev\n     */\n    _onShowInvisibleToggled: function (ev) {\n        this.updateEditor({ show_invisible: Boolean(ev.data.show_invisible) });\n    },\n    /**\n     * @private\n     * @param {OdooEvent} event\n     */\n    _onViewChange: function (event) {\n        this.__onViewChange(event.data);\n    },\n    /**\n     * @private\n     * @param {Object} data\n     */\n    __onViewChange: function (data) {\n        var structure = data.structure;\n        var type = data.type;\n        var node = data.node;\n        var new_attrs = data.new_attrs || {};\n        var position = data.position || 'after';\n        var xpath_info;\n        const wowlXpath = data.xpath;\n        if (node && !wowlXpath) {\n            if (node.attrs[nodeStudioXpathSymbol]) {\n                // chatter feature use this: see compilation of true chatter (chatterAdded = false)\n                xpath_info = xpathToLegacyXpathInfo(node.attrs[nodeStudioXpathSymbol]);\n            } else {\n                const arch = Editors[this.view_type].prototype.preprocessArch(this.view.arch);\n                xpath_info = findParentsPositions(arch, node);\n            }\n        } else if (wowlXpath) {\n            xpath_info = data.xpathInfo;\n        }\n        switch (structure) {\n            case 'text':\n                break;\n            case 'picture':\n                break;\n            case 'group':\n                this._addElement(type, node, xpath_info, position, 'group');\n                break;\n            case 'button':\n                this._addButton(data);\n                break;\n            case 'notebook':\n                this._addElement(type, node, xpath_info, position, 'notebook');\n                break;\n            case 'page':\n                this._addPage(type, node, xpath_info, position);\n                break;\n            case 'field':\n                var field_description = data.field_description;\n                new_attrs = _.pick(new_attrs, ['name', 'widget', 'options', 'display', 'optional']);\n                this._addField(type, field_description, node, xpath_info, position,\n                    new_attrs, data);\n                break;\n            case 'chatter':\n                this._addChatter(data);\n                break;\n            case 'kanban_cover':\n                this._editKanbanCover(type);\n                break;\n            case 'kanban_dropdown':\n                this._addKanbanDropdown();\n                break;\n            case 'kanban_priority':\n                this._addKanbanPriority(data);\n                break;\n            case 'kanban_image':\n                this._addKanbanImage(data);\n                break;\n            case 'remove':\n                this._removeElement(type, node, xpath_info);\n                break;\n            case 'view_attribute':\n                this._editViewAttributes(type, new_attrs);\n                break;\n            case 'edit_attributes':\n                this._editElementAttributes(type, node, xpath_info,\n                    new_attrs);\n                break;\n            case 'filter':\n                new_attrs = _.pick(new_attrs, ['name', 'string', 'domain', 'context', 'create_group', 'date']);\n                this._addFilter(type, node, xpath_info, position, new_attrs);\n                break;\n            case 'separator':\n                this._addSeparator(type, node, xpath_info, position);\n                break;\n            case 'restore':\n                this._restoreDefaultView(this.view_id);\n                break;\n            case 'map_popup':\n                this._changeMapPopupFields(type, data.field_ids);\n                break;\n            case 'pivot_popup':\n                this._changePivotMeasuresFields(type, data.field_ids);\n                break;\n            case 'graph_pivot_groupbys_fields':\n                this._changeGraphPivotGroupbysFields(type, data);\n                break;\n            case 'avatar_image':\n                this._addAvatarImage(data);\n                break;\n            case 'enable_approval':\n                this._addApproval(data);\n                break;\n        }\n    },\n    /**\n     * Updates the internal state of the viewManagerEditor from data received from WOWL getViews API\n     * Should be used after loadViews, editView, editViewArch\n     *\n     * @params {Object} models: models data received, should honor the getViews API\n     * @params {Object} views: views data received, should honor the getViews API\n     */\n    async _updateLegacyArchState(models, views) {\n        const viewType = this.mainViewType;\n        const view = views[viewType];\n        const { arch, viewFields } = processArch(view.arch, viewType, this.model_name, models);\n\n        // NOTE: fields & fields_view are from the base model here.\n        // fields will be updated accordingly if editing a x2m (see\n        // @_setX2mParameters).\n        this.fields = this._processFields(models[this.model_name]);\n        this.viewDescriptions.views[viewType].arch = view.arch;\n        this.viewDescriptions.relatedModels = models; // add names (see _processFields)?\n        this.viewDescriptions.fields = this.fields;\n\n        this.fields_view = {\n            arch,\n            fields: this.fields,\n            viewFields,\n            model: view.model,\n            type: viewType,\n            view_id: view.id,\n        };\n\n        if (this.isEditingX2m) {\n            const fieldsGetResult = await this.wowlEnv.services.orm.call(this.x2mModel, \"fields_get\");\n            // relatedModel only contains field descriptions that are present in the view.\n            // Merge them with the fields_get's result to have an exhaustive list of all fields for the model\n            const subFields = this.viewDescriptions.relatedModels[this.x2mModel];\n            this.viewDescriptions.relatedModels[this.x2mModel] = { ...subFields, ...fieldsGetResult };\n            this.fields = this._processFields(fieldsGetResult);\n        }\n        return this.viewDescriptions;\n    },\n});\n\nfunction findNodeViewArch(archs, xpath) {\n    return _findNodeViewArch(archs, xpathToLegacyXpathInfo(xpath));\n}\n\nfunction _findNodeViewArch(archs, xpaths) {\n    const xpath = xpaths.shift();\n    const filteredArchs = archs.filter(arch => arch.tag === xpath.tag) || [];\n    const arch = filteredArchs[xpath.indice - 1];\n    if (arch) {\n        if (!xpaths.length) {\n            return arch;\n        }\n        return _findNodeViewArch(arch.children, xpaths);\n    } else {\n        return null;\n    }\n}\n\nfunction findParent(arch, node, expr_attrs) {\n    var parent = arch;\n    var result;\n    var xpathInfo = findParentsPositions(arch, node);\n    _.each(parent.children, function (child) {\n        var deepEqual = true;\n        // If there is not the expr_attr, we can't compare the nodes with it\n        // so we compute the child xpath_info and compare it to the node\n        // we are looking in the arch.\n        if (_.isEmpty(_.pick(child.attrs, expr_attrs[child.tag]))) {\n            var childXpathInfo = findParentsPositions(arch, child);\n            _.each(xpathInfo, function (node, index) {\n                if (index >= childXpathInfo.length) {\n                    deepEqual = false;\n                } else if (!_.isEqual(xpathInfo[index], childXpathInfo[index])) {\n                    deepEqual = false;\n                }\n            });\n        }\n        if (deepEqual && child.attrs && child.attrs.name === node.attrs.name) {\n            result = parent;\n        } else {\n            var res = findParent(child, node, expr_attrs);\n            if (res) {\n                result = res;\n            }\n        }\n    });\n    return result;\n}\n\nfunction findParentsPositions(arch, node) {\n    return _findParentsPositions(arch, node, [], 1);\n}\n\nfunction _findParentsPositions(parent, node, positions, indice) {\n    var result;\n    positions.push({\n        'tag': parent.tag,\n        'indice': indice,\n    });\n    if (parent === node) {\n        return positions;\n    } else {\n        var current_indices = {};\n        _.each(parent.children, function (child) {\n            // Save indice of each sibling node\n            current_indices[child.tag] = current_indices[child.tag] ? current_indices[child.tag] + 1 : 1;\n            var res = _findParentsPositions(child, node, positions, current_indices[child.tag]);\n            if (res) {\n                result = res;\n            } else {\n                positions.pop();\n            }\n        });\n    }\n    return result;\n}\n\nreturn ViewEditorManager;\n\n});\n", "/** @odoo-module */\n\nimport config from \"web.config\";\nimport core from \"web.core\";\nimport Dialog from \"web.Dialog\";\nimport DomainSelectorDialog from \"web.DomainSelectorDialog\";\nimport Domain from \"web.Domain\";\nimport field_registry from \"web.field_registry\";\nimport pyUtils from \"web.py_utils\";\nimport relational_fields from \"web.relational_fields\";\nimport session from \"web.session\";\nimport StandaloneFieldManagerMixin from \"web.StandaloneFieldManagerMixin\";\nimport utils from \"web.utils\";\nimport view_components from \"web_studio.view_components\";\nimport Widget from \"web.Widget\";\nimport { registry } from \"@web/core/registry\";\nimport { sortBy } from \"@web/core/utils/arrays\";\nimport { SIDEBAR_SAFE_FIELDS } from \"@web_studio/legacy/js/views/sidebar_safe_fields\";\nimport { omit, pick } from \"@web/core/utils/objects\";\n\nconst form_component_widget_registry = view_components.registry;\nconst _lt = core._lt;\nconst _t = core._t;\nconst Many2ManyTags = relational_fields.FieldMany2ManyTags;\nconst Many2One = relational_fields.FieldMany2One;\n\n\n/**\n * This object is used to define all the options editable through the Studio\n * sidebar, by field widget.\n *\n * An object value must be an array of Object (one object by option).\n * An option object must have as attributes a `name`, a `string` and a `type`\n * (currently among `boolean` and `selection`):\n *\n * * `selection` option must have an attribute `selection` (array of tuple).\n * * `boolean` option can have an attribute `leaveEmpty` (`checked` or\n *     `unchecked`).\n *\n * @type {Object}\n */\nexport const OPTIONS_BY_WIDGET = {\n    image: [\n        {name: 'size', type: 'selection', string: _lt(\"Size\"), selection: [\n            [[0, 90], _lt(\"Small\")], [[0, 180], _lt(\"Medium\")], [[0, 270], _lt(\"Large\")],\n        ]},\n    ],\n    many2one: [\n        {name: 'no_create', type: 'boolean', string: _lt(\"Disable creation\"), leaveEmpty: 'unchecked'},\n        {name: 'no_open', type: 'boolean', string: _lt(\"Disable opening\"), leaveEmpty: 'unchecked'},\n    ],\n    sol_product_many2one: [\n        { name: 'no_create', type: 'boolean', string: _lt(\"Disable creation\"), leaveEmpty: 'unchecked' },\n    ],\n    many2many_tags: [\n        { name: 'no_create', type: 'boolean', string: _lt(\"Disable creation\"), leaveEmpty: 'unchecked' },\n        {name: 'color_field', type: 'boolean', string: _lt(\"Use colors\"), leaveEmpty: 'unchecked'},\n    ],\n    many2many_tags_avatar: [\n        { name: 'no_create', type: 'boolean', string: _lt(\"Disable creation\"), leaveEmpty: 'unchecked' },\n    ],\n    many2many_avatar_user: [\n        { name: 'no_create', type: 'boolean', string: _lt(\"Disable creation\"), leaveEmpty: 'unchecked' },\n    ],\n    many2many_avatar_employee: [\n        { name: 'no_create', type: 'boolean', string: _lt(\"Disable creation\"), leaveEmpty: 'unchecked' },\n    ],\n    radio: [\n        {name: 'horizontal', type: 'boolean', string: _lt(\"Display horizontally\")},\n    ],\n    signature: [\n        {name: 'full_name', type: 'selection', string: _lt('Auto-complete with'), selection: [[]]},\n        // 'selection' will be computed later on for the attribute to be dynamic (based on model fields)\n    ],\n    daterange: [\n        {name: 'related_start_date', type: 'selection', string: _lt(\"Related Start Date\"), selection: [[]]},\n        {name: 'related_end_date', type: 'selection', string: _lt(\"Related End Date\"), selection: [[]]},\n    ],\n    phone: [\n        {name: 'enable_sms', type: 'boolean', string: _lt(\"Enable SMS\"), default: true},\n    ],\n};\n\nconst UNSUPPORTED_WIDGETS_BY_VIEW = {\n    list: ['many2many_checkboxes'],\n};\n\nconst wowlFieldRegistry = registry.category(\"fields\");\nfunction getWowlFieldWidgets(fieldType, currentKey=\"\", blacklistedKeys=[], debug=false) {\n    const widgets = [];\n    for (const [widgetKey, Component] of wowlFieldRegistry.getEntries()) {\n        if (widgetKey !== currentKey) { // always show the current widget\n            // Widget dosn't explicitly supports the field's type\n            if (!Component.supportedTypes || !Component.supportedTypes.includes(fieldType)) {\n                continue;\n            }\n            // Widget is view-specific or is blacklisted\n            if (widgetKey.includes(\".\") || blacklistedKeys.includes(widgetKey)) {\n                continue;\n            }\n            // Widget is not whitelisted\n            if (!debug && !SIDEBAR_SAFE_FIELDS.includes(widgetKey)) {\n                continue;\n            }\n        }\n        widgets.push([widgetKey, Component.displayName]);\n    }\n    return sortBy(widgets, (el) => el[1] || el[0]);\n}\n\nexport function getFieldWidgetKey(fieldType, viewType, jsClass) {\n    const prefixes = jsClass ? [jsClass, viewType, \"\"] : [viewType, \"\"];\n    for (const prefix of prefixes) {\n        const _key = prefix ? `${prefix}.${fieldType}` : fieldType;\n        if (wowlFieldRegistry.contains(_key)) {\n            return _key;\n        }\n    }\n}\n\nfunction getWidgetDefaultOptions(widgetKey) {\n     if (!(widgetKey in OPTIONS_BY_WIDGET)) {\n        return {};\n    }\n    return Object.fromEntries(Object.values(OPTIONS_BY_WIDGET[widgetKey]).map(opt => {\n        return [opt.name, opt.default]\n    }))\n}\n\nexport const ViewEditorSidebar = Widget.extend(StandaloneFieldManagerMixin, {\n    template: 'web_studio.ViewEditorSidebar',\n    events: {\n        'click .o_web_studio_new:not(.inactive)':            '_onTab',\n        'click .o_web_studio_view':                          '_onTab',\n        'click .o_web_studio_xml_editor':                    '_onXMLEditor',\n        'click .o_display_view .o_web_studio_parameters':    '_onViewParameters',\n        'click .o_display_field .o_web_studio_parameters':   '_onFieldParameters',\n        'click .o_display_view .o_web_studio_defaults':      '_onDefaultValues',\n        'change #show_invisible':                            '_onShowInvisibleToggled',\n        'click .o_web_studio_remove':                        '_onElementRemoved',\n        'click .o_web_studio_restore':                       '_onRestoreDefaultView',\n        'change .o_display_view input':                      '_onViewChanged',\n        'change .o_display_view select':                     '_onViewChanged',\n        'click .o_web_studio_edit_selection_values':         '_onSelectionValues',\n        'change .o_display_field [data-type=\"attributes\"]':  '_onElementChanged',\n        'change .o_display_field [data-type=\"options\"]':     '_onOptionsChanged',\n        'change .o_display_div input[name=\"set_cover\"]':     '_onSetCover',\n        'change .o_display_field input[data-type=\"field_name\"]': '_onFieldNameChanged',\n        'focus .o_display_field input[data-type=\"attributes\"][name=\"domain\"]': '_onDomainEditor',\n        'change .o_display_field [data-type=\"default_value\"]': '_onDefaultValueChanged',\n        'change .o_display_page input':                      '_onElementChanged',\n        'change .o_display_label input':                     '_onElementChanged',\n        'change .o_display_group input':                     '_onElementChanged',\n        'change .o_display_button input':                    '_onElementChanged',\n        'change .o_display_button select':                   '_onElementChanged',\n        'click .o_web_studio_sidebar_approval .o_approval_archive':  '_onApprovalArchive',\n        'change .o_web_studio_sidebar_approval':                     '_onApprovalChange',\n        'click .o_web_studio_sidebar_approval .o_approval_domain':   '_onApprovalDomain',\n        'click .o_web_studio_sidebar_approval .o_approval_new':      '_onApprovalNewRule',\n        'click .o_display_button .o_img_upload':             '_onUploadRainbowImage',\n        'click .o_display_button .o_img_reset':              '_onRainbowImageReset',\n        'change .o_display_filter input':                    '_onElementChanged',\n        'change .o_display_chatter input[data-type=\"email_alias\"]': '_onEmailAliasChanged',\n        'click .o_web_studio_attrs':                         '_onDomainAttrs',\n        'focus .o_display_filter input#domain':              '_onDomainEditor',\n        'keyup .o_web_studio_sidebar_search_input':          '_onSearchInputChange',\n        'click .o_web_studio_existing_fields_header':        '_onClickExistingFieldHeader',\n    },\n    /**\n     * @constructor\n     * @param {Widget} parent\n     * @param {Object} params\n     * @param {Object} params.state\n     * @param {Object} params.view_type\n     * @param {Object} params.model_name\n     * @param {Object} params.fields\n     * @param {Object} params.fields_in_view\n     * @param {Object} params.fields_not_in_view\n     * @param {boolean} params.isEditingX2m\n     * @param {Array} params.renamingAllowedFields\n     */\n    init: function (parent, params) {\n        this._super.apply(this, arguments);\n        StandaloneFieldManagerMixin.init.call(this);\n        var self = this;\n        this.accepted_file_extensions = 'image/*';\n        this.debug = config.isDebug();\n\n        this.view_type = params.view_type;\n        this.model_name = params.model_name;\n        this.isEditingX2m = params.isEditingX2m;\n        this.editorData = params.editorData;\n        this.renamingAllowedFields = params.renamingAllowedFields;\n\n        this.fields = params.fields;\n        this.fieldsInfo = params.fieldsInfo;\n        if (params.defaultOrder) {\n            if (params.defaultOrder.includes(',')) {\n                params.defaultOrder = params.defaultOrder.split(',')[0];\n            }\n            this.defaultOrder = params.defaultOrder.split(' ');\n        }\n        this.orderered_fields = _.sortBy(this.fields, function (field) {\n            return field.string.toLowerCase();\n        });\n        this.fields_in_view = params.fields_in_view;\n        this.fields_not_in_view = params.fields_not_in_view;\n\n        this.GROUPABLE_TYPES = ['many2one', 'char', 'boolean', 'selection', 'date', 'datetime'];\n        // FIXME: At the moment, it's not possible to set default value for these types\n        this.NON_DEFAULT_TYPES = ['many2one', 'many2many', 'one2many', 'binary'];\n        this.MODIFIERS_IN_NODE_AND_ATTRS = ['readonly', 'invisible', 'required'];\n\n        this.state = params.state || {};\n        this.previousState = params.previousState || {};\n\n        this._searchValue = '';\n        this._isSearchValueActive = false;\n        if (['kanban', 'search'].includes(this.view_type)) {\n            this._isExistingFieldFolded = false;\n        } else if ('_isExistingFieldFolded' in this.previousState) {\n            this._isExistingFieldFolded = this.previousState._isExistingFieldFolded;\n        } else {\n            this._isExistingFieldFolded = true;\n        }\n\n        const hasWowlFieldWidgets = [\"kanban\", \"form\", \"list\"].includes(this.view_type);\n        const Widget = this.state.attrs.Widget;\n        let propsFromAttrs;\n        if (hasWowlFieldWidgets && this.state.mode === \"properties\" && this.state.node.tag === \"field\") {\n            const nodeAttrs = this.state.attrs;\n            const field = this.fields[nodeAttrs.name];\n            this.widgetKey = nodeAttrs.widget || getFieldWidgetKey(field.type, this.view_type);\n\n            let defaultOptions = getWidgetDefaultOptions(this.widgetKey);\n            defaultOptions = omit(defaultOptions, ...Object.keys(nodeAttrs.options));\n            nodeAttrs.options = { ...nodeAttrs.options, ...defaultOptions };\n\n            const widgetDescriptor = wowlFieldRegistry.get(this.widgetKey, null);\n            if (widgetDescriptor && widgetDescriptor.extractProps) {\n                const rawAttrs = Object.fromEntries(Object.entries(nodeAttrs).filter(e => !e[0].startsWith(\"t-att\")));\n                propsFromAttrs = widgetDescriptor.extractProps({ attrs: rawAttrs, options: nodeAttrs.options });\n            }\n        } else {\n            this.widgetKey = this._getWidgetKey(Widget);\n        }\n\n        const allowedModifiersNode = ['group', 'page', 'field', 'filter'];\n        if (this.state.node && allowedModifiersNode.includes(this.state.node.tag)) {\n            this.state.modifiers = this.state.attrs.modifiers || {};\n        }\n\n        if (this.state.node && (this.state.node.tag === 'field' || this.state.node.tag === 'filter')) {\n            // deep copy of field because the object is modified\n            // in this widget and this shouldn't impact it\n            var field = jQuery.extend(true, {}, this.fields[this.state.attrs.name]);\n            var unsupportedWidgets = UNSUPPORTED_WIDGETS_BY_VIEW[this.view_type] || [];\n\n            let fieldWidgets;\n            // Converted editors to WOWL and for which one may change field widgets\n            if (hasWowlFieldWidgets) {\n                fieldWidgets = getWowlFieldWidgets(field.type, this.widgetKey, unsupportedWidgets, config.isDebug());\n            } else {\n                // fieldRegistryMap contains all widgets and components but we want to filter\n                // these widgets based on field types (and description for non debug mode)\n                const fieldRegistryMap = Object.assign({}, field_registry.map);\n                fieldWidgets = _.chain(fieldRegistryMap)\n                    .pairs()\n                    .filter(function (arr) {\n                        const supportedFieldTypes = utils.isComponent(arr[1]) ?\n                            arr[1].supportedFieldTypes :\n                            arr[1].prototype.supportedFieldTypes;\n                        const description = self.getFieldInfo(arr[1], 'description');\n                        const isWidgetKeyDescription = arr[0] === self.widgetKey && !description;\n                        var isSupported = _.contains(supportedFieldTypes, field.type)\n                            && arr[0].indexOf('.') < 0 && unsupportedWidgets.indexOf(arr[0]) < 0;\n                        return config.isDebug() ? isSupported : isSupported && description || isWidgetKeyDescription;\n                    })\n                    .sortBy(function (arr) {\n                        const description = self.getFieldInfo(arr[1], 'description');\n                        return description || arr[0];\n                    })\n                    .value();\n            }\n\n            field.field_widgets = fieldWidgets;\n\n            this.state.field = field;\n\n            // only for list & tree view\n            this._computeFieldAttrs();\n\n            // Get dynamic selection for 'full_name' node option of signature widget\n            if (this.widgetKey === 'signature') {\n                var selection = [[]]; // By default, selection should be empty\n                var signFields = _.chain(_.sortBy(_.values(this.fields_in_view), 'string'))\n                    .filter(function (field) {\n                        return _.contains(['char', 'many2one'], field.type);\n                    })\n                    .map(function (val, key) {\n                        return [val.name, config.isDebug() ? _.str.sprintf('%s (%s)', val.string, val.name) : val.string];\n                    })\n                    .value();\n                _.findWhere(OPTIONS_BY_WIDGET[this.widgetKey], {name: 'full_name'}).selection = selection.concat(signFields);\n            }\n            // Get dynamic selection for 'related_start_date' and 'related_end_date' node option of daterange widget\n            if (this.widgetKey === 'daterange') {\n                var selection = [[]];\n                var dateFields = _.chain(_.sortBy(_.values(this.fields_in_view), 'string'))\n                    .filter(function (field) {\n                        return _.contains([self.state.field.type], field.type);\n                    })\n                    .map(function (val, key) {\n                        return [val.name, config.isDebug() ? _.str.sprintf('%s (%s)', val.string, val.name) : val.string];\n                    })\n                    .value();\n                selection = selection.concat(dateFields);\n                _.each(OPTIONS_BY_WIDGET[this.widgetKey], function (option) {\n                    if (_.contains(['related_start_date', 'related_end_date'], option.name)) {\n                        option.selection = selection;\n                    }\n                });\n            }\n            this.OPTIONS_BY_WIDGET = OPTIONS_BY_WIDGET;\n\n            this.has_placeholder = hasWowlFieldWidgets ?\n                propsFromAttrs && propsFromAttrs.dynamicPlaceholder :\n                Widget && Widget.prototype.has_placeholder || false;\n\n            // aggregate makes no sense with some widgets\n            this.hasAggregate = _.contains(['integer', 'float', 'monetary'], field.type) &&\n                !_.contains(['progressbar', 'handle'], this.state.attrs.widget);\n\n            if (this.view_type === 'kanban') {\n                this.showDisplay = this.state.$node && !this.state.$node\n                    .parentsUntil('.o_kanban_record')\n                    .filter(function () {\n                        // if any parent is display flex, display options (float\n                        // right, etc.) won't work\n                        return $(this).css('display') === 'flex';\n                    }).length;\n            }\n        }\n        // Upload image related stuff\n        if (this.state.node && this.state.node.tag === 'button') {\n            const isStatBtn = this.state.node.attrs.class === 'oe_stat_button';\n            const isMethodBtn = this.state.node.attrs.type == 'object';\n            this.showRainbowMan = !isStatBtn && isMethodBtn\n            if (this.showRainbowMan) {\n                this.state.node.widget = \"image\";\n                this.user_id = session.uid;\n                this.fileupload_id = _.uniqueId('o_fileupload');\n                $(window).on(this.fileupload_id, this._onUploadRainbowImageDone.bind(this));\n            }\n        }\n        if (this.state.mode === 'view' && this.view_type === 'gantt') {\n            // precision attribute in gantt is complicated to write so we split it\n            // {'day': 'hour:half', 'week': 'day:half', 'month': 'day', 'year': 'month:quarter'}\n            this.state.attrs.ganttPrecision = this.state.attrs.precision ? pyUtils.py_eval(this.state.attrs.precision) : {};\n\n        }\n        if (this.state.mode === 'view' && this.view_type === 'pivot') {\n            this.state.attrs.colGroupBys = params.colGroupBys.map((gb) => gb.split(\":\")[0]);\n            this.state.attrs.rowGroupBys = params.rowGroupBys.map((gb) => gb.split(\":\")[0]);\n            this.measures = params.measures;\n        }\n        if (this.state.mode === 'view' && this.view_type === 'graph') {\n            this.state.attrs.groupBys = params.groupBys.map((gb) => gb.split(\":\")[0]);\n            this.state.attrs.measure = params.measure === \"__count\" ? \"__count__\" : params.measure;\n        }\n    },\n    /**\n     * @override\n     */\n    start: function () {\n        return this._super.apply(this, arguments).then(this._render.bind(this));\n    },\n    /**\n     * Called each time the view editor sidebar is attached into the DOM.\n    */\n    on_attach_callback: function () {\n        // focus only works on the elements attached on DOM, so we focus\n        // and select the label once the sidebar is attached to DOM\n        if (this.state.mode === 'properties') {\n            this.$('input[name=string]').focus().select();\n        }\n    },\n    /**\n     * @override\n     */\n    destroy: function () {\n        $(window).off(this.fileupload_id);\n        return this._super.apply(this, arguments);\n    },\n\n    //--------------------------------------------------------------------------\n    // Public\n    //--------------------------------------------------------------------------\n\n    /**\n     * @override\n     */\n    getLocalState: function () {\n        return { _isExistingFieldFolded: this._isExistingFieldFolded };\n    },\n    /**\n     * Transform an array domain into its string representation.\n     *\n     * @param {Array} domain\n     * @returns {String}\n     */\n    domainToStr: function (domain) {\n        return Domain.prototype.arrayToString(domain);\n    },\n    /**\n     * Returns class property's value.\n     *\n     * @param {any} fieldType\n     * @param {string} propName\n     */\n    getFieldInfo(fieldType, propName) {\n        return utils.isComponent(fieldType) ?\n            (fieldType.hasOwnProperty(propName) && fieldType[propName]) :\n            (fieldType.prototype.hasOwnProperty(propName) && fieldType.prototype[propName]);\n    },\n    /**\n     * @param {string} fieldName\n     * @returns {boolean} if the field can be renamed\n     */\n    isRenamingAllowed: function (fieldName) {\n        return _.contains(this.renamingAllowedFields, fieldName);\n    },\n    /**\n     * @param {String} value\n     * @returns {Boolean}\n     */\n    isTrue: function (value) {\n        return value !== 'false' && value !== 'False';\n    },\n\n    //--------------------------------------------------------------------------\n    // Private\n    //--------------------------------------------------------------------------\n\n    /**\n     * Called by _onFieldChanged when the field changed is the M2O of an approval\n     * rule for its res.groups field. Update the according rule server-side.\n     * @private\n     */\n    _changeApprovalGroup: function (approvalField) {\n        const record = this.model.get(this.approvalHandle);\n        const groupId = record.data[approvalField].res_id;\n        const ruleId = parseInt(/rule_group_(\\d+)/.exec(approvalField)[1]);\n        this.trigger_up('approval_group_change', {\n            ruleId,\n            groupId,\n        });\n    },\n    /**\n     * Called by _onFieldChanged when the field changed is the M2O of an approval\n     * rule for its res.users field. Update the according rule server-side.\n     * @private\n     */\n     _changeApprovalResponsible: function (approvalField) {\n        const record = this.model.get(this.approvalHandle);\n        const responsibleId = record.data[approvalField].res_id;\n        const ruleId = parseInt(/rule_responsible_(\\d+)/.exec(approvalField)[1]);\n        this.trigger_up('approval_responsible_change', {\n            ruleId,\n            responsibleId,\n        });\n    },\n    /**\n     * @private\n     */\n    _changeFieldGroup: function () {\n        var record = this.model.get(this.groupsHandle);\n        var new_attrs = {};\n        new_attrs.groups = record.data.groups.res_ids;\n        this.trigger_up('view_change', {\n            type: 'attributes',\n            structure: 'edit_attributes',\n            node: this.state.node,\n            new_attrs: new_attrs,\n        });\n    },\n    /**\n     * @private\n     * @param {OdooEvent} ev\n     * @param {Object} oldMapPopupField\n     */\n    _changeMapPopupFields: function (ev, oldMapPopupField) {\n        const options = {structure: 'map_popup'};\n        if (ev.data.changes.map_popup.operation === 'ADD_M2M') {\n            const ids = ev.data.changes.map_popup.ids;\n            options.type = 'add';\n            options.field_ids = Array.isArray(ids) ? ids.map(i => i.id) : [ids.id];\n        } else {\n            options.type = 'remove';\n            options.field_ids = [oldMapPopupField.data.find(i => i.id === ev.data.changes.map_popup.ids[0]).res_id];\n        }\n        this.trigger_up('view_change', options);\n    },\n    /**\n     * @private\n     * @param {OdooEvent} ev\n     * @param {Object} oldPivotMeasuresField\n     */\n    _changePivotMeasuresFields(ev, oldPivotMeasuresField) {\n        const options = {structure: 'pivot_popup'};\n        if (ev.data.changes.pivot_popup.operation === 'ADD_M2M') {\n            const ids = ev.data.changes.pivot_popup.ids;\n            options.type = 'add';\n            options.field_ids = Array.isArray(ids) ? ids.map(i => i.id) : [ids.id];\n        } else {\n            options.type = 'remove';\n            options.field_ids = [oldPivotMeasuresField.data.find(i => i.id === ev.data.changes.pivot_popup.ids[0]).res_id];\n        }\n        this.trigger_up('view_change', options);\n    },\n    /**\n     * @private\n     */\n    _computeFieldAttrs: function () {\n        /* Compute field attributes.\n         * These attributes are either taken from modifiers or attrs\n         * so attrs store their combinaison.\n         */\n        this.state.attrs.invisible = this.state.modifiers.invisible || this.state.modifiers.column_invisible;\n        this.state.attrs.readonly = this.state.modifiers.readonly;\n        this.state.attrs.string = this.state.attrs.string || this.state.field.string;\n        this.state.attrs.help = this.state.attrs.help || this.state.field.help;\n        this.state.attrs.placeholder = this.state.attrs.placeholder || this.state.field.placeholder;\n        this.state.attrs.required = this.state.field.required || this.state.modifiers.required;\n        this.state.attrs.domain = this.state.attrs.domain || this.state.field.domain;\n        this.state.attrs.context = this.state.attrs.context || this.state.field.context;\n        this.state.attrs.related = this.state.field.related ? this.state.field.related : false;\n    },\n\n    _getCalendarModesFromScales() {\n        const allModes = {\n            day: _t(\"day\"),\n            week: _t(\"week\"),\n            month: _t(\"month\"),\n            year: _t(\"year\"),\n        }\n        if (this.state.attrs.scales) {\n            return pick(allModes, ...this.state.attrs.scales.split(\",\"))\n        }\n        return allModes;\n    },\n    /**\n     * @private\n     * @param {Object} modifiers\n     * @returns {Object}\n     */\n    _getNewAttrsFromModifiers: function (modifiers) {\n        var self = this;\n        var newAttributes = {};\n        var attrs = [];\n        var originNodeAttr = this.state.modifiers;\n        _.each(modifiers, function (value, key) {\n                var keyInNodeAndAttrs = _.contains(self.MODIFIERS_IN_NODE_AND_ATTRS, key);\n                var trueValue = value === true || _.isEqual(value, []);\n                var isOriginNodeAttr = key in originNodeAttr;\n\n                if (keyInNodeAndAttrs && !isOriginNodeAttr && trueValue) { // modifier always applied, use modifier attribute\n                    newAttributes[key] = \"1\";\n                } else if (!trueValue) { // modifier not applied or under certain condition, remove modifier attribute and use attrs if any\n                    newAttributes[key] = \"\";\n                    if (value !== false) {\n                        attrs.push(_.str.sprintf(\"\\\"%s\\\": %s\", key, Domain.prototype.arrayToString(value)));\n                    }\n                }\n        });\n        newAttributes.attrs = _.str.sprintf(\"{%s}\", attrs.join(\", \"));\n        return newAttributes;\n    },\n    /**\n     * @private\n     * @param {Class} Widget\n     * @returns {string} the field key\n     */\n    _getWidgetKey: function (Widget) {\n        var widgetKey = this.state.attrs.widget;\n        if (!widgetKey) {\n            const fieldRegistryMap = Object.assign({}, field_registry.map);\n            _.each(fieldRegistryMap, function (val, key) {\n                if (val === Widget) {\n                    widgetKey = key;\n                }\n            });\n            // widget key can be prefixed by a view type (like form.many2many_tags)\n            if (_.str.include(widgetKey, '.')) {\n                widgetKey = widgetKey.split('.')[1];\n            }\n        }\n        return widgetKey;\n    },\n    /**\n     * Render additional sections according to the sidebar mode\n     * i.e. the new & existing field if 'new', etc.\n     *\n     * @private\n     * @returns {Promise}\n     */\n    _render: function () {\n        this.defs = [];\n        if (this.state.mode === 'new') {\n            if (!this._isSearchValueActive) {\n                if (_.contains(['form', 'search'], this.view_type)) {\n                    this._renderComponentsSection();\n                }\n                if (_.contains(['list', 'form'], this.view_type)) {\n                    this._renderNewFieldsSection();\n                }\n            }\n            this._renderExistingFieldsSection();\n            return Promise.all(this.defs).then(() => {\n                delete(this.defs);\n                this.$('.o_web_studio_component').on(\"drag\", _.throttle((event, ui) => {\n                    this.trigger_up('drag_component', {position: {pageX: event.pageX, pageY: event.pageY}, $helper: ui.helper});\n                }, 200));\n            });\n        } else if (this.state.mode === 'properties') {\n            if (this.$('.o_groups').length) {\n                this.defs.push(this._renderWidgetsM2MGroups());\n            }\n            if (this.el.querySelectorAll('.o_studio_sidebar_approval_rule').length) {\n                this.defs.push(this._renderWidgetsApprovalRules());\n            }\n            return Promise.all(this.defs).then(() => delete(this.defs));\n        }\n        if (this.view_type === 'map' && this.$('.o_map_popup_fields').length) {\n            delete(this.defs);\n            return this._renderWidgetsMapPopupFields();\n        }\n        if (this.view_type === 'pivot' && this.$('.o_pivot_measures_fields').length) {\n            delete(this.defs);\n            return this._renderWidgetsPivotMeasuresFields();\n        }\n    },\n    /**\n     * @private\n     */\n    _renderComponentsSection: function () {\n        const widgetClasses = form_component_widget_registry.get(this.view_type + '_components');\n        const formWidgets = widgetClasses.map(FormComponent => new FormComponent(this));\n        const $sectionTitle = $('<h3>', {\n            html: _t('Components'),\n        });\n        const $section = this._renderSection(formWidgets);\n        $section.addClass('o_web_studio_new_components');\n        const $sidebarContent = this.$('.o_web_studio_sidebar_content');\n        $sidebarContent.append($sectionTitle, $section);\n    },\n    /**\n     * @private\n     */\n    _renderExistingFieldsSection: function () {\n        const $existingFields = this.$('.o_web_studio_existing_fields');\n        if ($existingFields.length) {\n            $existingFields.remove();  // clean up before re-rendering\n        }\n\n        let formWidgets;\n        const formComponent = form_component_widget_registry.get('existing_field');\n        if (this.view_type === 'search') {\n            formWidgets = Object.values(this.fields).map(field =>\n                new formComponent(this, field.name, field.string, field.type, field.store));\n        } else {\n            const fields = _.sortBy(this.fields_not_in_view, function (field) {\n                return field.string.toLowerCase();\n            });\n            const attrs = {};\n            if (this.view_type === 'list') {\n                attrs.optional = 'show';\n            }\n            formWidgets = fields.map(field => {\n                return new formComponent(this, field.name, field.string, field.type, field.store, Object.assign({}, attrs));\n            });\n        }\n\n        if (this._searchValue) {\n            formWidgets = formWidgets.filter(result => {\n                const searchValue = this._searchValue.toLowerCase();\n                if (this.debug) {\n                    return result.label.toLowerCase().includes(searchValue) ||\n                        result.description.toLowerCase().includes(searchValue);\n                }\n                return result.label.toLowerCase().includes(searchValue);\n            });\n        }\n\n        const $sidebarContent = this.$('.o_web_studio_sidebar_content');\n        const $existingFieldsSection = $('<div/>', {class: `o_web_studio_existing_fields_section`});\n        const $section = this._renderSection(formWidgets);\n        $section.addClass('o_web_studio_existing_fields');\n        if ($existingFields.length) {\n            this.$('.o_web_studio_existing_fields_section').append($section);\n        } else {\n            const $sectionTitle = $('<h3>', {\n                text: _t('Existing Fields'),\n                class: 'o_web_studio_existing_fields_header',\n            }).append($('<i/>', {class: `o_web_studio_existing_fields_icon fa fa-caret-right ms-2`}));\n            const $sectionSubtitle = $('<h6>', {\n                class: 'small text-white',\n                text: _t('The following fields are currently not in the view.'),\n            });\n            const $sectionSearchDiv = core.qweb.render('web_studio.ExistingFieldsInputSearch');\n            $existingFieldsSection.append($sectionSubtitle, $sectionSearchDiv, $section);\n            $sidebarContent.append($sectionTitle, $existingFieldsSection);\n        }\n\n        this._updateExistingFieldSection();\n    },\n    /**\n     * @private\n     */\n    _renderNewFieldsSection: function () {\n        const widgetClasses = form_component_widget_registry.get('new_field');\n        const attrs = {};\n        if (this.view_type === 'list') {\n            attrs.optional = 'show';\n        }\n        const formWidgets = widgetClasses.map(FormComponent => {\n            return new FormComponent(this, Object.assign({}, attrs));\n        });\n        const $sectionTitle = $('<h3>', {\n            html: _t('New Fields'),\n        });\n        const $section = this._renderSection(formWidgets);\n        $section.addClass('o_web_studio_new_fields');\n\n        const $sidebarContent = this.$('.o_web_studio_sidebar_content');\n        $sidebarContent.append($sectionTitle, $section);\n    },\n    /**\n     * @private\n     * @param {Object} form_widgets\n     * @returns {JQuery}\n     */\n    _renderSection: function (form_widgets) {\n        var self = this;\n        var $components_container = $('<div>').addClass('o_web_studio_field_type_container');\n        form_widgets.forEach(function (form_component) {\n            self.defs.push(form_component.appendTo($components_container));\n        });\n        return $components_container;\n    },\n    /**\n     * Render and attach group and responsible widget for each approval rule.\n     * @private\n     * @returns {Promise}\n     */\n    _renderWidgetsApprovalRules: async function () {\n        const groupTargets = this.el.querySelectorAll('.o_approval_group');\n        const userTargets = this.el.querySelectorAll('.o_approval_responsible');\n        const groupFields = [];\n        const userFields = [];\n        groupTargets.forEach((node) => {\n            groupFields.push({\n                name: 'rule_group_' + node.dataset.ruleId,\n                fields: [{\n                    name: 'id',\n                    type: 'integer',\n                }, {\n                    name: 'display_name',\n                    type: 'char',\n                }],\n                relation: 'res.groups',\n                type: 'many2one',\n                value: parseInt(node.dataset.groupId),\n            })\n        });\n        userTargets.forEach((node) => {\n            userFields.push({\n                name: 'rule_responsible_' + node.dataset.ruleId,\n                fields: [{\n                    name: 'id',\n                    type: 'integer',\n                }, {\n                    name: 'display_name',\n                    type: 'char',\n                }],\n                relation: 'res.users',\n                domain: [['share', '=', false]],\n                type: 'many2one',\n                value: parseInt(node.dataset.responsibleId),\n            })\n        });\n        this.approvalHandle  = await this.model.makeRecord('ir.model.fields', groupFields.concat(userFields));\n        const record = this.model.get(this.approvalHandle);\n        const defs = [];\n        groupTargets.forEach((node, index) => {\n            const options = {\n                idForLabel: 'group',\n                mode: 'edit',\n                noOpen: true,\n            };\n            const fieldName = groupFields[index].name;\n            const many2one = new Many2One(this, fieldName, record, options);\n            this._registerWidget(this.approvalHandle, 'group', many2one);\n            defs.push(many2one.prependTo($(node)));\n        });\n        userTargets.forEach((node, index) => {\n            const options = {\n                idForLabel: 'user',\n                mode: 'edit',\n                noOpen: true,\n            };\n            const fieldName = userFields[index].name;\n            const many2one = new Many2One(this, fieldName, record, options);\n            this._registerWidget(this.approvalHandle, 'user', many2one);\n            defs.push(many2one.prependTo($(node)));\n        });\n\n        return Promise.all(defs);\n    },\n    /**\n     * @private\n     * @returns {Promise}\n     */\n    _renderWidgetsM2MGroups: function () {\n        var self = this;\n        var studio_groups = this.state.attrs.studio_groups && JSON.parse(this.state.attrs.studio_groups);\n        return this.model.makeRecord('ir.model.fields', [{\n            name: 'groups',\n            fields: [{\n                name: 'id',\n                type: 'integer',\n            }, {\n                name: 'display_name',\n                type: 'char',\n            }],\n            relation: 'res.groups',\n            type: 'many2many',\n            value: studio_groups,\n        }]).then(function (recordID) {\n            self.groupsHandle = recordID;\n            var record = self.model.get(self.groupsHandle);\n            var options = {\n                idForLabel: 'groups',\n                mode: 'edit',\n                no_quick_create: true,\n            };\n            var many2many = new Many2ManyTags(self, 'groups', record, options);\n            self._registerWidget(self.groupsHandle, 'groups', many2many);\n            return many2many.appendTo(self.$('.o_groups'));\n        });\n    },\n    /**\n     * @private\n     * @returns {Promise}\n     */\n    _renderWidgetsMapPopupFields: function () {\n        const fieldIDs = JSON.parse(this.state.attrs.studio_map_field_ids || '[]');\n        return this.model.makeRecord('ir.model', [{\n            name: 'map_popup',\n            fields: [{\n                name: 'id',\n                type: 'integer',\n            }, {\n                name: 'display_name',\n                type: 'char',\n            }],\n            domain: [\n                ['model', '=', this.model_name],\n                ['ttype', 'not in', ['many2many', 'one2many', 'binary']]\n            ],\n            relation: 'ir.model.fields',\n            type: 'many2many',\n            value: fieldIDs,\n        }], {\n            map_popup: {\n                can_create: false\n            },\n        }).then(recordID => {\n            this.mapPopupFieldHandle = recordID;\n            const record = this.model.get(this.mapPopupFieldHandle);\n            const many2many = new Many2ManyTags(this, 'map_popup', record, {mode: 'edit'});\n            this._registerWidget(this.mapPopupFieldHandle, 'map_popup', many2many);\n            return many2many.appendTo(this.$('.o_map_popup_fields'));\n        });\n    },\n    /**\n     * Applies the correct classNames on the \"Existing Fields\" section according\n     * to the \"_isExistingFieldFolded\" flag.\n     *\n     * @private\n     */\n    _updateExistingFieldSection() {\n        const icon = this.el.querySelector('.o_web_studio_existing_fields_icon');\n        const section = this.el.querySelector('.o_web_studio_existing_fields_section');\n        if (this._isExistingFieldFolded) {\n            icon.classList.replace('fa-caret-down', 'fa-caret-right');\n            section.classList.add('d-none');\n        } else {\n            icon.classList.replace('fa-caret-right', 'fa-caret-down');\n            section.classList.remove('d-none');\n        }\n    },\n    /**\n     * @private\n     * @returns {Promise}\n     */\n    _renderWidgetsPivotMeasuresFields() {\n        const fieldIDs = JSON.parse(this.state.attrs.studio_pivot_measure_field_ids || '[]');\n        return this.model.makeRecord('ir.model', [{\n            name: 'pivot_popup',\n            fields: [{\n                name: 'id',\n                type: 'integer',\n            }, {\n                name: 'display_name',\n                type: 'char',\n            }],\n            domain: [\n                ['model', '=', this.model_name],\n                ['name', 'in', Object.keys(this.measures)]\n            ],\n            relation: 'ir.model.fields',\n            type: 'many2many',\n            value: fieldIDs,\n        }], {\n            pivot_popup: {\n                can_create: false\n            },\n        }).then(recordID => {\n            this.pivotPopupFieldHandle = recordID;\n            const record = this.model.get(this.pivotPopupFieldHandle);\n            const many2many = new Many2ManyTags(this, 'pivot_popup', record, { mode: 'edit' });\n            this._registerWidget(this.pivotPopupFieldHandle, 'pivot_popup', many2many);\n            return many2many.appendTo(this.$('.o_pivot_measures_fields'));\n        });\n    },\n\n    //--------------------------------------------------------------------------\n    // Handlers\n    //--------------------------------------------------------------------------\n\n    /**\n     * Handle a click on 'remove rule' for approvals; dispatch to view editor\n     * manager.\n     * @private\n     * @param {DOMEvent} ev\n     */\n    _onApprovalArchive: function (ev) {\n        const ruleId = parseInt(ev.currentTarget.dataset.ruleId);\n        this.trigger_up('approval_archive', {\n            ruleId,\n        });\n    },\n    /**\n     * Handle a click on 'add approval rule'; dispatch to view editor\n     * manager.\n     * @private\n     * @param {DOMEvent} ev\n     */\n    _onApprovalNewRule: function (ev) {\n        const model = this.model_name;\n        const isMethod = this.state.node.attrs.type === 'object';\n        const method = isMethod?this.state.node.attrs.name:false\n        const action = isMethod?false:this.state.node.attrs.name;\n        this.trigger_up('approval_new_rule', {\n            model,\n            method,\n            action,\n        });\n    },\n    /**\n     * Handler for the 'set condition' button of approval rules; instanciate\n     * a domain selector dialog that will dispatch an event to the view editor\n     * manager upon submission.\n     * @private\n     * @param {DOMEvent} ev\n     */\n    _onApprovalDomain: function(ev) {\n        const ruleId = parseInt(ev.currentTarget.dataset.ruleId);\n        const rule = this.state.approvalData.rules.find(r => r.id === ruleId);\n        const dialog = new DomainSelectorDialog(this, this.model_name, rule.domain||[], {\n            title: _t('Condition'),\n            readonly: false,\n            fields: this.fields,\n            size: 'medium',\n            operators: [\"=\", \"!=\", \"<\", \">\", \"<=\", \">=\", \"in\", \"not in\", \"set\", \"not set\"],\n            followRelations: true,\n            debugMode: config.isDebug(),\n            $content: $('<div>').append('<p>', {text: _t('The approval rule is only applied to records matching the following condition:')}),\n        }).open();\n        dialog.on(\"domain_selected\", this, function (e) {\n            this.trigger_up('approval_condition', {\n                ruleId: ruleId,\n                domain: e.data.domain,\n            });\n        });\n    },\n    /**\n     * Generic handlers for other operations on approvals; dispatch the correct event\n     * to the view editor manager.\n     * @private\n     * @param {DOMEvent} ev\n     */\n    _onApprovalChange: function(ev) {\n        let type, payload;\n        // input name for approval rules are formatted as `input`_`rule_id`\n        const inputName = ev.target.name;\n        const parsedInput = /([a-zA-Z_]*)_(\\d+)/.exec(inputName);\n        let input, ruleId;\n        if (parsedInput) {\n            input = parsedInput[1];\n            ruleId = parseInt(parsedInput[2]);\n        } else {\n            input = inputName;\n        }\n        switch (input) {\n            case 'studio_approval':\n                // special case: this is the one that actually edits the view\n                return this.trigger_up('view_change', {\n                    structure: 'enable_approval',\n                    node: this.state.node,\n                    enable: ev.target.checked,\n                });\n            case 'approval_message':\n                type = 'operation_approval_message';\n                payload = ev.target.value;\n                break;\n            case 'exclusive_user':\n                type = 'operation_different_users';\n                payload = ev.target.checked;\n                break;\n            default:\n                console.debug('unsupported operation for approval modification', ev.target.name);\n                return false;\n        }\n        this.trigger_up('approval_change', {\n            type: type,\n            payload: payload,\n            ruleId: parseInt(ruleId),\n            node: this.state.node,\n        });\n    },\n    /**\n     * @private\n     */\n    _onDefaultValues: function () {\n        this.trigger_up('open_defaults');\n    },\n    /**\n     * @private\n     * @param {Event} ev\n     */\n    _onDefaultValueChanged: function (ev) {\n        var self = this;\n        var $input = $(ev.currentTarget);\n        var value = $input.val();\n        if (value !== this.state.default_value) {\n            this.trigger_up('default_value_change', {\n                field_name: this.state.attrs.name,\n                value: value,\n                on_fail: function () {\n                    $input.val(self.default_value);\n                }\n            });\n        }\n    },\n    /**\n     * @private\n     * @param {Event} ev\n     */\n    _onDomainAttrs: function (ev) {\n        ev.preventDefault();\n        var modifier = ev.currentTarget.dataset.type;\n\n        // Add id to the list of usable fields\n        var fields = this.fields_in_view;\n        if (!fields.id) {\n            fields = _.extend({\n                id: {\n                    searchable: true,\n                    string: \"ID\",\n                    type: \"integer\",\n                },\n            }, fields);\n        }\n\n        var dialog = new DomainSelectorDialog(this, this.model_name, _.isArray(this.state.modifiers[modifier]) ? this.state.modifiers[modifier] : [], {\n            readonly: false,\n            fields: fields,\n            size: 'medium',\n            operators: [\"=\", \"!=\", \"<\", \">\", \"<=\", \">=\", \"in\", \"not in\", \"set\", \"not set\"],\n            followRelations: false,\n            debugMode: config.isDebug(),\n            $content: $(_.str.sprintf(\n                _t(\"<div><p>The <strong>%s</strong> property is only applied to records matching this filter.</p></div>\"),\n                modifier\n            )),\n        }).open();\n        dialog.on(\"domain_selected\", this, function (e) {\n            var newModifiers = _.extend({}, this.state.modifiers);\n            newModifiers[modifier] = e.data.domain;\n            var new_attrs = this._getNewAttrsFromModifiers(newModifiers);\n            this.trigger_up('view_change', {\n                type: 'attributes',\n                structure: 'edit_attributes',\n                node: this.state.node,\n                new_attrs: new_attrs,\n            });\n        });\n    },\n    /**\n     * @private\n     * @param {Event} ev\n     */\n    _onDomainEditor: function (ev) {\n        ev.preventDefault();\n        var $input = $(ev.currentTarget);\n\n        // If we want to edit a filter domain, we don't have a specific\n        // field to work on but we want a domain on the current model.\n        var model = this.state.node.tag === 'filter' ? this.model_name : this.state.field.relation;\n        var dialog = new DomainSelectorDialog(this, model, $input.val(), {\n            readonly: false,\n            debugMode: config.isDebug(),\n        }).open();\n        dialog.on(\"domain_selected\", this, function (e) {\n            $input.val(Domain.prototype.arrayToString(e.data.domain)).change();\n        });\n    },\n    /**\n     * @private\n     * @param {Event} ev\n     */\n    _onElementChanged: function (ev) {\n        var $input = $(ev.currentTarget);\n        var attribute = $input.attr('name');\n        if (attribute && $input.attr('type') !== 'file') {\n            var new_attrs = {};\n            // rainbow attribute on button needs JSON value, so on change of any rainbow related\n            // attributes, re-form rainbow attribute in required format, excluding falsy/empty\n            // values\n            if (attribute.match('^rainbow')) {\n                if (this.$('input#rainbow').is(':checked')) {\n                    new_attrs.effect = JSON.stringify(_.pick({\n                            message: this.$('input#rainbow_message').val(),\n                            img_url: this.$('input#rainbow_img_url').val(),\n                            fadeout: this.$('select#rainbow_fadeout').val(),\n                        }, _.identity)\n                    );\n                } else {\n                    new_attrs.effect = 'False';\n                }\n            } else if (attribute === 'widget') {\n                // reset widget options\n                var widget = $input.val();\n                new_attrs = {\n                    widget: widget,\n                    options: '',\n                };\n                if (widget === 'image') {\n                    // add small as a default size for image widget\n                    new_attrs.options = JSON.stringify({size: [0, 90]});\n                }\n            } else if ($input.attr('type') === 'checkbox') {\n                if (!_.contains(this.MODIFIERS_IN_NODE_AND_ATTRS, attribute)) {\n                    if ($input.is(':checked')) {\n                        new_attrs[attribute] = $input.data('leave-empty') === 'checked' ? '': 'True';\n                    } else {\n                        new_attrs[attribute] = $input.data('leave-empty') === 'unchecked' ? '': 'False';\n                    }\n                } else {\n                    var newModifiers = _.extend({}, this.state.modifiers);\n                    newModifiers[attribute] = $input.is(':checked');\n                    new_attrs = this._getNewAttrsFromModifiers(newModifiers);\n                    if (attribute === 'readonly' && $input.is(':checked')) {\n                        new_attrs.force_save = 'True';\n                    }\n                }\n            } else if (attribute === 'aggregate') {\n                var aggregate = $input.find('option:selected').attr('name');\n                // only one of them can be set at the same time\n                new_attrs = {\n                    avg: aggregate === 'avg' ? 'Average of ' + this.state.attrs.string : '',\n                    sum: aggregate === 'sum' ? 'Sum of ' +  this.state.attrs.string : '',\n                };\n            } else {\n                new_attrs[attribute] = $input.val();\n            }\n\n            this.trigger_up('view_change', {\n                type: 'attributes',\n                structure: 'edit_attributes',\n                node: this.state.node,\n                new_attrs: new_attrs,\n            });\n        }\n    },\n    /**\n     * @private\n     */\n    _onElementRemoved: function () {\n        var self = this;\n        var elementName = this.state.node.tag;\n        if (elementName === 'div' && this.state.node.attrs.class === 'oe_chatter') {\n            elementName = 'chatter';\n        }\n        if (elementName === 't' && this.state.node.attrs[\"t-name\"] === \"kanban-menu\") {\n            elementName = 'dropdown';\n        }\n        var message = _.str.sprintf(_t('Are you sure you want to remove this %s from the view?'), elementName);\n\n        Dialog.confirm(this, message, {\n            confirm_callback: function () {\n                self.trigger_up('view_change', {\n                    type: 'remove',\n                    structure: 'remove',\n                    node: self.state.node,\n                });\n            }\n        });\n    },\n    /**\n     * @private\n     * @param {Event} ev\n     */\n    _onEmailAliasChanged: function (ev) {\n        var $input = $(ev.currentTarget);\n        var value = $input.val();\n        if (value !== this.state.email_alias) {\n            this.trigger_up('email_alias_change', {\n                value: value,\n            });\n        }\n    },\n    /**\n     * @override\n     * @private\n     */\n    _onFieldChanged: async function (ev) {\n        const approvalGroupChanges = Object.keys(ev.data.changes).filter(f => f.startsWith('rule_group_'));\n        const isApprovalGroupChange = approvalGroupChanges.length;\n        const approvalResponsibleChanges = Object.keys(ev.data.changes).filter(f => f.startsWith('rule_responsible_'));\n        const isApprovalResponsibleChange = approvalResponsibleChanges.length;\n        const isMapChange = Object.keys(ev.data.changes).filter(f => f === 'map_popup').length;\n        const isPivotChange = Object.keys(ev.data.changes).filter(f => f === 'pivot_popup').length;\n        const approvalGroupField = isApprovalGroupChange && approvalGroupChanges[0];\n        const approvalResponsibleField = isApprovalResponsibleChange && approvalResponsibleChanges[0];\n        const oldMapPopupField = this.mapPopupFieldHandle && this.model.get(this.mapPopupFieldHandle).data.map_popup;\n        const oldPivotMeasureField = this.pivotPopupFieldHandle && this.model.get(this.pivotPopupFieldHandle).data.pivot_popup;\n        const result = await StandaloneFieldManagerMixin._onFieldChanged.apply(this, arguments);\n        if (isMapChange) {\n            this._changeMapPopupFields(ev, oldMapPopupField);\n        } else if (isApprovalGroupChange) {\n            this._changeApprovalGroup(approvalGroupField);\n        } else if (isApprovalResponsibleChange) {\n            this._changeApprovalResponsible(approvalResponsibleField);\n        } else if (isPivotChange) {\n            this._changePivotMeasuresFields(ev, oldPivotMeasureField);\n        } else {\n            this._changeFieldGroup();\n        }\n        return result;\n    },\n    /**\n     * Renames the field after confirmation from user.\n     *\n     * @private\n     * @param {Event} ev\n     */\n    _onFieldNameChanged: function (ev) {\n        var $input = $(ev.currentTarget);\n        var attribute = $input.attr('name');\n        if (!attribute) {\n            return;\n        }\n        var newName = 'x_studio_' + $input.val().replace(/^_+/,\"\");\n        var message;\n        if (newName.match(/[^a-z0-9_]/g) || newName.length >= 54) {\n            message = _.str.sprintf(_t('The new name can contain only a to z lower letters, numbers and _, with ' +\n                'a maximum of 53 characters.'));\n            Dialog.alert(this, message);\n            return;\n        }\n        if (newName in this.fields) {\n            message = _.str.sprintf(_t('A field with the same name already exists.'));\n            Dialog.alert(this, message);\n            return;\n        }\n        this.trigger_up('field_renamed', {\n            oldName: this.state.node.attrs.name,\n            newName: newName,\n        });\n    },\n    /**\n     * @private\n     */\n    _onFieldParameters: function () {\n        this.trigger_up('open_field_form', {field_name: this.state.attrs.name});\n    },\n    /**\n     * @private\n     * @param {jQueryEvent} ev\n     */\n    _onOptionsChanged: function (ev) {\n        var $input = $(ev.currentTarget);\n\n        // We use the original `options` attribute on the node here and evaluate\n        // it (same processing as in basic_view) ; we cannot directly take the\n        // options dict because it usually has been modified in place in field\n        // widgets (see Many2One @init for example).\n        var nodeOptions = this.state.node.attrs.options;\n        var newOptions = nodeOptions ? pyUtils.py_eval(nodeOptions) : {};\n        var optionName = $input.attr('name');\n\n        var optionValue;\n        if ($input.attr('type') === 'checkbox') {\n            optionValue = $input.is(':checked');\n\n            if ((optionValue && $input.data('leave-empty') !== 'checked') ||\n                (!optionValue && $input.data('leave-empty') !== 'unchecked')) {\n                newOptions[optionName] = optionValue;\n            } else {\n                delete newOptions[optionName];\n            }\n        } else {\n            optionValue = $input.val();\n            try {\n                // the value might have been stringified\n                optionValue = JSON.parse(optionValue);\n            } catch {}\n\n            newOptions[optionName] = optionValue;\n        }\n\n        this.trigger_up('view_change', {\n            type: 'attributes',\n            structure: 'edit_attributes',\n            node: this.state.node,\n            new_attrs: {\n                options: JSON.stringify(newOptions),\n            },\n        });\n    },\n    /**\n     * @private\n     */\n    _onRainbowImageReset: function () {\n        this.$('input#rainbow_img_url').val('');\n        this.$('input#rainbow_img_url').trigger('change');\n    },\n    /**\n     * Called when the search input value is changed -> adapts the fields list\n     *\n     * @private\n     */\n    _onSearchInputChange: function () {\n        this._searchValue = this.$('.o_web_studio_sidebar_search_input').val();\n        this._isSearchValueActive = true;\n        this._render();\n    },\n    /**\n     * fold/unfold the 'existing fields' section.\n     *\n     * @private\n     */\n    _onClickExistingFieldHeader: function () {\n        this._isExistingFieldFolded = !this._isExistingFieldFolded;\n        this._updateExistingFieldSection();\n    },\n    /**\n     * @private\n     */\n    _onRestoreDefaultView: function () {\n        var self = this;\n        var message = _t('Are you sure you want to restore the default view?\\r\\nAll customization done with Studio on this view will be lost.');\n\n        Dialog.confirm(this, message, {\n            confirm_callback: function () {\n                self.trigger_up('view_change', {\n                    structure: 'restore',\n                });\n            },\n            dialogClass: 'o_web_studio_preserve_space'\n        });\n    },\n    /**\n     * @private\n     * @param {Event} ev\n     */\n    _onSelectionValues: function (ev) {\n        ev.preventDefault();\n        this.trigger_up('field_edition', {\n            node: this.state.node,\n        });\n    },\n    /**\n     * @private\n     * @param {Event} ev\n     */\n    _onSetCover: function (ev) {\n        var $input = $(ev.currentTarget);\n        this.trigger_up('view_change', {\n            node: this.state.node,\n            structure: 'kanban_cover',\n            type: $input.is(':checked') ? 'kanban_set_cover' : 'remove',\n        });\n        // If user closes the field selector pop up, check-box should remain unchecked.\n        // Updated sidebar property will set this box to checked if the cover image\n        // is enabled successfully.\n        $input.prop(\"checked\", false);\n    },\n    /**\n     * @private\n     * @param {Event} ev\n     */\n    _onShowInvisibleToggled: function (ev) {\n        this.state.show_invisible = !!$(ev.currentTarget).is(\":checked\");\n        this.trigger_up('toggle_form_invisible', {show_invisible : this.state.show_invisible});\n    },\n    /**\n     * @private\n     */\n    _onTab: function (ev) {\n        var mode = $(ev.currentTarget).attr('name');\n        this.trigger_up('sidebar_tab_changed', {\n            mode: mode,\n        });\n    },\n    /**\n     * @private\n     */\n    _onUploadRainbowImage: function () {\n        var self = this;\n        this.$('input.o_input_file').on('change', function () {\n            self.$('form.o_form_binary_form').submit();\n        });\n        this.$('input.o_input_file').click();\n    },\n    /**\n     * @private\n     * @param {Event} event\n     * @param {Object} result\n     */\n    _onUploadRainbowImageDone: function (event, result) {\n        this.$('input#rainbow_img_url').val(_.str.sprintf('/web/content/%s', result.id));\n        this.$('input#rainbow_img_url').trigger('change');\n    },\n    /**\n     * @private\n     * @param {string} attribute\n     * @param {string} input\n     * @param {Object} newAttrs\n     */\n    _onChangedGroupBys(attribute, input, newAttrs) {\n        const options = {};\n        if (!newAttrs.length || (['measure'].includes(attribute) && newAttrs.length === 1 && newAttrs[0] === '__count__') ||\n            (['second_groupby', 'second_row_groupby'].includes(attribute) && newAttrs.length < 2)) {\n            options.operationType = 'add';\n            options.name = [input];\n        } else if (newAttrs.length && input.length) {\n            options.operationType = 'replace';\n            options.oldname = ['second_groupby', 'second_row_groupby'].includes(attribute) ? newAttrs[1] : newAttrs[0];\n            options.name = [input];\n        } else {\n            options.operationType = 'remove';\n            options.name = ['second_groupby', 'second_row_groupby'].includes(attribute) ? [newAttrs[1]] : [newAttrs[0]];\n        }\n        return options;\n    },\n    /**\n     * @private\n     * @param {Event} ev\n     */\n    _onViewChanged: function (ev) {\n        var $input = $(ev.currentTarget);\n        var attribute = $input.attr('name');\n        if (this.view_type === 'gantt' && _.str.include(attribute, 'precision_')) {\n            // precision attribute in gantt is complicated to write so we split it\n            var newPrecision = this.state.attrs.ganttPrecision;\n            newPrecision[attribute.split('precision_')[1]] = $input.val();\n\n            this.trigger_up('view_change', {\n                type: 'attributes',\n                structure: 'view_attribute',\n                new_attrs: {\n                    precision: JSON.stringify(newPrecision),\n                },\n            });\n        } else if (this.view_type === 'list' && ['sort_field', 'sort_order'].includes(attribute)) {\n            const new_attrs = {};\n            if (attribute === 'sort_field' && !$input.val()) {\n                this.$('#sort_order_div').addClass('d-none');\n                if (!this.defaultOrder) return;\n                new_attrs['default_order'] = '';\n            } else {\n                new_attrs ['default_order'] = this.$(\"#sort_field\").val() + ' ' + this.$(\"#sort_order\").val();\n            }\n            this.trigger_up('view_change', {\n                type: 'attributes',\n                structure: 'view_attribute',\n                new_attrs: new_attrs,\n            });\n        } else if (this.view_type === 'map' && attribute === 'routing') {\n            // Remove Sort By(default_order) value when routing is disabled\n            const newAttrs = {};\n            if ($input.is(':checked')) {\n                newAttrs[attribute] = $input.data('leave-empty') === 'checked' ? '' : 'true';\n            } else {\n                newAttrs[attribute] = $input.data('leave-empty') === 'unchecked' ? '' : 'false';\n                newAttrs['default_order'] = '';\n            }\n            this.trigger_up('view_change', {\n                type: 'attributes',\n                structure: 'view_attribute',\n                new_attrs: newAttrs,\n            });\n        } else if (this.view_type === 'graph' && ['stacked', 'first_groupby', 'second_groupby', 'measure'].includes(attribute)) {\n            if (attribute === 'stacked') {\n                const newAttrs = {};\n                newAttrs['stacked'] = attribute && $input.is(':checked') ? 'true' : 'False';\n                this.trigger_up('view_change', {\n                    type: 'attributes',\n                    structure: 'view_attribute',\n                    new_attrs: newAttrs,\n                });\n            } else {\n                let options = {};\n                options.type = $input.attr('type');\n                options.viewType = this.view_type;\n                if (attribute === 'first_groupby') {\n                    const newoptions = this._onChangedGroupBys(attribute, $input.val(), this.state.attrs.groupBys);\n                    options = {...options, ...newoptions};\n                }\n                if (attribute === 'second_groupby') {\n                    const newoptions = this._onChangedGroupBys(attribute, $input.val(), this.state.attrs.groupBys);\n                    options = {...options, ...newoptions};\n                }\n                if (attribute === 'measure') {\n                    const newoptions = this._onChangedGroupBys(attribute, $input.val(), [this.state.attrs.measure]);\n                    options = {...options, ...newoptions};\n                }\n                this.trigger_up('view_change', {\n                    structure: 'graph_pivot_groupbys_fields',\n                    options,\n                });\n            }\n        } else if (this.view_type === 'pivot' && ['column_groupby', 'first_row_groupby', 'second_row_groupby'].includes(attribute)) {\n            let options = {};\n            options.type = $input.attr('type');\n            options.viewType = this.view_type;\n            if (attribute === 'column_groupby') {\n                const newoptions = this._onChangedGroupBys(attribute, $input.val(), this.state.attrs.colGroupBys);\n                options = {...options, ...newoptions};\n            }\n            if (attribute === 'first_row_groupby') {\n                const newoptions = this._onChangedGroupBys(attribute, $input.val(), this.state.attrs.rowGroupBys);\n                options = {...options, ...newoptions};\n            }\n            if (attribute === 'second_row_groupby') {\n                const newoptions = this._onChangedGroupBys(attribute, $input.val(), this.state.attrs.rowGroupBys);\n                options = {...options, ...newoptions};\n            }\n            this.trigger_up('view_change', {\n                structure: 'graph_pivot_groupbys_fields',\n                options,\n            });\n        } else if (attribute) {\n            var new_attrs = {};\n            if ($input.attr('type') === 'checkbox') {\n                if (($input.is(':checked') && !$input.data('inverse')) || (!$input.is(':checked') && $input.data('inverse'))) {\n                    new_attrs[attribute] = $input.data('leave-empty') === 'checked' ? '': 'true';\n                } else {\n                    new_attrs[attribute] = $input.data('leave-empty') === 'unchecked' ? '': 'false';\n                }\n            } else {\n                new_attrs[attribute] = $input.val();\n            }\n            this.trigger_up('view_change', {\n                type: 'attributes',\n                structure: 'view_attribute',\n                new_attrs: new_attrs,\n            });\n        }\n    },\n    /**\n     * @private\n     */\n    _onViewParameters: function () {\n        this.trigger_up('open_record_form_view');\n    },\n    /**\n     * @private\n     */\n    _onXMLEditor: function () {\n        this.trigger_up('open_xml_editor');\n    },\n});\n", "/** @odoo-module */\n\n/**\n * A list of field widget keys of the wowl's field registry (`registry.category(\"fields\")`)\n * that are safe for the user to swith to when editing a field's properties in the view editor's sidebar.\n *\n * Other widgets either don't make sense for that use because they are too specific, or they need\n * specific implementation details provided by some view to be usable.\n */\nexport const SIDEBAR_SAFE_FIELDS = [\n  \"badge\",\n  \"selection_badge\",\n  \"handle\",\n  \"percentpie\",\n  \"radio\",\n  \"selection\",\n  \"image_url\",\n  \"ace\",\n  \"priority\",\n  \"date\",\n  \"datetime\",\n  \"remaining_days\",\n  \"email\",\n  \"phone\",\n  \"url\",\n  \"binary\",\n  \"image\",\n  \"pdf_viewer\",\n  \"boolean\",\n  \"state_selection\",\n  \"boolean_toggle\",\n  \"statusbar\",\n  \"float\",\n  \"float_time\",\n  \"integer\",\n  \"monetary\",\n  \"percentage\",\n  \"progressbar\",\n  \"text\",\n  \"boolean_favorite\",\n  \"char\",\n  \"statinfo\",\n  \"html\",\n  \"text_emojis\",\n  \"CopyClipboardChar\",\n  \"CopyClipboardText\",\n  \"CopyClipboardURL\",\n  \"char_emojis\",\n  \"many2many_tags\",\n  \"many2one\",\n  \"many2many\",\n  \"one2many\",\n  \"sms_widget\",\n  \"reference\",\n  \"daterange\",\n];\n", "odoo.define('web_studio.SearchRenderer', function (require) {\n\"use strict\";\n\nvar config = require('web.config');\nvar core = require('web.core');\nvar utils = require('web.utils');\nvar Widget = require('web.Widget');\n\nvar qweb = core.qweb;\n\n\nvar SearchRenderer = Widget.extend({\n    className: \"o_search_view\",\n\n    /**\n     * @constructor\n     * @param {Object} fields_view\n     * @param {Object} fields_view.arch\n     * @param {Object} fields_view.fields\n     * @param {String} fields_view.model\n     */\n    init: function (parent, fields_view) {\n        this._super.apply(this, arguments);\n        // see SearchView init\n        fields_view = this._processFieldsView(_.clone(fields_view));\n        this.arch = fields_view.arch;\n        this.fields = fields_view.fields;\n        this.model = fields_view.model;\n    },\n    /**\n     * @override\n     */\n    start: function () {\n        this.$el.addClass(this.arch.attrs.class);\n        return this._super.apply(this, arguments).then(this._render.bind(this));\n    },\n\n    //--------------------------------------------------------------------------\n    // Public\n    //--------------------------------------------------------------------------\n\n    /**\n     * This is the reverse operation from getLocalState.  With this method, we\n     * expect the renderer to restore all DOM state, if it is relevant.\n     *\n     * This method is called after each updateState, by the controller.\n     * Needed here because the search widget is not a view anymore\n     * in the web client but used as one in studio\n     *\n     * @see getLocalState\n     * @param {any} localState the result of a call to getLocalState\n     */\n    setLocalState: function () {\n    },\n    /**\n     * Returns any relevant state that the renderer might want to keep.\n     *\n     * The idea is that a renderer can be destroyed, then be replaced by another\n     * one instantiated with the state from the model and the localState from\n     * the renderer, and the end result should be the same.\n     *\n     * The kind of state that we expect the renderer to have is mostly DOM state\n     * such as the scroll position, the currently active tab page, ...\n     *\n     * This method is called before each updateState, by the controller.\n     *\n     * @see setLocalState\n     * @returns {any}\n     */\n    getLocalState: function () {\n    },\n\n    //--------------------------------------------------------------------------\n    // Private\n    //--------------------------------------------------------------------------\n\n    /**\n     * Return nodes which can be displayed in search view for Studio.\n     * This method is overridden in search_editor to admit invisible fields.\n     *\n     * @private\n     * @returns {Array} the list of elements to display\n     */\n    _getNodesToTreat() {\n        return this.arch.children.slice().filter(node => node.attrs.invisible !== \"1\");\n    },\n    /**\n     * Processes a fieldsView in place. In particular, parses its arch.\n     *\n     * @todo: this function is also defined in SearchView and AbstractView ; the\n     * code duplication could be removed once the SearchView will be rewritten.\n     * @private\n     * @param {Object} fv\n     * @param {string} fv.arch\n     * @returns {Object} the processed fieldsView\n     */\n    _processFieldsView: function (fv) {\n        var doc = $.parseXML(fv.arch).documentElement;\n        fv.arch = utils.xml_to_json(doc, true);\n        return fv;\n    },\n    /**\n     * Parse the arch to render each node.\n     *\n     * @private\n     */\n    _render: function () {\n        var self = this;\n        this.defs = [];\n        this.$el.empty();\n        this.$el.html(qweb.render('web_studio.searchRenderer', this.widget));\n        this.first_field = undefined;\n        this.first_filter = undefined;\n        this.first_group_by = undefined;\n        let nodesToTreat = this._getNodesToTreat();\n        while (nodesToTreat.length) {\n            var node = nodesToTreat.shift();\n            if (node.tag === \"field\"){\n                if (!self.first_field){\n                    self.first_field = node;\n                }\n                self._renderField(node);\n            } else if (node.tag === \"filter\") {\n                if (/(['\"])group_by\\1\\s*:/.test(node.attrs.context || '')) {\n                    if (!self.first_group_by) {\n                        self.first_group_by = node;\n                    }\n                    self._renderGroupBy(node);\n                } else {\n                    if (!self.first_filter) {\n                        self.first_filter = node;\n                    }\n                    self._renderFilter(node);\n                }\n            } else if (node.tag === \"separator\") {\n                if (!self.first_filter){\n                    self.first_filter = node;\n                }\n                self._renderSeparator(node);\n            } else if (node.tag === \"group\") {\n                nodesToTreat = nodesToTreat.concat(node.children);\n            }\n        }\n        return Promise.all(this.defs);\n    },\n    /**\n     * @private\n     * @param {Object} node\n     *\n     * @returns {jQueryElement}\n     */\n    _renderField: function (node) {\n        var $tbody = this.$('.o_web_studio_search_autocompletion_fields tbody');\n        var field_string = this.fields[node.attrs.name].string;\n        var display_string = node.attrs.string || field_string;\n        if (config.isDebug()) {\n            display_string += ' (' + node.attrs.name +')';\n        }\n        var $new_row = $('<tr>').append(\n            $('<td>').append(\n            $('<span>').text(display_string)\n        ));\n        $tbody.append($new_row);\n        return $new_row;\n    },\n    /**\n     * @private\n     * @param {Object} node\n     *\n     * @returns {jQueryElement}\n     */\n    _renderFilter: function (node) {\n        var $tbody = this.$('.o_web_studio_search_filters tbody');\n        var display_string = node.attrs.string || node.attrs.help;\n        var $new_row = $('<tr>').append(\n            $('<td>').append(\n            $('<span>').text(display_string)\n        ));\n        $tbody.append($new_row);\n        return $new_row;\n    },\n    /**\n     * @private\n     * @param {Object} node\n     *\n     * @returns {jQueryElement}\n     */\n    _renderGroupBy: function (node) {\n        var $tbody = this.$('.o_web_studio_search_group_by tbody');\n        // the domain is define like this:\n        // context=\"{'group_by': 'field'}\"\n        // we use a regex to get the field string\n        var display_string = node.attrs.string;\n        var field_name = node.attrs.context.match(\":.?'(.*)'\")[1];\n        if (config.isDebug()) {\n            display_string += ' (' + field_name +')';\n        }\n        var $new_row = $('<tr>').append(\n            $('<td>').append(\n            $('<span>').text(display_string)\n        ));\n        $tbody.append($new_row);\n        return $new_row;\n    },\n    /**\n     * @private\n     * @param {Object} node\n     *\n     * @returns {jQueryElement}\n     */\n    _renderSeparator: function () {\n        var $tbody = this.$('.o_web_studio_search_filters tbody');\n        var $new_row = $('<tr class=\"o_web_studio_separator\">').html('<td><hr/></td>');\n\n        $tbody.append($new_row);\n        return $new_row;\n    },\n});\n\nreturn SearchRenderer;\n\n});\n", "odoo.define('web_studio.EditorMixin', function() {\n\"use strict\";\n\nreturn {\n    /**\n     * Find and return the first node found in the view arch\n     * satifying the given node description.\n     * Breadth-first search.\n     * @param {Object} viewArch\n     * @param {Object} nodeDescription\n     * @param {string} nodeDescription.tag\n     * @param {Object} nodeDescription.attrs\n     * @returns {Object}\n     */\n    findNode: function (viewArch, nodeDescription) {\n        // TODO transparently check t-att- attributes ?\n        // TODO support modifiers objects ?\n        const nodesToCheck = [viewArch];\n        while (nodesToCheck.length > 0) {\n            const node = nodesToCheck.shift();\n            const match = this._satisfiesNodeDescription(node, nodeDescription);\n            if (match) return node;\n            nodesToCheck.push(...(node.children || []));\n        }\n    },\n    /**\n     * Handles the drag and drop of a jQuery UI element.\n     *\n     * @param {JQuery} $drag\n     * @param {Object} node\n     * @param {string} position\n     */\n    handleDrop: function ($drag, node, position) {\n        var isNew = $drag.hasClass('o_web_studio_component');\n        var values;\n        if (isNew) {\n            values = {\n                type: 'add',\n                structure: $drag.data('structure'),\n                field_description: $drag.data('field_description'),\n                node: node,\n                new_attrs: $drag.data('new_attrs'),\n                position: position,\n            };\n        } else {\n            var movedFieldName = $drag.data('name');\n            if (node.attrs.name === movedFieldName) {\n                // the field is dropped on itself\n                return;\n            }\n            values = {\n                type: 'move',\n                node: node,\n                position: position,\n                structure: 'field',\n                new_attrs: {\n                    name: movedFieldName,\n                },\n            };\n        }\n        this.trigger_up('on_hook_selected');\n        this.trigger_up('view_change', values);\n    },\n    /**\n     * Highlight the nearest hook regarding the position and remove the\n     * highlighto on other elements.\n     *\n     * @param {JQuery} $helper - the helper being dragged\n     * @param {Object} position - {pageX: x, pageY: y}\n     */\n    highlightNearestHook: function ($helper, position) {\n        this.$('.o_web_studio_nearest_hook').removeClass('o_web_studio_nearest_hook');\n        // to be implemented by each editor\n    },\n    /*\n     * Set the style and the corresponding event on a selectable node (fields,\n     * groups, etc.) of the editor\n     */\n    setSelectable: function ($el) {\n        var self = this;\n        $el.click(function () {\n            self.unselectedElements();\n            $(this).addClass('o_web_studio_clicked');\n        })\n        .mouseover(function () {\n            if (self.$('.ui-draggable-dragging').length) {\n                return;\n            }\n            $(this).addClass('o_web_studio_hovered');\n        })\n        .mouseout(function () {\n            $(this).removeClass('o_web_studio_hovered');\n        });\n    },\n    unselectedElements: function () {\n        this.selected_node_id = false;\n        var $el = this.$('.o_web_studio_clicked');\n        $el.removeClass('o_web_studio_clicked');\n        if ($el.find('.blockUI')) {\n            $el.find('.blockUI').parent().unblock();\n        }\n    },\n\n    //--------------------------------------------------------------------------\n    // Private\n    //--------------------------------------------------------------------------\n\n    /**\n     * Check if the node satifies the given node description\n     * @param {Object} node\n     * @param {Object} nodeDescription\n     * @param {Object} nodeDescription.attrs\n     * @param {string} nodeDescription.tag\n     * @returns {boolean}\n     */\n    _satisfiesNodeDescription: function (node, nodeDescription) {\n        const attrs = Object.assign({}, nodeDescription);\n        const tag = attrs.tag;\n        delete attrs.tag;\n        const checkAttrs = Object.keys(attrs).length !== 0;\n        if (tag && tag !== node.tag) return false;\n        if (tag && !checkAttrs) return true;\n        const match = (a1, a2) => typeof(a1) === 'string' ? a1.includes(a2) : a1 === a2;\n        const matchedAttrs = Object\n            .entries(attrs)\n            .filter(([attr, value]) => match(node.attrs[attr], value))\n            .map(([attr, value]) => attr);\n        return matchedAttrs.length > 0 && matchedAttrs.length === Object.keys(attrs).length;\n    },\n\n    preprocessArch: function(arch) {\n        return arch;\n    },\n};\n\n});\n", "odoo.define('web_studio.EditorMixinOwl', function (require) {\n    \"use strict\";\n\n    return Editor => class extends Editor {\n        handleDrop() { }\n\n        highlightNearestHook() { }\n\n        setSelectable() { }\n\n        unselectedElements() { }\n    };\n\n});\n", "odoo.define('web_studio.FormEditorHook', function (require) {\n\"use strict\";\n\nvar Widget = require('web.Widget');\n\nvar FormEditorHook = Widget.extend({\n    className: 'o_web_studio_hook',\n    /**\n     * @constructor\n     * @param {Widget} parent\n     * @param {String} position values: inside | after | before\n     * @param {Integer} hook_id\n     * @param {String} tagName values: generidTag | '' | tr | div\n     */\n    init: function (parent, position, hook_id, tagName) {\n        this._super.apply(this, arguments);\n        this.position = position;\n        this.hook_id = hook_id;\n        this.tagName = tagName || 'div';\n    },\n    /**\n     * @override\n     */\n    start: function () {\n        this.$el.data('hook_id', this.hook_id);\n\n        var $content;\n        switch (this.tagName) {\n            case 'tr':\n                $content = $('<td colspan=\"2\">').append(this._renderSpan());\n                break;\n            default:\n                $content = this._renderSpan();\n                break;\n        }\n        this.$el.append($content);\n\n        return this._super.apply(this, arguments);\n    },\n\n    //--------------------------------------------------------------------------\n    // Private\n    //--------------------------------------------------------------------------\n\n    /**\n     * @private\n     * @returns {JQuery}\n     */\n    _renderSpan: function () {\n        return $('<span>').addClass('o_web_studio_hook_separator');\n    },\n});\n\nreturn FormEditorHook;\n\n});\n", "odoo.define('web_studio.NewButtonBoxDialog', function (require) {\n\"use strict\";\n\nvar core = require('web.core');\nvar Dialog = require('web.Dialog');\nvar relational_fields = require('web.relational_fields');\n\nvar StandaloneFieldManagerMixin = require('web.StandaloneFieldManagerMixin');\nvar utils = require('web_studio.utils');\n\nvar Many2one = relational_fields.FieldMany2One;\nvar _t = core._t;\n\nvar NewButtonBoxDialog = Dialog.extend(StandaloneFieldManagerMixin, {\n    template: 'web_studio.NewButtonBoxDialog',\n    events: {\n        'click .o_web_studio_icon_selector': '_on_IconSelector',\n    },\n    /**\n     * @override\n     */\n    init: function (parent, model_name) {\n        this.model_name = model_name;\n        this.ICONS = utils.ICONS;\n\n        var options = {\n            title: _t('Add a Button'),\n            size: 'small',\n            buttons: [{\n                text: _t(\"Confirm\"),\n                classes: 'btn-primary',\n                click: this._onConfirm.bind(this)\n            }, {\n                text: _t(\"Cancel\"),\n                close: true\n            }],\n        };\n\n        this._super(parent, options);\n        StandaloneFieldManagerMixin.init.call(this);\n\n        var self = this;\n        this.opened().then(function () {\n            // focus on input\n            self.$el.find('input[name=\"string\"]').focus();\n        });\n    },\n    /**\n     * @override\n     */\n    start: function () {\n        var self = this;\n        var defs = [];\n        defs.push(this._super.apply(this, arguments));\n        defs.push(this.model.makeRecord('ir.actions.act_window', [{\n            name: 'field',\n            relation: 'ir.model.fields',\n            type: 'many2one',\n            domain: [['relation', '=', this.model_name], ['ttype', 'in', ['many2one', 'many2many']], ['store', '=', true]],\n        }]).then(function (recordID) {\n            var options = {\n                mode: 'edit',\n                attrs: {\n                    can_create: false,\n                    can_write: false,\n                },\n            };\n            var record = self.model.get(recordID);\n            self.many2one = new Many2one(self, 'field', record, options);\n            self._registerWidget(recordID, 'field', self.many2one);\n            self.many2one.appendTo(self.$('.js_many2one_field'));\n        }));\n        return Promise.all(defs);\n    },\n\n    //--------------------------------------------------------------------------\n    // Handlers\n    //--------------------------------------------------------------------------\n\n    /**\n     * @private\n     */\n    _onConfirm: function () {\n        var string = this.$('input[name=\"string\"]').val() || 'New Button';\n        var icon = this.selected_icon || this.ICONS[0].split(' ')[1];\n        var field_id = this.many2one.value && this.many2one.value.res_id;\n        if (!field_id) {\n            Dialog.alert(this, _t('Select a related field.'));\n            return;\n        }\n        this.trigger('saved', {\n            string: string,\n            field_id: field_id,\n            icon: icon,\n        });\n        this.close();\n    },\n    /**\n     * @private\n     * @param {Event} ev\n     */\n    _on_IconSelector: function (ev) {\n        var $el = $(ev.currentTarget);\n        this.$('.o_selected').removeClass('o_selected');\n        $el.addClass('o_selected');\n        var icon = $(ev.currentTarget).data('value');\n        // only takes `fa-...` instead of `fa fa-...`\n        this.selected_icon = icon && icon.split(' ')[1];\n    },\n});\n\nreturn NewButtonBoxDialog;\n\n});\n", "odoo.define('web_studio.SearchEditor', function (require) {\n\"use strict\";\n\nvar config = require('web.config');\nconst core = require('web.core');\nvar Domain = require('web.Domain');\nvar DomainSelectorDialog = require(\"web.DomainSelectorDialog\");\n\nvar EditorMixin = require('web_studio.EditorMixin');\nvar FormEditorHook = require('web_studio.FormEditorHook');\nvar SearchRenderer = require('web_studio.SearchRenderer');\nvar utils = require('web_studio.utils');\n\nconst _t = core._t;\n\nvar SearchEditor = SearchRenderer.extend(EditorMixin, {\n    nearest_hook_tolerance: 50,\n    className: SearchRenderer.prototype.className + ' o_web_studio_search_view_editor',\n    custom_events: _.extend({}, SearchRenderer.prototype.custom_events, {\n        'on_hook_selected': function () {\n            this.selected_node_id = false;\n        },\n    }),\n    /**\n     * @constructor\n     */\n    init: function (parent, state, params) {\n        this._super.apply(this, arguments);\n        this.hook_nodes = {};\n        this.node_id = 1;\n        this.show_invisible = params.show_invisible;\n        this.FILTER_TYPES = ['date', 'datetime'];\n        this.GROUPABLE_TYPES = ['many2one', 'many2many', 'char', 'boolean', 'selection', 'date', 'datetime'];\n    },\n\n    //--------------------------------------------------------------------------\n    // Public\n    //--------------------------------------------------------------------------\n\n    /**\n     * @override\n     */\n    getLocalState: function () {\n        var state = this._super.apply(this, arguments) || {};\n        if (this.selected_node_id) {\n            state.selected_node_id = this.selected_node_id;\n        }\n        return state;\n    },\n    /**\n     * @override\n     */\n    highlightNearestHook: function ($helper, position) {\n        EditorMixin.highlightNearestHook.apply(this, arguments);\n\n        var $nearest_form_hook = this.$('.o_web_studio_hook')\n            .touching({\n                    x: position.pageX - this.nearest_hook_tolerance,\n                    y: position.pageY - this.nearest_hook_tolerance,\n                    w: this.nearest_hook_tolerance*2,\n                    h: this.nearest_hook_tolerance*2\n                },{\n                    container: document.body\n                }\n            ).nearest({x: position.pageX, y: position.pageY}, {container: document.body}).eq(0);\n        if ($nearest_form_hook.length) {\n            // We check what is being dropped and in which table\n            // since in the autocompletion fields we can drop fields\n            // in group_by tables we can drop groupabble fields and separator\n            // and in the filter table we can only drop filter and separator and\n            // date/datetime components.\n            const hookClasses = $helper.attr(\"class\");\n            const tableType = $nearest_form_hook.closest('table').data('type');\n            const isField = hookClasses.indexOf(\"o_web_studio_field\") > -1;\n            const isFilter = hookClasses.indexOf(\"o_web_studio_filter\") > -1;\n            const isSeparator = hookClasses.indexOf(\"o_web_studio_filter_separator\") > -1;\n            const newAttrs = $helper.data('new_attrs') || {};\n            const type = newAttrs.type;\n            const store = newAttrs.store;\n            let addHook = false;\n            if (tableType === 'group_by' && (isField && _.contains(this.GROUPABLE_TYPES, type) && store === 'true')) {\n                addHook = true;\n            } else if (tableType === 'filters' && (isField && _.contains(this.FILTER_TYPES, type) && store === 'true' || isSeparator || isFilter)) {\n                addHook = true;\n            } else if (tableType === 'autocompletion_fields' && isField) {\n                addHook = true;\n            }\n            if (addHook) {\n                $nearest_form_hook.addClass('o_web_studio_nearest_hook');\n                return true;\n            }\n        }\n        return false;\n    },\n    /**\n     * @override\n     */\n    setLocalState: function (state) {\n        if (state.selected_node_id) {\n            var $selected_node = this.$('[data-node-id=\"' + state.selected_node_id + '\"]');\n            if ($selected_node) {\n                $selected_node.click();\n            }\n        }\n    },\n\n    //--------------------------------------------------------------------------\n    // Private\n    //--------------------------------------------------------------------------\n\n    /**\n     * Add hook inside the $parent given\n     * whith the tag corresponding to the type.\n     *\n     * @private\n     * @param {JQuery} $parent\n     * @param {String} type\n     */\n    _addFirstHook: function ($parent, type) {\n        var node = {\n            tag: 'search',\n            attrs: {},\n        };\n        if (type === \"group_by\") {\n            node = {\n                tag: 'group',\n                attrs: {},\n            };\n        }\n        var formEditorHook = this._renderHook(node, 'inside', 'tr', type);\n        this.defs.push(formEditorHook.appendTo($parent));\n    },\n    /**\n     * Add hook before the first child of a table.\n     *\n     * @private\n     * @param {JQuery} $result\n     * @param {Object} first_child\n     * @param {String} type\n     */\n    _addHookBeforeFirstChild: function ($result, first_child, type) {\n        var formEditorHook = this._renderHook(first_child, 'before', 'tr', type);\n        this.defs.push(formEditorHook.insertBefore($result));\n    },\n    /**\n     * Check for each table if it is empty.\n     * If so, add one hook inside the table.\n     *\n     * @private\n     */\n    _addHookEmptyTable: function () {\n        var $tbody = this.$('.o_web_studio_search_autocompletion_fields tbody');\n        if (!$tbody.children().length) {\n            this._addFirstHook($tbody, 'field');\n        }\n        $tbody = this.$('.o_web_studio_search_filters tbody');\n        if (!$tbody.children().length) {\n            this._addFirstHook($tbody, 'filter');\n        }\n        $tbody = this.$('.o_web_studio_search_group_by tbody');\n        if (!$tbody.children().length) {\n            this._addFirstHook($tbody, 'group_by');\n        }\n    },\n    /**\n     * if show_invisible is True then returns all nodes\n     * visible + invisible else do super call\n     *\n     * @override\n     */\n    _getNodesToTreat() {\n        if (this.show_invisible) {\n            return this.arch.children.slice();\n        }\n        return this._super(...arguments);\n    },\n    /**\n     * @private\n     * @param {String} model\n     * @param {String} value\n     * @param {Object} option\n     *\n     * @returns {Dialog}\n     */\n    _openDomainDialog: function (model, value, option) {\n        return new DomainSelectorDialog(this, model, value, option).open();\n    },\n    /**\n     * Append a node for the type given to the param $result\n     * and add 'click' event handler.\n     *\n     * @private\n     * @param {Object} node\n     * @param {JQuery} $result\n     * @param {String} type\n     */\n    _prepareEditableSearchNode: function (node, $result, type) {\n        var self = this;\n        $result.attr('data-node-id', this.node_id++);\n        this.setSelectable($result);\n        $result.click(function () {\n            self.selected_node_id = $result.data('node-id');\n            self.trigger_up('node_clicked', {node: node});\n        });\n        // Add hook after this field\n        var formEditorHook = this._renderHook(node, 'after', 'tr', type);\n        this.defs.push(formEditorHook.insertAfter($result));\n        this._renderHookBeforeFirstChild($result, type);\n    },\n    /**\n     * @override\n     * @private\n     */\n    _render: function () {\n        var prom = this._super.apply(this, arguments);\n\n        var self = this;\n        this.$('.ui-droppable').droppable({\n            accept: \".o_web_studio_component\",\n            drop: function (event, ui) {\n                var $hook = self.$('.o_web_studio_nearest_hook');\n                if ($hook.length) {\n                    var hook_id = $hook.data('hook_id');\n                    var hook = self.hook_nodes[hook_id];\n                    var new_attrs = ui.draggable.data('new_attrs') || {};\n                    var structure = ui.draggable.data('structure');\n                    // Check if a filter component has been dropped\n                    if (structure === \"filter\") {\n                        // Create the input for the string here\n                        // in order to be able to get the value\n                        // easily in the event trigger below\n                        var $domain_div = $(\"<div><label>Label:</label></div>\");\n                        self.$domain_label_input = $(\"<input type='text' id='domain_label' class='o_input mb8'/>\");\n                        $domain_div.append(self.$domain_label_input);\n                        var domain_dialog = self._openDomainDialog(\n                            self.model,\n                            [[\"id\",\"=\",1]],\n                            {\n                                title: _t(\"New Filter\"),\n                                size: 'medium',\n                                readonly: false,\n                                debugMode: config.isDebug(),\n                                $content: $domain_div,\n                            }\n                        );\n                        domain_dialog.opened().then(() => self.$domain_label_input.focus());\n                        // Add the node when clicking on the dialog 'save' button\n                        domain_dialog.on('domain_selected', self, function (event) {\n                            new_attrs = {\n                                domain: Domain.prototype.arrayToString(event.data.domain),\n                                string: self.$domain_label_input.val(),\n                                name: 'studio_' + structure + '_' + utils.randomString(5),\n                            };\n                            var values = {\n                                type: 'add',\n                                structure: structure,\n                                node: hook.node,\n                                new_attrs: new_attrs,\n                                position: hook.position,\n                            };\n                            this.trigger_up('view_change', values);\n                        });\n                        $hook.removeClass('o_web_studio_nearest_hook');\n                        ui.helper.removeClass('ui-draggable-helper-ready');\n                        self.trigger_up('on_hook_selected');\n                        return;\n                    }\n                    if (hook.type === \"filter\" && structure === \"field\" && _.contains(self.FILTER_TYPES, new_attrs.type)) {\n                        structure = \"filter\";\n                        new_attrs.string = new_attrs.label;\n                        new_attrs.date = new_attrs.name;\n                        new_attrs.name = 'studio_filter_by_' + utils.randomString(5);\n                    }\n                    // Since the group_by are defined by filter tag inside a group\n                    // but the droppable object is a field structure,\n                    // the structure is overridden\n                    if (hook.type === \"group_by\" && structure === \"field\") {\n                        structure = \"filter\";\n                        // There is no element 'group' in the view that can be target\n                        // to add a group_by filter so we add one before the insertion\n                        // of the group_by filter\n                        if (!self.first_group_by) {\n                            new_attrs.create_group = true;\n                        }\n                        new_attrs.string = new_attrs.label;\n                        new_attrs.context = \"{'group_by': '\" + new_attrs.name + \"'}\";\n                        new_attrs.name = 'studio_group_by_' + utils.randomString(5);\n                    }\n                    var values = {\n                        type: 'add',\n                        structure: structure,\n                        field_description: ui.draggable.data('field_description'),\n                        node: hook.node,\n                        new_attrs: new_attrs,\n                        position: hook.position,\n                    };\n                    ui.helper.removeClass('ui-draggable-helper-ready');\n                    self.trigger_up('on_hook_selected');\n                    self.trigger_up('view_change', values);\n                }\n            },\n        });\n        // Visually indicate the 'undroppable' portion\n        this.$el.droppable({\n            accept: \".o_web_studio_component\",\n            tolerance: \"touch\",\n            over: function (ev, ui) {\n                var $autocompletionFields = self.$('.o_web_studio_search_autocompletion_fields');\n                var $filters = self.$('.o_web_studio_search_filters');\n                var $grouBy = self.$('.o_web_studio_search_group_by');\n                switch (ui.draggable.data('structure')) {\n                    case 'field':\n                        var type = ui.draggable.data('new_attrs').type;\n                        var store = ui.draggable.data('new_attrs').store;\n                        if (!(_.contains(self.FILTER_TYPES, type) && store === 'true')) {\n                            $filters.addClass('text-muted');\n                        }\n                        if (!(_.contains(self.GROUPABLE_TYPES, type) && store === 'true')) {\n                            $grouBy.addClass('text-muted');\n                        }\n                        break;\n                    case 'filter':\n                    case 'separator':\n                        $grouBy.addClass('text-muted');\n                        $autocompletionFields.addClass('text-muted');\n                        break;\n                }\n            },\n            deactivate: function (ev, ui) {\n                self.$('.ui-droppable').removeClass('text-muted');\n            },\n        });\n        this._addHookEmptyTable();\n\n        return prom;\n    },\n    /**\n     * @override\n     * @private\n     * @param {Object} node\n     */\n    _renderField: function (node) {\n        var $result = this._super.apply(this, arguments);\n        this._prepareEditableSearchNode(node, $result, 'field');\n        return $result;\n    },\n    /**\n     * @override\n     * @private\n     * @param {Object} node\n     */\n    _renderFilter: function (node) {\n        var $result = this._super.apply(this, arguments);\n        node.attrs.domain = Domain.prototype.arrayToString(node.attrs.domain);\n        this._prepareEditableSearchNode(node, $result, 'filter');\n        return $result;\n    },\n    /**\n     * @override\n     * @private\n     * @param {Object} node\n     */\n    _renderGroupBy: function (node) {\n        node.tag = \"filter\";\n        // attribute used in the template to know\n        // if we are clicking on a group_by or a filter\n        // since the nodes have the same tag \"filter\"\n        node.attrs.is_group_by = true;\n        var $result = this._super.apply(this, arguments);\n        this._prepareEditableSearchNode(node, $result, 'group_by');\n        return $result;\n    },\n    /**\n     * @private\n     * @param {Object} node\n     * @param {String} position\n     * @param {String} tag_name\n     * @param {String} type\n     *\n     * @returns {Widget}\n     */\n    _renderHook: function (node, position, tag_name, type) {\n        var hook_id = _.uniqueId();\n        this.hook_nodes[hook_id] = {\n            node: node,\n            position: position,\n            type: type,\n        };\n        return new FormEditorHook(this, position, hook_id, tag_name);\n    },\n    /**\n     * Render hook before the first child of a table.\n     *\n     * @private\n     * @param {JQuery} $result\n     * @param {String} type\n     */\n    _renderHookBeforeFirstChild: function ($result, type) {\n        if (type === 'field' && this.first_field && this.first_field !== 'done') {\n            this._addHookBeforeFirstChild($result, this.first_field, 'field');\n            this.first_field = 'done';\n        } else if (type === 'filter' && this.first_filter && this.first_filter !== 'done') {\n            this._addHookBeforeFirstChild($result, this.first_filter, 'filter');\n            this.first_filter = 'done';\n        } else if (type ==='group_by' && this.first_group_by && this.first_group_by !== 'done') {\n            this._addHookBeforeFirstChild($result, this.first_group_by, 'group_by');\n            this.first_group_by = 'done';\n        }\n    },\n    /**\n     * @override\n     * @private\n     * @param {Object} node\n     */\n    _renderSeparator: function (node) {\n        var $result = this._super.apply(this, arguments);\n        this._prepareEditableSearchNode(node, $result, 'filter');\n        return $result;\n    },\n});\n\nreturn SearchEditor;\n\n});\n", "/** @odoo-module **/\n\nimport { registry } from \"@web/core/registry\";\nimport { _lt } from \"@web/core/l10n/translation\";\n\nregistry\n    .category(\"web_studio.editor_tabs\")\n    .add('website', { name: _lt(\"Website\"), action: \"action_web_studio_form\" });\n", "odoo.define('website_studio.FormManager', function (require) {\n\"use strict\";\n\n/**\n * This is the widget used by studio to render the website forms linked to\n * the model being edited and to redirect to the frontend to modify\n * a given website form or to create a new website form.\n *\n * @module website_studio.FormManager\n */\n\nvar AbstractAction = require('web.AbstractAction');\nvar core = require('web.core');\nvar framework = require('web.framework');\n\nvar _t = core._t;\n\nvar FormManager = AbstractAction.extend({\n    contentTemplate: 'website_studio.FormManager',\n\n    events: {\n        'click .o_web_studio_thumbnail': '_onClickThumbnail',\n    },\n\n    /**\n     * Form Manager class\n\n     * @constructor\n     * @param {Widget} parent\n     * @param {Object} context - The ir.actions.client\n     * @param {Object} options - An object with possible values:\n     *                           - action: all the information about\n     *                              the action currently edited\n     *                           - clear_breadcrumbs: a boolean\n     *                              to reset the breadcrumbs\n     */\n    init: function (parent, action, options) {\n        this._super.apply(this, arguments);\n        this.action = options.action;\n        this._onClickThumbnail = _.debounce(this._onClickThumbnail, 300, true);\n    },\n    /**\n     * When the form manager is instantiated the willStart method is called\n     * before the widget rendering. This method will make a rpc call to\n     * gather the website forms information.\n     *\n     * @returns {Promise}\n     */\n    willStart: function () {\n        var self = this;\n        if (!this.action) {\n            return Promise.reject();\n        }\n        this.res_model = this.action.res_model;\n        return this._super.apply(this, arguments).then(function () {\n            return self._rpc({\n                route: '/website_studio/get_forms',\n                params: {\n                  res_model: self.res_model,\n                },\n            }).then(function (forms) {\n                self.forms = forms;\n            });\n        });\n    },\n\n    //--------------------------------------------------------------------------\n    // Private\n    //--------------------------------------------------------------------------\n\n    /**\n     * This method is called by the widget to redirect to the form in the\n     * frontend and in edit mode.\n     *\n     * @private\n     * @param {string} url\n     */\n    _redirectToForm: function (url) {\n        url = url + '?enable_editor=1';\n        framework.redirect(url);\n    },\n    /**\n     * This method is called by the widget to create a new website form\n     * for the model being edited and then call the '_redirectToForm' method\n     * to reach this newly created website form.\n     *\n     * @private\n     */\n    _redirectToNewForm: function () {\n        var self = this;\n        this.getSession()\n            .user_has_group('website.group_website_designer')\n            .then(function (is_website_designer) {\n                if (is_website_designer) {\n                    self._rpc({\n                        route: '/website_studio/create_form',\n                        params: {\n                            res_model: self.res_model,\n                        },\n                    }).then(function (url) {\n                        self._redirectToForm(url);\n                    });\n                } else {\n                    var msg = _t(\"Sorry, only users with the following\" +\n                        \" access level are currently allowed to do that:\" +\n                        \" 'Website/Editor and Designer'\");\n                    self.displayNotification({ title: _t(\"Error\"), message: msg, type: 'danger' });\n                }\n            });\n    },\n\n    //--------------------------------------------------------------------------\n    // Handlers\n    //--------------------------------------------------------------------------\n\n    /**\n     * intercept the click on a website form thumbnail and redirect to\n     * a new or existing website form.\n     *\n     * @private\n     * @param {jQuery.Event} ev\n     */\n    _onClickThumbnail: function (ev) {\n        if ($(ev.currentTarget).data('new-form')) {\n            this._redirectToNewForm();\n        } else {\n            this._redirectToForm($(ev.currentTarget).data('url'));\n        }\n    },\n});\n\nreturn FormManager;\n\n});\n", "/** @odoo-module **/\n\nimport { ComponentAdapter } from \"web.OwlCompatibility\";\nimport { useService } from \"@web/core/utils/hooks\";\nimport { registry } from \"@web/core/registry\";\n\nimport FormManager from \"website_studio.FormManager\";\n\nconst { Component } = owl;\n\nexport class FormManagerAdapter extends ComponentAdapter {\n    constructor(props) {\n        props.Component = FormManager;\n        super(...arguments);\n    }\n\n    setup() {\n        super.setup();\n        this.studio = useService(\"studio\");\n        this.env = Component.env;\n    }\n\n    get widgetArgs() {\n        return [this.props.action, { action: this.studio.editedAction }];\n    }\n}\n\nregistry.category(\"actions\").add(\"action_web_studio_form\", FormManagerAdapter);\n"], "file": "/web/assets/1239-a55c0c1/web_studio.studio_assets.js", "sourceRoot": "../../../"}