
/*************************************************************
*  Filepath: /web/static/tests/ignore_missing_deps_start.js  *
*  Lines: 4                                                  *
*************************************************************/
// This module has for sole purpose to mark all odoo modules defined between it
// and ignore_missing_deps_stop as ignored for missing dependency errors.
// see the template conditional_assets_tests to understand how it's used.
window.__odooIgnoreMissingDependencies = true;
;

/*********************************************************************
*  Filepath: /base/static/tests/test_ir_model_fields_translation.js  *
*  Lines: 44                                                         *
*********************************************************************/
odoo.define('@base/../tests/test_ir_model_fields_translation', ['@web/core/registry', '@web_tour/js/tour_step_utils'], async function (require) {
'use strict';
let __exports = {};
/** @odoo-module **/

"use strict";

const { registry } = require("@web/core/registry");
const { stepUtils } = require("@web_tour/js/tour_step_utils");
function checkLoginColumn(translation) {
    return [
        stepUtils.showAppsMenuItem(), {
            content: "Settings",
            trigger: 'a[data-menu-xmlid="base.menu_administration"]',
            run: 'click',
        }, {
            content: "Open Users & Companies",
            trigger: '[data-menu-xmlid="base.menu_users"]',
            run: "click",
        }, {
            content: "Open Users",
            trigger: '[data-menu-xmlid="base.menu_action_res_users"]',
            run: "click",
        }, {
            content: `Login column should be ${translation}`,
            trigger: `[data-name="login"] span:contains("${translation}")`,
        }
    ]
}

registry.category("web_tour.tours").add('ir_model_fields_translation_tour', {
    test: true,
    url: '/web',
    steps: checkLoginColumn('Identifiant')
});

registry.category("web_tour.tours").add('ir_model_fields_translation_tour2', {
    test: true,
    url: '/web',
    steps: checkLoginColumn('Identifiant2')
});

return __exports;
});
;

/******************************************************************
*  Filepath: /web/static/tests/legacy/helpers/test_utils_file.js  *
*  Lines: 158                                                     *
******************************************************************/
odoo.define('web.test_utils_file', function () {
"use strict";

/**
 * FILE Test Utils
 *
 * This module defines various utility functions to help simulate events with
 * files, such as drag-and-drop.
 *
 * Note that all methods defined in this module are exported in the main
 * testUtils file.
 */


//------------------------------------------------------------------------------
// Private functions
//------------------------------------------------------------------------------

/**
 * Create a fake object 'dataTransfer', linked to some files, which is passed to
 * drag and drop events.
 *
 * @param {Object[]} files
 * @returns {Object}
 */
function _createFakeDataTransfer(files) {
    return {
        dropEffect: 'all',
        effectAllowed: 'all',
        files,
        getData: function () {
            return files;
        },
        items: [],
        types: ['Files'],
    };
}

//------------------------------------------------------------------------------
// Public functions
//------------------------------------------------------------------------------

/**
 * Create a file object, which can be used for drag-and-drop.
 *
 * @param {Object} data
 * @param {string} data.name
 * @param {string} data.content
 * @param {string} data.contentType
 * @returns {Promise<Object>} resolved with file created
 */
function createFile(data) {
    // Note: this is only supported by Chrome, and does not work in Incognito mode
    return new Promise(function (resolve, reject) {
        var requestFileSystem = window.requestFileSystem || window.webkitRequestFileSystem;
        if (!requestFileSystem) {
            throw new Error('FileSystem API is not supported');
        }
        requestFileSystem(window.TEMPORARY, 1024 * 1024, function (fileSystem) {
            fileSystem.root.getFile(data.name, { create: true }, function (fileEntry) {
                fileEntry.createWriter(function (fileWriter) {
                    fileWriter.onwriteend = function (e) {
                        fileSystem.root.getFile(data.name, {}, function (fileEntry) {
                            fileEntry.file(function (file) {
                                resolve(file);
                            });
                        });
                    };
                    fileWriter.write(new Blob([ data.content ], { type: data.contentType }));
                });
            });
        });
    });
}

/**
 * Drag a file over a DOM element
 *
 * @param {$.Element} $el
 * @param {Object} file must have been created beforehand (@see createFile)
 */
function dragoverFile($el, file) {
    var ev = new Event('dragover', { bubbles: true });
    Object.defineProperty(ev, 'dataTransfer', {
        value: _createFakeDataTransfer(file),
    });
    $el[0].dispatchEvent(ev);
}

/**
 * Drop a file on a DOM element.
 *
 * @param {$.Element} $el
 * @param {Object} file must have been created beforehand (@see createFile)
 */
function dropFile($el, file) {
    var ev = new Event('drop', { bubbles: true, });
    Object.defineProperty(ev, 'dataTransfer', {
        value: _createFakeDataTransfer([file]),
    });
    $el[0].dispatchEvent(ev);
}

/**
 * Drop some files on a DOM element.
 *
 * @param {$.Element} $el
 * @param {Object[]} files must have been created beforehand (@see createFile)
 */
function dropFiles($el, files) {
    var ev = new Event('drop', { bubbles: true, });
    Object.defineProperty(ev, 'dataTransfer', {
        value: _createFakeDataTransfer(files),
    });
    $el[0].dispatchEvent(ev);
}

/**
 * Set files in a file input
 *
 * @param {DOM.Element} el
 * @param {Object[]} files must have been created beforehand
 *   @see testUtils.file.createFile
 */
function inputFiles(el, files) {
    // could not use _createFakeDataTransfer as el.files assignation will only
    // work with a real FileList object.
    const dataTransfer = new window.DataTransfer();
    for (const file of files) {
        dataTransfer.items.add(file);
    }
    el.files = dataTransfer.files;
    /**
     * Changing files programatically is not supposed to trigger the event but
     * it does in Chrome versions before 73 (which is on runbot), so in that
     * case there is no need to make a manual dispatch, because it would lead to
     * the files being added twice.
     */
    const versionRaw = navigator.userAgent.match(/Chrom(e|ium)\/([0-9]+)\./);
    const chromeVersion = versionRaw ? parseInt(versionRaw[2], 10) : false;
    if (!chromeVersion || chromeVersion >= 73) {
        el.dispatchEvent(new Event('change'));
    }
}

//------------------------------------------------------------------------------
// Exposed API
//------------------------------------------------------------------------------

return {
    createFile: createFile,
    dragoverFile: dragoverFile,
    dropFile: dropFile,
    dropFiles,
    inputFiles,
};

});
;

/**************************************************************
*  Filepath: /mail/static/tests/tours/discuss_public_tour.js  *
*  Lines: 46                                                  *
**************************************************************/
odoo.define('@mail/../tests/tours/discuss_public_tour', ['@web/core/registry'], async function (require) {
'use strict';
let __exports = {};
/** @odoo-module **/

const { registry } = require("@web/core/registry");

registry.category("web_tour.tours").add(
    "mail/static/tests/tours/discuss_public_tour.js",
    {
        test: true,
        steps: [
        {
            trigger: ".o_DiscussPublicView",
            extraTrigger: ".o_ThreadView",
        },
        {
            content: "Check that we are on channel page",
            trigger: ".o_ThreadView",
            run() {
                if (!window.location.pathname.startsWith("/discuss/channel")) {
                    console.error("Did not automatically redirect to channel page");
                }
                // Wait for modules to be loaded or failed for the next step
                odoo.__DEBUG__.didLogInfo.then(() => {
                    const { missing, failed, unloaded } = odoo.__DEBUG__.jsModules;
                    if ([missing, failed, unloaded].some((arr) => arr.length)) {
                        console.error(
                            "Couldn't load all JS modules.",
                            JSON.stringify({ missing, failed, unloaded })
                        );
                    }
                    document.body.classList.add("o_mail_channel_public_modules_loaded");
                });
            },
            extraTrigger: ".o_mail_channel_public_modules_loaded",
        },
        {
            content: "Wait for all modules loaded check in previous step",
            trigger: ".o_mail_channel_public_modules_loaded",
        },
    ]
});

return __exports;
});
;

/*******************************************************************
*  Filepath: /mail/static/tests/tours/dynamic_placeholder_tour.js  *
*  Lines: 137                                                      *
*******************************************************************/
odoo.define('@mail/../tests/tours/dynamic_placeholder_tour', ['@web/core/registry', '@web_tour/js/tour_step_utils'], async function (require) {
'use strict';
let __exports = {};
/** @odoo-module **/

const { registry } = require("@web/core/registry");
const { stepUtils } = require("@web_tour/js/tour_step_utils");

registry.category("web_tour.tours").add("mail/static/tests/tours/dynamic_placeholder_tour.js", {
    url: "/web",
    test: true,
    steps: [
        stepUtils.showAppsMenuItem(),
        {
            content: 'Go into the Setting "app"',
            trigger: '.o_app[data-menu-xmlid="base.menu_administration"]',
        },
        {
            content: "Open technical dropdown",
            trigger: 'button[data-menu-xmlid="base.menu_custom"]',
        },
        {
            content: "Select email templates",
            trigger: 'a[data-menu-xmlid="mail.menu_email_templates"]',
        },
        {
            content: "Create a new email template",
            trigger: "button.o_list_button_add",
        },
        {
            content: 'Insert # inside "Subject" input',
            trigger: 'div[name="subject"] input[type="text"]',
            run(actions) {
                actions.text(`no_model_id #`, this.$anchor);
                this.$anchor[0].dispatchEvent(
                    new KeyboardEvent("keydown", { bubbles: true, key: "#" })
                );
            },
        },
        {
            content: "Check subject kept the # char And an error notification appear",
            trigger: 'div[name="subject"] input[type="text"]',
            run() {
                const subjectValue = this.$anchor[0].value;
                if (subjectValue !== "no_model_id #") {
                    console.error(
                        `Email template should have "#" in subject input (actual: ${subjectValue})`
                    );
                }

                const notification = document.querySelector(
                    "div.o_notification_manager .o_notification .o_notification_content"
                );
                if (
                    !notification ||
                    notification.textContent !==
                        "You need to select a baseModel before opening the dynamic placeholder selector."
                ) {
                    console.error(`Email template did not show correct notification.`);
                }
            },
        },
        {
            content: 'Select "Contact" model',
            trigger: 'div[name="model_id"] input[type="text"]',
            run: "text Contact",
        },
        {
            content: "Wait for model to load and click on contact",
            trigger: 'div[name="model_id"] .ui-autocomplete .dropdown-item:not(:has(.fa-spin))',
            run: async function () {
                const contact = Array.from(
                    document.querySelectorAll(
                        'div[name="model_id"] .ui-autocomplete .dropdown-item'
                    )
                ).find((el) => el.textContent === "Contact");
                await contact.click();
            },
        },
        {
            content: "Wait for the drop down to disappear",
            trigger: 'div[name="model_id"] .o-autocomplete:not(:has(.ui-autocomplete))',
            run: function () {},
        },
        {
            content: 'Retry insert # inside "Subject" input',
            trigger: 'div[name="subject"] input[type="text"]',
            run(actions) {
                actions.text(`yes_model_id #`, this.$anchor);
                this.$anchor[0].dispatchEvent(
                    new KeyboardEvent("keydown", { bubbles: true, key: "#" })
                );
            },
        },
        {
            content: "Check if the dynamic placeholder popover is opened",
            trigger: "div.o_field_selector_popover",
            run: function () {},
        },
        {
            content: "Click on the first entry of the dynamic placeholder",
            trigger: "div.o_field_selector_popover li:first-child",
        },
        {
            content: "Enter a default value",
            trigger:
                'div.o_field_selector_popover .o_field_selector_default_value_input input[type="text"]',
            run: "text defValue",
        },
        {
            content: "Click on the the dynamic placeholder default value",
            trigger: "div.o_field_selector_popover li:first-child",
        },
        {
            content: "Wait for the popover to disappear",
            trigger: "div.o_popover_container:empty",
            run: function () {},
        },
        {
            content: "Check if subject value was correclty updated",
            trigger: 'div[name="subject"] input[type="text"]',
            run() {
                const subjectValue = this.$anchor[0].value;
                const correctValue =
                    "yes_model_id {{object.activity_exception_decoration or '''defValue'''}}";
                if (subjectValue !== correctValue) {
                    console.error(
                        `Email template should have "${correctValue}" in subject input (actual: ${subjectValue})`
                    );
                }
            },
        },
    ],
});

return __exports;
});
;

/*********************************************************************
*  Filepath: /mail/static/tests/tours/mail_channel_as_guest_tour.js  *
*  Lines: 47                                                         *
*********************************************************************/
odoo.define('@mail/../tests/tours/mail_channel_as_guest_tour', ['@web/core/registry'], async function (require) {
'use strict';
let __exports = {};
/** @odoo-module **/

const { registry } = require("@web/core/registry");

registry.category("web_tour.tours").add(
    "mail/static/tests/tours/mail_channel_as_guest_tour.js",
    {
        test: true,
        steps: [
        {
            content: "Click join",
            trigger: ".o_WelcomeView_joinButton",
            extraTrigger: ".o_ThreadView",
        },
        {
            content: "Check that we are on channel page",
            trigger: ".o_ThreadView",
            run() {
                if (!window.location.pathname.startsWith("/discuss/channel")) {
                    console.error("Clicking on join button did not redirect to channel page");
                }
                // Wait for modules to be loaded or failed for the next step
                odoo.__DEBUG__.didLogInfo.then(() => {
                    const { missing, failed, unloaded } = odoo.__DEBUG__.jsModules;
                    if ([missing, failed, unloaded].some((arr) => arr.length)) {
                        console.error(
                            "Couldn't load all JS modules.",
                            JSON.stringify({ missing, failed, unloaded })
                        );
                    }
                    document.body.classList.add("o_mail_channel_as_guest_tour_modules_loaded");
                });
            },
            extraTrigger: ".o_mail_channel_as_guest_tour_modules_loaded",
        },
        {
            content: "Wait for all modules loaded check in previous step",
            trigger: ".o_mail_channel_as_guest_tour_modules_loaded",
        },
    ]
});

return __exports;
});
;

/***********************************************************************
*  Filepath: /mail/static/tests/tours/mail_full_composer_test_tour.js  *
*  Lines: 105                                                          *
***********************************************************************/
odoo.define('@mail/../tests/tours/mail_full_composer_test_tour', ['web.test_utils_file', '@web/core/registry'], async function (require) {
'use strict';
let __exports = {};
/** @odoo-module **/

const { createFile, inputFiles } = require("web.test_utils_file");

const { registry } = require("@web/core/registry");

/**
 * This tour depends on data created by python test in charge of launching it.
 * It is not intended to work when launched from interface. It is needed to test
 * an action (action manager) which is not possible to test with QUnit.
 * @see mail/tests/test_mail_full_composer.py
 */
registry.category("web_tour.tours").add(
    "mail/static/tests/tours/mail_full_composer_test_tour.js",
    {
        test: true,
        steps: [
        {
            content: "Click on Send Message",
            trigger: ".o_ChatterTopbar_buttonSendMessage",
        },
        {
            content: "Write something in composer",
            trigger: ".o_ComposerTextInputView_textarea",
            run: "text blahblah",
        },
        {
            content: "Add one file in composer",
            trigger: ".o_ComposerView_buttonAttachment",
            async run() {
                const file = await createFile({
                    content: "hello, world",
                    contentType: "text/plain",
                    name: "text.txt",
                });
                const messaging = await odoo.__DEBUG__.messaging;
                const uploader = messaging.models["ComposerView"].all()[0].fileUploader;
                inputFiles(uploader.fileInput, [file]);
            },
        },
        {
            content: "Open full composer",
            trigger: ".o_ComposerView_buttonFullComposer",
            extra_trigger: ".o_AttachmentCard:not(.o-isUploading)", // waiting the attachment to be uploaded
        },
        {
            content: "Check the earlier provided attachment is listed",
            trigger: '.o_AttachmentCard[title="text.txt"]',
            run() {},
        },
        {
            content: "Check subject is autofilled",
            trigger: '[name="subject"] input',
            run() {
                const subjectValue = document.querySelector('[name="subject"] input').value;
                if (subjectValue !== "Test User") {
                    console.error(
                        `Full composer should have "Test User" in subject input (actual: ${subjectValue})`
                    );
                }
            },
        },
        {
            content: "Check composer content is kept",
            trigger: '.o_field_html[name="body"]',
            run() {
                const bodyContent = document.querySelector('.o_field_html[name="body"]')
                    .textContent;
                if (!bodyContent.includes("blahblah")) {
                    console.error(
                        `Full composer should contain text from small composer ("blahblah") in body input (actual: ${bodyContent})`
                    );
                }
            },
        },
        {
            content: "Open templates",
            trigger: '.o_field_widget[name="template_id"] input',
        },
        {
            content: "Check a template is listed",
            in_modal: false,
            trigger: '.ui-autocomplete .ui-menu-item a:contains("Test template")',
            run() {},
        },
        {
            content: "Send message",
            trigger: ".o_mail_send",
        },
        {
            content: "Check message is shown",
            trigger: '.o_MessageView:contains("blahblah")',
        },
        {
            content: "Check message contains the attachment",
            trigger: '.o_MessageView .o_AttachmentCard_filename:contains("text.txt")',
        },
    ]
});

return __exports;
});
;

/***********************************************************************
*  Filepath: /mail/static/tests/tours/user_modify_own_profile_tour.js  *
*  Lines: 32                                                           *
***********************************************************************/
odoo.define('@mail/../tests/tours/user_modify_own_profile_tour', ['@web/core/registry'], async function (require) {
'use strict';
let __exports = {};
/** @odoo-module **/

const { registry } = require("@web/core/registry");

/**
 * Verify that a user can modify their own profile information.
 */
registry.category("web_tour.tours").add('mail/static/tests/tours/user_modify_own_profile_tour.js', {
    test: true,
    steps: [{
    content: 'Open user account menu',
    trigger: '.o_user_menu button',
}, {
    content: "Open preferences / profile screen",
    trigger: '[data-menu=settings]',
}, {
    content: "Update the email address",
    trigger: 'div[name="email"] input',
    run: 'text updatedemail@example.com',
}, {
    content: "Save the form",
    trigger: 'button[name="preference_save"]',
}, {
    content: "Wait until the modal is closed",
    trigger: 'body:not(.modal-open)',
}]});

return __exports;
});
;

/***************************************************
*  Filepath: /portal/static/tests/tours/portal.js  *
*  Lines: 21                                       *
***************************************************/
odoo.define('portal.tour', function (require) {
'use strict';

const { registry } = require("@web/core/registry");

registry.category("web_tour.tours").add('portal_load_homepage', {
    test: true,
    url: '/my',
    steps: [
        {
            content: "Check portal is loaded",
            trigger: 'a[href*="/my/account"]:contains("Edit"):first',
        },
        {
            content: "Load my account details",
            trigger: 'input[value="Joel Willis"]'
        }
    ]
});

});
;

/*******************************************************************************
*  Filepath: /account/static/tests/tours/account_dashboard_setup_bar_tests.js  *
*  Lines: 44                                                                   *
*******************************************************************************/
odoo.define('account.dashboard.setup.tour', function (require) {
    "use strict";

    var core = require('web.core');
    const { registry } = require("@web/core/registry");
    const { stepUtils } = require('@web_tour/js/tour_step_utils');
    require("web.legacy_tranlations_loaded");

    var _t = core._t;

    registry.category("web_tour.tours").add('account_render_report', {
        test: true,
        url: '/web',
    steps: [stepUtils.showAppsMenuItem(),
    {
        id: 'account_menu_click',
        trigger: '.o_app[data-menu-xmlid="account.menu_finance"]',
        position: 'bottom',
    }, {
        trigger: '.o_data_row:first .o_data_cell',
        extra_trigger: '.breadcrumb',
    }, {
        trigger: '.o_control_panel button:contains("' + _t('Print') + '")',
    }, {
        trigger: '.o_control_panel .o-dropdown--menu span:contains("' + _t('Invoices without Payment') + '")',
    }, {
        trigger: 'iframe .o_report_layout_standard h2',
        content: 'Primary color is correct',
        run: function () {
            if (this.$anchor.css('color') !== "rgb(18, 52, 86)") {
                console.error('The primary color should be the one set on the company.');
            }
        },
    }, {
        trigger: 'iframe .o_report_layout_standard #informations div strong',
        content: 'Secondary color is correct',
        run: function () {
            if (this.$anchor.css('color') !== "rgb(120, 145, 1)") {
                console.error('The secondary color should be the one set on the company.');
            }
        },
    }
        ]});
});
;

/*************************************************************
*  Filepath: /account/static/tests/tours/tax_group_tests.js  *
*  Lines: 139                                                *
*************************************************************/
odoo.define('@account/../tests/tours/tax_group_tests', ['@web/core/registry', '@web_tour/js/tour_step_utils'], async function (require) {
'use strict';
let __exports = {};
/** @odoo-module alias=account.tax.group.tour.tests */
"use strict";

const { registry } = require("@web/core/registry");
const { stepUtils } = require("@web_tour/js/tour_step_utils");

registry.category("web_tour.tours").add('account_tax_group', {
    test: true,
    url: "/web",
    steps: [stepUtils.showAppsMenuItem(),
    {
        id: 'account_menu_click',
        content: "Go to Invoicing",
        trigger: '.o_app[data-menu-xmlid="account.menu_finance"]',
    },
    {
        content: "Go to Vendors",
        trigger: 'span:contains("Vendors")',
    },
    {
        content: "Go to Bills",
        trigger: 'a:contains("Bills")',
    },
    {
        extra_trigger: '.breadcrumb:contains("Bills")',
        content: "Create new bill",
        trigger: '.o_list_button_add',
    },
    // Set a vendor
    {
        content: "Add vendor",
        trigger: 'div.o_field_widget.o_field_res_partner_many2one[name="partner_id"] div input',
        run: 'text Azure Interior',
    },
    {
        content: "Valid vendor",
        trigger: '.ui-menu-item a:contains("Azure Interior")',
    },
    // Add First product
    {
        content: "Add items",
        trigger: 'div[name="invoice_line_ids"] .o_field_x2many_list_row_add a:contains("Add a line")',
    },
    {
        content: "Select input",
        trigger: 'div[name="invoice_line_ids"] .o_selected_row .o_list_many2one[name="product_id"] input',
    },
    {
        content: "Type item",
        trigger: 'div[name="invoice_line_ids"] .o_selected_row .o_list_many2one[name="product_id"] input',
        run: "text Corner Desk Right Sit",
    },
    {
        content: "Valid item",
        trigger: '.ui-menu-item-wrapper:contains("Corner Desk Right Sit")',
    },
    // Save account.move
    {
        content: "Save the account move",
        trigger: '.o_form_button_save',
    },
    ...stepUtils.saveForm(),
    // Edit tax group amount
    {
        content: "Edit tax group amount",
        trigger: '.o_tax_group_edit',
    },
    {
        content: "Modify the input value",
        trigger: '.o_tax_group_edit_input input',
        run: function (actions) {
            $('.o_tax_group_edit_input input').val(200);
            $('.o_tax_group_edit_input input').select();
            $('.o_tax_group_edit_input input').blur();
        },
    },
    // Check new value for total (with modified tax_group_amount).
    {
        content: "Valid total amount",
        trigger: 'span[name="amount_total"]:contains("800")',
    },
    // Modify the quantity of the object
    {
        content: "Select item quantity",
        trigger: 'div[name="invoice_line_ids"] tbody tr.o_data_row .o_list_number[name="quantity"]',
    },
    {
        content: "Change item quantity",
        trigger: 'div[name="invoice_line_ids"] tbody tr.o_data_row .o_list_number[name="quantity"] input',
        run: 'text 2',
    },
    {
        content: "Valid the new value",
        trigger: 'div[name="invoice_line_ids"] tbody tr.o_data_row .o_list_number[name="quantity"] input',
        run: function (actions) {
            let keydownEvent = jQuery.Event('keydown');
            keydownEvent.which = 13;
            this.$anchor.trigger(keydownEvent);
        },
    },
    // Save form
    {
        content: "Save the account move",
        trigger: '.o_form_button_save',
    },
    ...stepUtils.saveForm(),
    // Check new tax group value
    {
        content: "Check new value of tax group",
        trigger: '.o_tax_group_amount_value:contains("120")',
    },
    {
        content: "Edit tax value",
        trigger: '.o_tax_group_edit_input input',
        run: 'text 2'
    },
    {
        content: "Check new value of total",
        trigger: '.oe_subtotal_footer_separator:contains("1,202")',
    },
    {
        content: "Discard changes",
        trigger: '.o_form_button_cancel',
    },
    {
        content: "Check tax value is reset",
        trigger: '.o_tax_group_amount_value:contains("120")',
    },
]});

return __exports;
});

odoo.define(`account.tax.group.tour.tests`, async function(require) {
                        return require('@account/../tests/tours/tax_group_tests')[Symbol.for("default")];
                        });
;

/*********************************************************
*  Filepath: /sale/static/tests/tours/sale_signature.js  *
*  Lines: 50                                             *
*********************************************************/
odoo.define('sale.tour_sale_signature', function (require) {
'use strict';

const { registry } = require("@web/core/registry");

// This tour relies on data created on the Python test.
registry.category("web_tour.tours").add('sale_signature', {
    test: true,
    url: '/my/quotes',
    steps: [
    {
        content: "open the test SO",
        trigger: 'a:containsExact("test SO")',
    },
    {
        content: "click sign",
        trigger: 'a:contains("Sign")',
    },
    {
        content: "check submit is enabled",
        trigger: '.o_portal_sign_submit:enabled',
        run: function () {},
    },
    {
        content: "click select style",
        trigger: '.o_web_sign_auto_select_style a',
    },
    {
        content: "click style 4",
        trigger: '.o_web_sign_auto_font_selection a:eq(3)',
    },
    {
        content: "click submit",
        trigger: '.o_portal_sign_submit:enabled',
    },
    {
        content: "check it's confirmed",
        trigger: '#quote_content:contains("Thank You")',
    }, {
        trigger: '#quote_content',
        run: function () {
            window.location.href = window.location.origin + '/web';
        },  // Avoid race condition at the end of the tour by returning to the home page.
    },
    {
        trigger: 'nav',
        run: function() {},
    }
]});
});
;

/************************************************************
*  Filepath: /calendar/static/tests/tours/calendar_tour.js  *
*  Lines: 72                                                *
************************************************************/
odoo.define('calendar.tour', function (require) {
    'use strict';
    const { registry } = require("@web/core/registry");
    const { stepUtils } = require('@web_tour/js/tour_step_utils');

    const todayDate = function() {
        let now = new Date();
        let year = now.getFullYear();
        let month = String(now.getMonth() + 1).padStart(2, '0');
        let day = String(now.getDate()).padStart(2, '0');

        return `${month}/${day}/${year} 10:00:00`;
    };

    registry.category("web_tour.tours").add('calendar_appointments_hour_tour', {
        url: '/web',
        test: true,
        steps: [stepUtils.showAppsMenuItem(),
        {
            trigger: '.o_app[data-menu-xmlid="calendar.mail_menu_calendar"]',
            content: 'Open Calendar',
            run: 'click',
        },
        {
            trigger: '.o-calendar-button-new',
            content: 'Create a new event',
            run: 'click',
        },
        {
            trigger: '#name',
            content: 'Give a name to the new event',
            run: 'text TEST EVENT',
        },
        {
            trigger: '#start',
            content: 'Give a date to the new event',
            run: `text ${todayDate()}`,
        },
        {
            trigger: '.fa-cloud-upload',
            content: 'Save the new event',
            run: 'click',
        },
        {
            trigger: '.dropdown-item:contains("Calendar")',
            content: 'Go back to Calendar view',
            run: 'click',
        },
        {
            trigger: '.dropdown-toggle:contains("Week")',
            content: 'Click to change calendar view',
            run: 'click',
        },
        {
            trigger: '.dropdown-item:contains("Month")',
            content: 'Change the calendar view to Month',
            run: 'click',
        },
        {
            trigger: '.fc-day-header:contains("Monday")',
            content: 'Change the calendar view to week',
        },
        {
            trigger: '.fc-time:contains("10:00")',
            content: 'Check the time is properly displayed',
        },
        {
            trigger: '.o_event_title:contains("TEST EVENT")',
            content: 'Check the event title',
        },
    ]});
});
;

/**********************************************************************
*  Filepath: /contacts/static/tests/tours/debug_menu_set_defaults.js  *
*  Lines: 74                                                          *
**********************************************************************/
odoo.define('debug_menu_set_defaults.tour', function (require) {
    "use strict";

    const { registry } = require("@web/core/registry");
    const { stepUtils } = require('@web_tour/js/tour_step_utils');

    registry.category("web_tour.tours").add('debug_menu_set_defaults', {
        test: true,
        url: '/web?debug=1',
        steps: [
            ...stepUtils.goToAppSteps('contacts.menu_contacts', "Open the contacts menu"),
            {
                content: "Create a new contact",
                trigger: '.o-kanban-button-new',
            },
            {
                content: "Check that Company is checked by default, and not Individual",
                trigger: '.o_field_widget[name="company_type"] input[data-value="company"]:checked',
                run: function () {},
            },
            {
                content: "Select the individual radio button",
                trigger: '.o_field_widget[name="company_type"] input[data-value="person"]',
            },
            {
                content: "Open the debug menu",
                trigger: '.o_debug_manager button',
            },
            {
                content: "Click the Set Defaults menu",
                trigger: '.o_debug_manager .dropdown-item:contains(Set Defaults)',
            },
            {
                content: "Choose Company Type = Individual",
                trigger: '#formview_default_fields',
                run: function () {
                    const element_field = document.querySelector('select#formview_default_fields');
                    element_field.value = 'company_type';
                    element_field.dispatchEvent(new Event("change"));
                },
            },
            {
                content: "Check that there are conditions",
                trigger: '#formview_default_conditions',
            },
            {
                content: "Save the new default",
                trigger: 'footer button:contains(Save default)',
            },
            {
                content: "Discard the contact creation",
                trigger: 'button.o_form_button_cancel',
            },
            {
                trigger: '.o-kanban-button-new',
            },
            {
                content: "Check that Individual is checked instead of Company",
                trigger: '.o_field_widget[name="company_type"] input[data-value="person"]:checked',
                run: function () {},
            },
            {
                content: "Discard the contact creation",
                trigger: 'button.o_form_button_cancel',
            },
            {
                content: "Wait for discard",
                trigger: '.o_control_panel .o-kanban-button-new',
                run() {},
            },
        ]
    });

});
;

/**************************************************************
*  Filepath: /crm/static/tests/tours/create_crm_team_tour.js  *
*  Lines: 41                                                  *
**************************************************************/
odoo.define('@crm/../tests/tours/create_crm_team_tour', ['@web/core/registry', '@web_tour/js/tour_step_utils'], async function (require) {
'use strict';
let __exports = {};
/** @odoo-module */

const { registry } = require("@web/core/registry");
const { stepUtils } = require("@web_tour/js/tour_step_utils");

registry.category("web_tour.tours").add('create_crm_team_tour', {
    url: "/web",
    test: true,
    steps: [
    ...stepUtils.goToAppSteps('crm.crm_menu_root'),
{
    trigger: 'button[data-menu-xmlid="crm.crm_menu_config"]',
}, {
    trigger: 'a[data-menu-xmlid="crm.crm_team_config"]',
}, {
    trigger: 'button.o_list_button_add',
}, {
    trigger: 'input[id="name"]',
    run: 'text My CRM Team',
}, {
    trigger: 'button.o-kanban-button-new',
}, {
    trigger: 'div.modal-dialog tr:contains("Test Salesman") input.form-check-input',
    run: 'click',
}, {
    trigger: 'div.modal-dialog tr:contains("Test Sales Manager") input.form-check-input',
    run: 'click',
}, {
    trigger: 'div.modal-dialog tr:contains("Test Sales Manager") input.form-check-input:checked',
    run: () => {},
}, {
    trigger: 'button.o_select_button',
}, 
    ...stepUtils.saveForm()
]});

return __exports;
});
;

/*************************************************************************
*  Filepath: /crm/static/tests/tours/crm_email_and_phone_propagation.js  *
*  Lines: 57                                                             *
*************************************************************************/
odoo.define('crm.crm_email_and_phone_propagation', function (require) {
    'use strict';

    const { registry } = require("@web/core/registry");
    const { stepUtils } = require('@web_tour/js/tour_step_utils');

    registry.category("web_tour.tours").add('crm_email_and_phone_propagation_edit_save', {
        test: true,
        url: '/web',
        steps: [
        stepUtils.showAppsMenuItem(),
        {
            trigger: '.o_app[data-menu-xmlid="crm.crm_menu_root"]',
            content: 'open crm app',
        }, {
            trigger: '.o_kanban_record .o_kanban_record_title span:contains(Test Lead Propagation)',
            content: 'Open the first lead',
            run: 'click',
        }, {
            trigger: '.o_form_button_save',
            extra_trigger: '.o_form_editable .o_field_widget[name=email_from] input',
            content: 'Save the lead',
            run: 'click',
        },
    ]});

    registry.category("web_tour.tours").add('crm_email_and_phone_propagation_remove_email_and_phone', {
        test: true,
        url: '/web',
        steps: [
        stepUtils.showAppsMenuItem(),
        {
            trigger: '.o_app[data-menu-xmlid="crm.crm_menu_root"]',
            content: 'open crm app',
        }, {
            trigger: '.o_kanban_record .o_kanban_record_title span:contains(Test Lead Propagation)',
            content: 'Open the first lead',
            run: 'click',
        }, {
            trigger: '.o_form_editable .o_field_widget[name=email_from] input',
            extra_trigger: '.o_form_editable .o_field_widget[name=phone] input',
            content: 'Remove the email and the phone',
            run: function (action) {
                action.remove_text("", ".o_form_editable .o_field_widget[name=email_from] input");
                action.remove_text("", ".o_form_editable .o_field_widget[name=phone] input");
            },
        }, {
            trigger: '.o_back_button',
            // wait the warning message to be visible
            extra_trigger: '.o_form_sheet_bg .fa-exclamation-triangle:not(.o_invisible_modifier)',
            content: 'Save the lead and exit to kanban',
            run: 'click',
        },{
            trigger: '.o_kanban_renderer',
        }
    ]});
});
;

/***********************************************************
*  Filepath: /crm/static/tests/tours/crm_forecast_tour.js  *
*  Lines: 103                                              *
***********************************************************/
odoo.define('@crm/../tests/tours/crm_forecast_tour', ['@web/core/registry', '@web_tour/js/tour_step_utils'], async function (require) {
'use strict';
let __exports = {};
/** @odoo-module */
const { registry } = require("@web/core/registry");
const { stepUtils } = require("@web_tour/js/tour_step_utils");
const today = luxon.DateTime.now();

registry.category("web_tour.tours").add('crm_forecast', {
    test: true,
    url: "/web",
    steps: [
    stepUtils.showAppsMenuItem(),
    {
        trigger: ".o_app[data-menu-xmlid='crm.crm_menu_root']",
        content: "open crm app",
    }, {
        trigger: '.dropdown-toggle[data-menu-xmlid="crm.crm_menu_report"]',
        content: 'Open Reporting menu',
        run: 'click',
    }, {
        trigger: '.dropdown-item[data-menu-xmlid="crm.crm_menu_forecast"]',
        content: 'Open Forecast menu',
        run: 'click',
    }, {
        trigger: '.o_column_quick_create:contains(Add next month)',
        content: 'Wait page loading'
    }, {
        trigger: ".o-kanban-button-new",
        content: "click create",
        run: 'click',
    }, {
        trigger: ".o_field_widget[name=name] input",
        content: "complete name",
        run: "text Test Opportunity 1",
    }, {
        trigger: ".o_field_widget[name=expected_revenue] input",
        content: "complete expected revenue",
        run: "text 999999",
    }, {
        trigger: "button.o_kanban_edit",
        content: "edit lead",
    }, {
        trigger: "div[name=date_deadline] input",
        content: "complete expected closing",
        run: `text ${today.toFormat("MM/dd/yyyy")}`,
    }, {
        trigger: "div[name=date_deadline] input",
        content: "click to make the datepicker disappear",
        run: "click"
    }, {
        trigger: "body:not(:has(div.bootstrap-datetimepicker-widget))",
        content: "wait for date_picker to disappear",
        run: function () {},
    }, {
        trigger: '.o_back_button',
        content: 'navigate back to the kanban view',
        position: "bottom",
        run: "click"
    }, {
        trigger: ".o_kanban_record .o_kanban_record_title:contains('Test Opportunity 1')",
        content: "move to the next month",
        run: function (actions) {
            const undefined_groups = $('.o_column_title:contains("None")').length;
            actions.drag_and_drop_native(`.o_opportunity_kanban .o_kanban_group:eq(${1 + undefined_groups})`, this.$anchor);
        },
    }, {
        trigger: ".o_kanban_record .o_kanban_record_title:contains('Test Opportunity 1')",
        content: "edit lead",
        run: "click"
    }, {
        trigger: ".o_field_widget[name=date_deadline] input",
        content: "complete expected closing",
        run: function (actions) {
            actions.text(`text ${today.plus({months: 5}).startOf('month').minus({days: 1}).toFormat("MM/dd/yyyy")}`, this.$anchor);
            this.$anchor[0].dispatchEvent(new KeyboardEvent("keydown", { bubbles: true, key: "Escape" }));
        },
    }, {
        trigger: "body:not(:has(div.bootstrap-datetimepicker-widget))",
        content: "wait for date_picker to disappear",
        run: function () {},
    }, {
        trigger: ".o_field_widget[name=probability] input",
        content: "max out probability",
        run: "text 100"
    }, {
        trigger: '.o_back_button',
        content: 'navigate back to the kanban view',
        position: "bottom",
        run: "click"
    }, {
        trigger: '.o_kanban_add_column',
        content: "add next month",
        run: "click"
    }, {
        trigger: ".o_kanban_record:contains('Test Opportunity 1'):contains('Won')",
        content: "assert that the opportunity has the Won banner",
        run: function () {},
    }
]});

return __exports;
});
;

/********************************************************
*  Filepath: /crm/static/tests/tours/crm_rainbowman.js  *
*  Lines: 94                                            *
********************************************************/
odoo.define('@crm/../tests/tours/crm_rainbowman', ['@web/core/registry', '@web_tour/js/tour_step_utils'], async function (require) {
'use strict';
let __exports = {};
/** @odoo-module **/

    const { registry } = require("@web/core/registry");
    const { stepUtils } = require('@web_tour/js/tour_step_utils');

    registry.category("web_tour.tours").add('crm_rainbowman', {
        test: true,
        url: "/web",
        steps: [
        stepUtils.showAppsMenuItem(),
        {
            trigger: ".o_app[data-menu-xmlid='crm.crm_menu_root']",
            content: "open crm app",
        }, {
            trigger: ".o-kanban-button-new",
            content: "click create",
        }, {
            trigger: ".o_field_widget[name=name] input",
            content: "complete name",
            run: "text Test Lead 1",
        }, {
            trigger: ".o_field_widget[name=expected_revenue] input",
            content: "complete expected revenue",
            run: "text 999999997",
        }, {
            trigger: "button.o_kanban_add",
            content: "create lead",
        }, {
            trigger: ".o_kanban_record .o_kanban_record_title:contains('Test Lead 1')",
            content: "move to won stage",
            run: "drag_and_drop_native .o_opportunity_kanban .o_kanban_group:eq(3) "
        }, {
            trigger: ".o_reward_rainbow",
            extra_trigger: ".o_reward_rainbow",
            run: function () {} // check rainbowman is properly displayed
        }, {
            // This step and the following simulates the fact that after drag and drop,
            // from the previous steps, a click event is triggered on the window element,
            // which closes the currently shown .o_kanban_quick_create.
            trigger: ".o_kanban_renderer",
        }, {
            trigger: ".o_kanban_renderer:not(:has(.o_kanban_quick_create))",
            run() {},
        }, {
            trigger: ".o-kanban-button-new",
            content: "create second lead",
        }, {
            trigger: ".o_field_widget[name=name] input",
            content: "complete name",
            run: "text Test Lead 2",
        }, {
            trigger: ".o_field_widget[name=expected_revenue] input",
            content: "complete expected revenue",
            run: "text 999999998",
        }, {
            trigger: "button.o_kanban_add",
            content: "create lead",
        }, {
            trigger: ".o_kanban_record .o_kanban_record_title:contains('Test Lead 2')",
            run: function () {} // wait for the record to be properly created
        }, {
            // move first test back to new stage to be able to test rainbowman a second time
            trigger: ".o_kanban_record .o_kanban_record_title:contains('Test Lead 1')",
            content: "move back to new stage",
            run: "drag_and_drop .o_opportunity_kanban .o_kanban_group:eq(0) "
        }, {
            trigger: ".o_kanban_record .o_kanban_record_title:contains('Test Lead 2')",
            content: "click on second lead",
        }, {
            trigger: ".o_statusbar_status button[data-value='4']",
            content: "move lead to won stage",
        },
        ...stepUtils.saveForm(),
        {
            trigger: ".o_statusbar_status button[data-value='1']",
            extra_trigger: ".o_reward_rainbow",
            content: "move lead to previous stage & rainbowman appears",
        }, {
            trigger: "button[name=action_set_won_rainbowman]",
            content: "click button mark won",
        },
        ...stepUtils.saveForm(),
        {
            trigger: ".o_menu_brand",
            extra_trigger: ".o_reward_rainbow",
            content: "last rainbowman appears",
        }
    ]});

return __exports;
});
;

/**************************************************************
*  Filepath: /website/static/tests/tours/automatic_editor.js  *
*  Lines: 99                                                  *
**************************************************************/
odoo.define('website.tour.automatic_editor', function (require) {
'use strict';

const wTourUtils = require("website.tour_utils");

wTourUtils.registerWebsitePreviewTour('automatic_editor_on_new_website', {
    test: true,
    url: '/',
},
[
    {
        content: "Select the language dropdown",
        trigger: 'iframe .js_language_selector .dropdown-toggle'
    },
    {
        content: "click on Add a language",
        trigger: 'iframe a.o_add_language',
    },
    {
        content: "type Parseltongue",
        trigger: 'div[name="lang_ids"] .o_input_dropdown input',
        run: 'text Parseltongue',
    },
    {
        content: 'select Parseltongue',
        trigger: '.dropdown-item:contains(Parseltongue)',
        in_modal: false,
    },
    {
        content: "load parseltongue",
        extra_trigger: '.modal div[name="lang_ids"] .rounded-pill .o_tag_badge_text:contains(Parseltongue)',
        trigger: '.modal-footer button[name=lang_install]',
    },
    {
        content: "Select the language dropdown",
        trigger: 'iframe .js_language_selector .dropdown-toggle',
    },
    {
        content: "Select parseltongue",
        trigger: 'iframe a.js_change_lang[data-url_code=pa_GB]',
        extra_trigger: 'iframe a.js_change_lang .o_lang_flag',
    },
    {
        content: "Check that we're on parseltongue and then go to settings",
        trigger: 'iframe html[lang=pa-GB]',
        run: () => {
            // Now go through the settings for a new website. A frontend_lang
            // cookie was set during previous steps. It should not be used when
            // redirecting to the frontend in the following steps.
            window.location.href = '/web#action=website.action_website_configuration';
        }
    },
    {
        content: "create a new website",
        trigger: 'button[name="action_website_create_new"]',
    },
    {
        content: "insert website name",
        trigger: 'div[name="name"] input',
        run: 'text Website EN'
    },
    {
        content: "validate the website creation modal",
        trigger: 'button.btn-primary'
    },
    {
        content: "skip configurator",
        // This trigger targets the skip button, it doesn't have a more
        // explicit class or ID.
        trigger: '.o_configurator_container .container-fluid .btn.btn-link'
    },
    {
        content: "make hover button appear",
        trigger: '.o_theme_preview',
        run: () => {
            $('.o_theme_preview .o_button_area').attr('style', 'visibility: visible; opacity: 1;');
        },
    },
    {
        content: "Install a theme",
        trigger: 'button[name="button_choose_theme"]'
    },
    {
        content: "Check that the editor is loaded",
        trigger: 'iframe body.editor_enable',
        timeout: 30000,
        run: () => null, // it's a check
    },
    {
        content: "exit edit mode",
        trigger: '.o_we_website_top_actions button.btn-primary:contains("Save")',
    },
    {
        content: "wait for editor to close",
        trigger: 'iframe body:not(.editor_enable)',
        run: () => null, // It's a check
    }
]);
});
;

/**********************************************************************
*  Filepath: /website/static/tests/tours/carousel_content_removal.js  *
*  Lines: 31                                                          *
**********************************************************************/
odoo.define('@website/../tests/tours/carousel_content_removal', ['website.tour_utils'], async function (require) {
'use strict';
let __exports = {};
/** @odoo-module */

const wTourUtils = require('website.tour_utils');

wTourUtils.registerWebsitePreviewTour("carousel_content_removal", {
    test: true,
    url: '/',
    edition: true,
}, [{
    trigger: "#snippet_structure .oe_snippet:has(span:contains('Carousel')) .oe_snippet_thumbnail",
    content: "Drag the Carousel block and drop it in your page.",
    run: "drag_and_drop iframe #wrap",
},
{
    trigger: "iframe .carousel .carousel-item.active .carousel-content",
    content: "Select the active carousel item.",
}, {
    trigger: "iframe .oe_overlay.oe_active .oe_snippet_remove",
    content: "Remove the active carousel item.",
},
{
    trigger: "iframe .carousel .carousel-item.active .container:not(:has(*))",
    content: "Check for a carousel slide with an empty container tag",
    run: function () {},
}]);

return __exports;
});
;

/***************************************************************************
*  Filepath: /website/static/tests/tours/client_action_iframe_fallback.js  *
*  Lines: 29                                                               *
***************************************************************************/
odoo.define('@website/../tests/tours/client_action_iframe_fallback', ['website.tour_utils'], async function (require) {
'use strict';
let __exports = {};
/** @odoo-module */

const wTourUtils = require('website.tour_utils');

wTourUtils.registerWebsitePreviewTour('client_action_iframe_fallback', {
    test: true,
    url: '/',
},
[
    {
        content: "Ensure we are on the expected page",
        trigger: 'body iframe html[data-view-xmlid="website.homepage"]',
        run: () => {}, // It's a check.
    }, {
        content: "Ensure the iframe fallback is not loaded in test mode",
        trigger: 'body',
        run: () => {
            if (document.querySelector('iframe[src="/website/iframefallback"]')) {
                console.error("The iframe fallback shouldn't be inside the DOM.");
            }
        },
    },
]);

return __exports;
});
;

/********************************************************************
*  Filepath: /website/static/tests/tours/client_action_redirect.js  *
*  Lines: 86                                                        *
********************************************************************/
odoo.define('@website/../tests/tours/client_action_redirect', ['@web/core/registry'], async function (require) {
'use strict';
let __exports = {};
/** @odoo-module */

const { registry } = require("@web/core/registry");

const testUrl = '/test_client_action_redirect';

const goToFrontendSteps = [{
    content: "Go to the frontend",
    trigger: 'body',
    run: () => {
        window.location.href = testUrl;
    },
}, {
    content: "Check we are in the frontend",
    trigger: 'body:not(:has(.o_website_preview)) #test_contact_FE',
    run: () => null, // it's a check
}];
const goToBackendSteps = [{
    content: "Go to the backend",
    trigger: 'body',
    run: () => {
        window.location.href = `/@${testUrl}`;
    },
}, {
    content: "Check we are in the backend",
    trigger: '.o_website_preview',
    run: () => null, // it's a check
}];
const checkEditorSteps = [{
    content: "Check that the editor is loaded",
    trigger: 'iframe body.editor_enable',
    timeout: 30000,
    run: () => null, // it's a check
}, {
    content: "exit edit mode",
    trigger: '.o_we_website_top_actions button.btn-primary:contains("Save")',
}, {
    content: "wait for editor to close",
    trigger: 'iframe body:not(.editor_enable)',
    run: () => null, // It's a check
}];

registry.category("web_tour.tours").add('client_action_redirect', {
    test: true,
    url: testUrl,
    steps: [
    // Case 1: From frontend, click on `enable_editor=1` link without `/@/` in it
    ...goToFrontendSteps,
    {
        content: "Click on the link to frontend",
        trigger: '#test_contact_FE',
    },
    ...checkEditorSteps,

    // Case 2: From frontend, click on `enable_editor=1` link with `/@/` in it
    ...goToFrontendSteps,
    {
        content: "Click on the link to backend",
        trigger: '#test_contact_BE',
    },
    ...checkEditorSteps,

    // Case 3: From backend, click on `enable_editor=1` link without `/@/` in it
    // TODO: This will be fixed in another fix related to the listening of the
    //       URL changes from the client action.
    // ...goToBackendSteps,
    // {
    //     content: "Click on the link to frontend (2)",
    //     trigger: 'iframe #test_contact_FR',
    // },
    // ...checkEditorSteps,

    // Case 4: From backend, click on `enable_editor=1` link with `/@/` in it
    ...goToBackendSteps,
    {
        content: "Click on the link to backend (2)",
        trigger: 'iframe #test_contact_BE',
    },
    ...checkEditorSteps,
]});

return __exports;
});
;

/********************************************************************
*  Filepath: /website/static/tests/tours/conditional_visibility.js  *
*  Lines: 186                                                       *
********************************************************************/
odoo.define('@website/../tests/tours/conditional_visibility', ['website.tour_utils'], async function (require) {
'use strict';
let __exports = {};
/** @odoo-module */

const wTourUtils = require('website.tour_utils');

const snippets = [
    {
        id: 's_text_image',
        name: 'Text - Image',
    },
    {
        id: "s_banner",
        name: "Banner",
    },
    {
        id: "s_popup",
        name: "Popup",
    },
];
function checkEyeIcon(snippetName, visible) {
    const eyeIcon = visible ? "fa-eye" : "fa-eye-slash";
    const openOrClose = visible ? "open" : "close";
    const endExplanation = `should be ${openOrClose} in the "Invisible Elements" panel`;
    const invisibleElPanel = "o_we_invisible_el_panel";
    return {
            content: `The eye icon of ${snippetName} ${endExplanation}`,
            trigger:
            `.${invisibleElPanel} .o_we_invisible_entry:contains("${snippetName}") i.${eyeIcon}`,
            run: () => {}, // it is a check
        };
}
function checkEyesIconAfterSave(footerIsHidden = true) {
    const eyeIconChecks = [
        checkEyeIcon("Header", false),
        checkEyeIcon("Text - Image", true),
        checkEyeIcon("Popup", false),
        checkEyeIcon("Banner", true),
    ];
    if (footerIsHidden) {
        eyeIconChecks.push(checkEyeIcon("Footer", false));
    }
    return eyeIconChecks;
}
wTourUtils.registerWebsitePreviewTour('conditional_visibility_1', {
    edition: true,
    url: '/',
    test: true,
}, [
wTourUtils.dragNDrop(snippets[0]),
wTourUtils.clickOnSnippet(snippets[0]),
wTourUtils.changeOption('ConditionalVisibility', 'we-toggler'),
{
    content: 'click on conditional visibility',
    trigger: '[data-name="visibility_conditional"]',
    run: 'click',
},
{
    content: 'click on utm medium toggler',
    trigger: '[data-save-attribute="visibilityValueUtmMedium"] we-toggler',
    run: 'click',
},
{
    trigger: '[data-save-attribute="visibilityValueUtmMedium"] we-selection-items [data-add-record="Email"]',
    content: 'click on Email',
    run: 'click',
},
...wTourUtils.clickOnSave(),
{
    content: 'Check if the rule was applied',
    extra_trigger: '.o_website_preview:only-child',
    trigger: 'iframe #wrap',
    run: function (actions) {
        const style = window.getComputedStyle(this.$anchor[0].getElementsByClassName('s_text_image')[0]);
        if (style.display !== 'none') {
            console.error('error This item should be invisible and only visible if utm_medium === email');
        }
    },
},
...wTourUtils.clickOnEditAndWaitEditMode(),
{
    content: 'Check if the element is visible as it should always be visible in edit view',
    trigger: 'iframe #wrap .s_text_image',
    run: function (actions) {
        const style = window.getComputedStyle((this.$anchor[0]));
        if (style.display === 'none') {
            console.error('error This item should now be visible because utm_medium === email');
        }
    },
},
]);

wTourUtils.registerWebsitePreviewTour("conditional_visibility_3", {
    edition: true,
    test: true,
    url: "/",
},
[
checkEyeIcon("Text - Image", true),
// Drag a "Banner" snippet on the website.
wTourUtils.dragNDrop(snippets[1]),
// Click on the "Banner" snippet.
wTourUtils.clickOnSnippet(snippets[1]),
wTourUtils.changeOption("ConditionalVisibility", "we-toggler"),
wTourUtils.changeOption("ConditionalVisibility", '[data-name="visibility_conditional"]'),
checkEyeIcon("Banner", true),
{
    content: "click on 'Blocks'",
    trigger: "#snippets_menu button:contains('Blocks')",
},
// Drag a "Popup" snippet on the website.
wTourUtils.dragNDrop(snippets[2]),
{
    content: "Toggle the visibility of the popup",
    in_modal: false,
    trigger: ".o_we_invisible_el_panel .o_we_invisible_entry:contains('Popup')",
},
checkEyeIcon("Popup", false),
{
    content: "Click on footer",
    trigger: "iframe #wrapwrap footer",
},
wTourUtils.changeOption("HideFooter", "we-checkbox"),
checkEyeIcon("Footer", false),
{
    content: "Click on Header",
    trigger: "iframe #wrapwrap header",
},
wTourUtils.changeOption("TopMenuVisibility", "we-toggler"),
wTourUtils.changeOption("TopMenuVisibility", '[data-visibility="hidden"]'),
checkEyeIcon("Header", false),
{
    content: "Toggle the visibility of the Banner snippet",
    trigger: ".o_we_invisible_el_panel .o_we_invisible_entry:contains('Banner')",
},
checkEyeIcon("Banner", false),
...wTourUtils.clickOnSave(),
...wTourUtils.clickOnEditAndWaitEditMode(),
...checkEyesIconAfterSave(),
]);

wTourUtils.registerWebsitePreviewTour("conditional_visibility_4", {
    edition: true,
    test: true,
    url: "/",
},
[
// Click on the "Text-Image" snippet.
wTourUtils.clickOnSnippet(snippets[0]),
{
    content: "Click on the 'move down' option",
    trigger: "iframe we-button.o_we_user_value_widget.fa-angle-down",
},
...checkEyesIconAfterSave(),
{
    content: "Check the order on the 'Invisible Elements' panel",
    trigger: ".o_we_invisible_el_panel div:nth-child(3):contains('Banner')",
    run: () => {}, // it is a check
},
{
    content: "Toggle the visibility of the Footer",
    trigger: ".o_we_invisible_el_panel .o_we_invisible_entry:contains('Footer')",
},
{
    content: "Check that the footer is visible",
    trigger: "iframe #wrapwrap footer",
    run: () => {}, // it is a check
},
// Click on the "Banner" snippet.
wTourUtils.clickOnSnippet(snippets[1]),
{
    content: "Drag the 'Banner' snippet to the end of the page",
    trigger: "iframe .o_overlay_move_options .ui-draggable-handle",
    run: "drag_and_drop iframe #wrapwrap footer",
},
...checkEyesIconAfterSave(false),
{
    content: "Check the order on the 'Invisible Elements' panel",
    trigger: ".o_we_invisible_el_panel div:nth-child(3):contains('Text - Image')",
    run: () => {}, // it is a check
},
]);

return __exports;
});
;

/*****************************************************************************
*  Filepath: /website/static/tests/tours/conditional_visibility_frontend.js  *
*  Lines: 24                                                                 *
*****************************************************************************/
odoo.define('@website/../tests/tours/conditional_visibility_frontend', ['@web/core/registry'], async function (require) {
'use strict';
let __exports = {};
/** @odoo-module **/

const { registry } = require("@web/core/registry");

registry.category("web_tour.tours").add('conditional_visibility_2', {
    test: true,
    url: '/?utm_medium=Email',
    steps: [{
    content: 'The content previously hidden should now be visible',
    trigger: 'body #wrap',
    run: function (actions) {
        const style = window.getComputedStyle(this.$anchor[0].getElementsByClassName('s_text_image')[0]);
        if (style.display === 'none') {
            console.error('error This item should now be visible because utm_medium === email');
        }
    },
},
]});

return __exports;
});
;

/**********************************************************************
*  Filepath: /website/static/tests/tours/configurator_translation.js  *
*  Lines: 80                                                          *
**********************************************************************/
odoo.define('@website/../tests/tours/configurator_translation', ['@web/core/registry'], async function (require) {
'use strict';
let __exports = {};
/** @odoo-module */

const { registry } = require("@web/core/registry");

registry.category("web_tour.tours").add('configurator_translation', {
    test: true,
    url: '/website/configurator',
    steps: [
    // Configurator first screen
    {
        content: "click next",
        trigger: 'button.o_configurator_show',
    },
    // Make sure "Back" works
    {
        content: "use browser's Back",
        trigger: 'a.o_change_website_type',
        run: () => {
            window.history.back();
        },
    }, {
        content: "return to description screen",
        trigger: 'button.o_configurator_show',
    },
    // Description screen
    {
        content: "select a website type",
        trigger: 'a.o_change_website_type',
    }, {
        content: "insert a website industry",
        trigger: '.o_configurator_industry input',
        run: 'text ab',
    }, {
        content: "select a website industry from the autocomplete",
        trigger: '.o_configurator_industry_wrapper ul li a:contains("in fr")',
    }, {
        content: "select an objective",
        trigger: '.o_configurator_purpose_dd a',
    }, {
        content: "choose from the objective list",
        trigger: 'a.o_change_website_purpose',
    },
    // Palette screen
    {
        content: "chose a palette card",
        trigger: '.palette_card',
    },
    // Features screen
    {
        content: "select confidentialité",
        trigger: '.card:contains(Parseltongue_privacy)',
    }, {
        content: "Click on build my website",
        trigger: 'button.btn-primary',
    }, {
        content: "Loader should be shown",
        trigger: '.o_website_loader_container',
        run: function () {}, // it's a check
    }, {
        content: "Wait untill the configurator is finished",
        trigger: '#oe_snippets.o_loaded',
        timeout: 30000,
    }, {
        // Check the content of the save button to make sure the website is in
        // Parseltongue. (The editor should be in the website's default language,
        // which should be parseltongue in this test.)
        content: "exit edit mode",
        trigger: '.o_we_website_top_actions button.btn-primary:contains("Save_Parseltongue")',
    }, {
         content: "wait for editor to be closed",
         trigger: 'iframe body:not(.editor_enable)',
         run: function () {}, // It's a check.
    }
]});

return __exports;
});
;

/*******************************************************************************
*  Filepath: /website/static/tests/tours/default_shape_gets_palette_colors.js  *
*  Lines: 31                                                                   *
*******************************************************************************/
odoo.define("website.tour.default_shape_gets_palette_colors", function (require) {
"use strict";

const wTourUtils = require('website.tour_utils');

wTourUtils.registerWebsitePreviewTour("default_shape_gets_palette_colors", {
    test: true,
    url: '/',
    edition: true,
}, [
    wTourUtils.dragNDrop({
        id: 's_text_image',
        name: 'Text - Image',
    }),
    wTourUtils.clickOnSnippet({
        id: 's_text_image',
        name: 'Text - Image',
    }),
    wTourUtils.changeOption('ColoredLevelBackground', 'Shape'),
    {
        content: "Check that shape does not have a background-image in its inline style",
        trigger: 'iframe #wrap .s_text_image .o_we_shape',
        run: () => {
            const shape = $('iframe:not(.o_ignore_in_tour)').contents().find('#wrap .s_text_image .o_we_shape')[0];
            if (shape.style.backgroundImage) {
                console.error("error The default shape has a background-image in its inline style (should rely on the class)");
            }
        },
    },
]);
});
;

/***************************************************************
*  Filepath: /website/static/tests/tours/edit_link_popover.js  *
*  Lines: 211                                                  *
***************************************************************/
odoo.define("website.tour.edit_link_popover", function (require) {
"use strict";

const { browser } = require('@web/core/browser/browser');
const { patch } = require("@web/core/utils/patch");
const wTourUtils = require('website.tour_utils');

const FIRST_PARAGRAPH = 'iframe #wrap .s_text_image p:nth-child(2)';

const clickFooter = [{
    content: "Save the link by clicking outside the URL input (not on a link element)",
    trigger: 'iframe footer h5:first',
}, {
    content: "Wait delayed click on footer",
    trigger: '.o_we_customize_panel we-title:contains("Footer")',
    run: function () {}, // it's a check
}];

const clickEditLink = [{
    content: "Click on Edit Link in Popover",
    trigger: 'iframe .o_edit_menu_popover .o_we_edit_link',
}, {
    content: "Ensure popover is closed",
    trigger: 'iframe html:not(:has(.o_edit_menu_popover))', // popover should be closed
    run: function () {}, // it's a check
    in_modal: false,
}];

wTourUtils.registerWebsitePreviewTour('edit_link_popover', {
    test: true,
    url: '/',
    edition: true,
}, [
    // 1. Test links in page content (web_editor)
    wTourUtils.dragNDrop({
        id: 's_text_image',
        name: 'Text - Image',
    }),
    {
        content: "Click on a paragraph",
        trigger: FIRST_PARAGRAPH,
        run: 'text Paragraph', // Make sure the selection is set in the paragraph
    },
    {
        content: "Click on 'Link' to open Link Dialog",
        trigger: "#toolbar #create-link",
    },
    {
        content: "Type the link URL /contactus",
        trigger: '#o_link_dialog_url_input',
        run: 'text /contactus'
    },
    ...clickFooter,
    {
        content: "Click on newly created link",
        trigger: `${FIRST_PARAGRAPH} a`,
    },
    {
        content: "Popover should be shown",
        trigger: 'iframe .o_edit_menu_popover .o_we_url_link:contains("Contact Us")', // At this point preview is loaded
        run: function () {}, // it's a check
    },
    ...clickEditLink,
    {
        content: "Type the link URL /",
        trigger: '#o_link_dialog_url_input',
        run: "text /"
    },
    ...clickFooter,
    {
        content: "Click on link",
        trigger: `${FIRST_PARAGRAPH} a`,
    },
    {
        content: "Popover should be shown with updated preview data",
        trigger: 'iframe .o_edit_menu_popover .o_we_url_link:contains("Home")',
        run: function () {}, // it's a check
    },
    {
        content: "Click on Remove Link in Popover",
        trigger: 'iframe .o_edit_menu_popover .o_we_remove_link',
    },
    {
        content: "Link should be removed",
        trigger: `${FIRST_PARAGRAPH}:not(:has(a))`,
        run: function () {}, // it's a check
    },
    {
        content: "Ensure popover is closed",
        trigger: 'iframe html:not(:has(.o_edit_menu_popover))', // popover should be closed
        run: function () {}, // it's a check
    },
    // 2. Test links in navbar (website)
    {
        content: "Click navbar menu Home",
        trigger: 'iframe #top_menu a:contains("Home")',
    },
    {
        content: "Popover should be shown (2)",
        trigger: 'iframe .o_edit_menu_popover .o_we_url_link:contains("Home")',
        run: function () {}, // it's a check
    },
    ...clickEditLink,
    {
        content: "Change the URL",
        trigger: '#url_input',
        run: "text /contactus"
    },
    {
        content: "Save the Edit Menu modal",
        trigger: '.modal-footer .btn-primary',
    },
    {
        content: "Click on the Home menu again",
        extra_trigger: 'div:not(.o_loading_dummy) > #oe_snippets',
        trigger: 'iframe #top_menu a:contains("Home")[href="/contactus"]',
    },
    {
        content: "Popover should be shown with updated preview data (2)",
        trigger: 'iframe .o_edit_menu_popover .o_we_url_link:contains("Contact Us")',
        run: function () {}, // it's a check
    },
    {
        content: "Click on Edit Menu in Popover",
        trigger: 'iframe .o_edit_menu_popover .js_edit_menu',
    },
    {
        content: "Edit Menu (tree) should open",
        trigger: '.o_website_dialog .oe_menu_editor',
        run: function () {}, // it's a check
    },
    {
        content: "Close modal",
        trigger: '.modal-footer .btn-secondary',
    },
    // 3. Test other links (CTA in navbar & links in footer)
    {
        content: "Click CTA in navbar",
        trigger: 'iframe #top_menu_container a.btn-primary[href="/contactus"]',
    },
    {
        content: "Popover should be shown (3)",
        trigger: 'iframe .o_edit_menu_popover .o_we_url_link:contains("Contact Us")',
        run: function () {}, // it's a check
    },
    {
        content: "Toolbar should be shown (3)",
        trigger: '#toolbar:has(#o_link_dialog_url_input:propValue(/contactus))',
        run: function () {}, // it's a check
    },
    {
        content: "Click 'Home' link in footer",
        trigger: 'iframe footer a[href="/"]',
    },
    {
        content: "Popover should be shown (4)",
        trigger: 'iframe .o_edit_menu_popover .o_we_url_link:contains("Home")',
        run: function () {}, // it's a check
    },
    {
        content: "Toolbar should be shown (4)",
        trigger: '#toolbar:has(#o_link_dialog_url_input:propValue(/))',
        run: function () {}, // it's a check
    },
    // 4. Popover should close when clicking non-link element
    ...clickFooter,
    // 5. Double click should not open popover but should open toolbar link
    {
        content: "Double click on link",
        extra_trigger: 'iframe html:not(:has(.o_edit_menu_popover))', // popover should be closed
        trigger: 'iframe footer a[href="/"]',
        run: function (actions) {
            // Create range to simulate real double click, see pull request
            const range = document.createRange();
            range.selectNodeContents(this.$anchor[0]);
            const sel = window.getSelection();
            sel.removeAllRanges();
            sel.addRange(range);
            actions.click();
            actions.dblclick();
        },
    },
    {
        content: "Ensure popover is opened on double click, and so is right panel edit link",
        trigger: 'html:has(#o_link_dialog_url_input)',
        extra_trigger: 'iframe html:has(.o_edit_menu_popover)',
        run: function () {}, // it's a check
    },
    {
        content: "Ensure that a click on the link popover link opens a new window in edit mode",
        trigger: 'iframe .o_edit_menu_popover a.o_we_url_link[target="_blank"]',
        extra_trigger: 'iframe .o_edit_menu_popover a.o_we_full_url[target="_blank"]',
        run: (actions) => {
            // We do not want to open a link in a tour
            patch(browser, 'window_open_action', {
                open: (url) => {
                    if (window.location.hostname === url.hostname && url.pathname.startsWith('/@/')) {
                        document.querySelector('body').classList.add('new_backend_window_opened');
                    }
                }
            }, { pure: true });
            actions.click();
        },
    },
    {
        content: "Ensure that link is opened correctly in edit mode",
        trigger: '.new_backend_window_opened',
        run: () => {}, // it's a check
    },
]);
});
;

/***********************************************************
*  Filepath: /website/static/tests/tours/edit_megamenu.js  *
*  Lines: 92                                               *
***********************************************************/
odoo.define("website.tour.edit_megamenu", function (require) {
"use strict";

const wTourUtils = require('website.tour_utils');

const toggleMegaMenu = (stepOptions) => Object.assign({}, {
    content: "Toggles the mega menu.",
    trigger: 'iframe #top_menu .nav-item a.o_mega_menu_toggle',
    run: function () {
        // If the mega menu is displayed inside the extra menu items, it should
        // already be displayed.
        if (!this.$anchor[0].closest('.o_extra_menu_items')) {
            this.$anchor[0].dispatchEvent(new Event('click'))
        }
    },
}, stepOptions);

wTourUtils.registerWebsitePreviewTour('edit_megamenu', {
    test: true,
    url: '/',
    edition: true,
}, [
    // Add a megamenu item to the top menu.
    {
        content: "Click on a menu item",
        trigger: 'iframe #top_menu .nav-item a',
    },
    {
        content: "Click on 'Link' to open Link Dialog",
        trigger: 'iframe .o_edit_menu_popover a.js_edit_menu',
    },
    {
        content: "Trigger the link dialog (click 'Add Mega Menu Item')",
        extra_trigger: '.o_website_dialog:visible',
        trigger: '.modal-body a:eq(1)',
    },
    {
        content: "Write a label for the new menu item",
        trigger: '.modal-dialog .o_website_dialog input',
        run: 'text Megaaaaa!'
    },
    {
        content: "Confirm the mega menu label",
        trigger: '.modal-footer .btn-primary',
    },
    {
        content: "Save the website menu with a new mega menu",
        trigger: '.modal-footer .btn-primary',
        extra_trigger: '.oe_menu_editor [data-is-mega-menu="true"] .js_menu_label:contains("Megaaaaa!")',
    },
    // Edit a menu item
    wTourUtils.clickOnExtraMenuItem({extra_trigger: '#oe_snippets.o_loaded'}, true),
    toggleMegaMenu({extra_trigger: 'iframe #top_menu .nav-item a.o_mega_menu_toggle:contains("Megaaaaa!")'}),
    {
        content: "Select the last menu link of the first column",
        trigger: 'iframe .s_mega_menu_odoo_menu .row > div:first-child .nav > :nth-child(6)', // 6th is the last one
    },
    {
        content: "Hit the delete button to remove the menu link",
        trigger: 'iframe .oe_overlay .oe_snippet_remove',
    },
    {
        content: "Check that the last menu link was deleted",
        trigger: 'iframe .s_mega_menu_odoo_menu .row > div:first-child .nav:not(:has(> :nth-child(6)))',
        run: () => null,
    },
    {
        content: "Clicks on the first title item.",
        trigger: 'iframe .o_mega_menu h4',
    },
    {
        content: "Press enter.",
        trigger: 'iframe .o_mega_menu h4',
        run: function (actions) {
            this.$anchor[0].dispatchEvent(new window.InputEvent('input', {bubbles: true, inputType: 'insertParagraph'}));
        },
    },
    {
        content: "The menu should still be visible. Edit a menu item.",
        trigger: 'iframe .o_mega_menu h4',
        run: 'text New Menu Item',
    },
    ...wTourUtils.clickOnSave(),
    wTourUtils.clickOnExtraMenuItem({extra_trigger: 'iframe body:not(.editor_enable)'}, true),
    toggleMegaMenu(),
    {
        content: "The menu item should have been renamed.",
        trigger: 'iframe .o_mega_menu h4:contains("New Menu Item")',
        run: function () {}, // it's a check
    },
]);
});
;

/********************************************************
*  Filepath: /website/static/tests/tours/edit_menus.js  *
*  Lines: 270                                           *
********************************************************/
odoo.define('@website/../tests/tours/edit_menus', ['website.tour_utils'], async function (require) {
'use strict';
let __exports = {};
/** @odoo-module */

const wTourUtils = require('website.tour_utils');

wTourUtils.registerWebsitePreviewTour('edit_menus', {
    test: true,
    url: '/',
}, [
    // Add a megamenu item from the menu.
    {
        content: "open site menu",
        extra_trigger: "iframe #wrapwrap",
        trigger: 'button[data-menu-xmlid="website.menu_site"]',
    },
    {
        content: "Click on Edit Menu",
        trigger: 'a[data-menu-xmlid="website.menu_edit_menu"]',
    },
    {
        content: "Trigger the link dialog (click 'Add Mega Menu Item')",
        extra_trigger: '.o_website_dialog:visible',
        trigger: '.modal-body a:eq(1)',
    },
    {
        content: "Write a label for the new menu item",
        trigger: '.modal-dialog .o_website_dialog input',
        run: 'text Megaaaaa!'
    },
    {
        content: "Confirm the mega menu label",
        trigger: '.modal-footer .btn-primary',
    },
    {
        content: "Save the new menu",
        trigger: '.modal-footer .btn-primary',
        extra_trigger: '.oe_menu_editor [data-is-mega-menu="true"] .js_menu_label:contains("Megaaaaa!")',
    },
    wTourUtils.clickOnExtraMenuItem({extra_trigger: 'body:not(:has(.oe_menu_editor))'}, true),
    {
        content: "There should be a new megamenu item.",
        trigger: 'iframe #top_menu .nav-item a.o_mega_menu_toggle:contains("Megaaaaa!")',
        run: () => {}, // It's a check.
    },
    // Add a menu item in edit mode.
    ...wTourUtils.clickOnEditAndWaitEditMode(),
    {
        content: "Click on a menu item",
        trigger: 'iframe #top_menu .nav-item a',
    },
    {
        content: "Click on Edit Menu",
        trigger: 'iframe .o_edit_menu_popover a.js_edit_menu',
    },
    {
        content: "Trigger the link dialog (click 'Add Menu Item')",
        extra_trigger: '.o_website_dialog:visible',
        trigger: '.modal-body a:eq(0)',
    },
    {
        content: "Confirm the new menu entry without a label",
        extra_trigger: '.modal-dialog .o_website_dialog input:eq(0)',
        trigger: '.modal-footer .btn-primary',
    },
    {
        content: "It didn't save without a label. Fill label input.",
        extra_trigger: '.o_website_dialog:eq(1):visible',
        trigger: '.modal-dialog .o_website_dialog input:eq(0)',
        run: 'text Random!',
    },
    {
        content: "Confirm the new menu entry without a url",
        trigger: '.modal-footer .btn-primary',
    },
    {
        content: "It didn't save without a url. Fill url input.",
        trigger: '.modal-dialog .o_website_dialog input:eq(1)',
        extra_trigger: '.modal-dialog .o_website_dialog input.is-invalid',
        run: 'text #',
    },
    {
        content: "Confirm the new menu entry",
        trigger: '.modal-footer .btn-primary',
    },
    {
        content: "Save the website menu with the new entry",
        trigger: '.modal-footer .btn-primary',
        extra_trigger: '.oe_menu_editor .js_menu_label:contains("Random!")',
    },
    // Edit the new menu item from the "edit link" popover button
    wTourUtils.clickOnExtraMenuItem({extra_trigger: '#oe_snippets.o_loaded'}, true),
    {
        content: "Menu should have a new link item",
        trigger: 'iframe #top_menu .nav-item a:contains("Random!")',
    },
    {
        content: "Click on Edit Link",
        trigger: 'iframe .o_edit_menu_popover a.o_we_edit_link',
    },
    {
        content: "Change the label",
        trigger: '.modal-dialog .o_website_dialog input:eq(0)',
        run: 'text Modnar',
    },
    {
        content: "Confirm the new label",
        trigger: '.modal-footer .btn-primary',
    },
    ...wTourUtils.clickOnSave(),
    wTourUtils.clickOnExtraMenuItem({extra_trigger: 'iframe body:not(.editor_enable)'}, true),
    {
        content: "Label should have changed",
        extra_trigger: "iframe body:not(.editor_enable)",
        trigger: 'iframe #top_menu .nav-item a:contains("Modnar")',
        run: () => {}, // it's a check
    },
    // Edit the menu item from the "edit menu" popover button
    ...wTourUtils.clickOnEditAndWaitEditMode(),
    {
        content: "Click on the 'Modnar' link",
        trigger: 'iframe #top_menu .nav-item a:contains("Modnar")',
    },
    {
        content: "Click on the popover Edit Menu button",
        trigger: 'iframe .o_edit_menu_popover a.js_edit_menu',
    },
    {
        content: "Click on the dialog Edit Menu button",
        trigger: '.oe_menu_editor .js_menu_label:contains("Modnar")',
        run: function () {
            const liEl = this.$anchor[0].closest('[data-menu-id]');
            liEl.querySelector('button.js_edit_menu').click();
        },
    },
    {
        content: "Change the label",
        trigger: '.modal-dialog .o_website_dialog input:eq(0)',
        run: 'text Modnar !!',
    },
    {
        content: "Confirm the new menu label",
        trigger: '.modal-footer .btn-primary',
    },
    {
        content: "Save the website menu with the new menu label",
        trigger: '.modal-footer .btn-primary',
        extra_trigger: '.oe_menu_editor .js_menu_label:contains("Modnar !!")',
    },
    // Drag a block to be able to scroll later.
    wTourUtils.dragNDrop({id: 's_media_list', name: 'Media List'}),
    ...wTourUtils.clickOnSave(),
    wTourUtils.clickOnExtraMenuItem({extra_trigger: 'iframe body:not(.editor_enable)'}, true),
    {
        content: "Label should have changed",
        trigger: 'iframe #top_menu .nav-item a:contains("Modnar !!")',
        run: () => {}, // It's a check.
    },
    // Nest menu item from the menu.
    {
        content: "open site menu",
        trigger: 'button[data-menu-xmlid="website.menu_site"]',
    },
    {
        content: "Click on Edit Menu",
        trigger: 'a[data-menu-xmlid="website.menu_edit_menu"]',
    },
    {
        content: "Drag item into parent",
        trigger: '.oe_menu_editor li:contains("Contact us") > .ui-sortable-handle',
        // Menu rows are 38px tall.
        run: "drag_move_and_drop [50,38]@.oe_menu_editor li:contains('Home') > .ui-sortable-handle => .oe_menu_editor li:contains('Home') .ui-sortable-placeholder",
    },
    {
        content: "Wait for drop",
        trigger: '.oe_menu_editor li:contains("Home") ul li:contains("Contact us")',
        run: () => {}, // It's a check.
    },
    // Drag the Mega menu to the first position.
    {
        content: "Drag Mega at the top",
        trigger: '.oe_menu_editor li:contains("Megaaaaa!") > .ui-sortable-handle',
        run: "drag_move_and_drop [0,0]@.oe_menu_editor li:contains('Home') > .ui-sortable-handle => .oe_menu_editor li",
    },
    {
        content: "Wait for drop",
        trigger: '.oe_menu_editor:first-child:contains("Megaaaaa!")',
        run: () => {}, // It's a check.
    },
    {
        content: "Save the website menu with new nested menus",
        trigger: '.modal-footer .btn-primary',
    },
    {
        content: "Menu item should have a child",
        trigger: 'iframe #top_menu .nav-item a.dropdown-toggle:contains("Home")',
    },
    // Check that with the auto close of dropdown menus, the dropdowns remain
    // openable.
    {
        content: "When menu item is opened, child item must appear in the shown menu",
        trigger: 'iframe #top_menu .nav-item:contains("Home") ul.show li a.dropdown-item:contains("Contact us")[href="/contactus"]',
        run: function () {
            // Scroll down.
            this.$anchor[0].closest('body').querySelector('.o_footer_copyright_name')
                .scrollIntoView(true);
        },
    },
    {
        content: "The Home menu should be closed",
        trigger: 'iframe #top_menu .nav-item:contains("Home"):has(ul:not(.show))',
        run: () => {}, // It's a check.
    },
    {
        content: "Open the Home menu after scroll",
        trigger: 'iframe #top_menu .nav-item a.dropdown-toggle:contains("Home")',
    },
    {
        content: "Check that the Home menu is opened",
        trigger: 'iframe #top_menu .nav-item:contains("Home") ul.show li' +
            ' a.dropdown-item:contains("Contact us")[href="/contactus"]',
        run: () => {}, // It's a check.
    },
    {
        content: "Close the Home menu",
        trigger: 'iframe #top_menu .nav-item:has(a.dropdown-toggle:contains("Home"))',
    },
    {
        content: "Check that the Home menu is closed",
        trigger: 'iframe #top_menu .nav-item:contains("Home"):has(ul:not(.show))',
        run: () => {}, // It's a check.
    },
    {
        content: "Open the mega menu",
        trigger: 'iframe #top_menu .nav-item a.o_mega_menu_toggle:contains("Megaaaaa!")',
    },
    {
        content: "When the mega menu is opened, scroll up",
        trigger: 'iframe #top_menu .o_mega_menu_toggle.show',
        run: function () {
            const marginTopOfMegaMenu = getComputedStyle(
                this.$anchor[0].closest('.dropdown').querySelector('.o_mega_menu'))['margin-top'];
            if (marginTopOfMegaMenu !== '0px') {
                console.error('The margin-top of the mega menu should be 0px');
            }
            // Scroll up.
            this.$anchor[0].closest('body').querySelector('.s_media_list_item:nth-child(2)')
                .scrollIntoView(true);
        }
    },
    {
        content: "Check that the mega menu is closed",
        trigger: 'iframe #top_menu .nav-item:contains("Megaaaaa!"):has(div[data-name="Mega Menu"]:not(.show))',
        run:() => {}, // It's a check.
    },
    {
        content: "Open the mega menu after scroll",
        trigger: 'iframe #top_menu .nav-item a.o_mega_menu_toggle:contains("Megaaaaa!")',
    },
    {
        content: "Check that the mega menu is opened",
        trigger: 'iframe #top_menu .nav-item:has(a.o_mega_menu_toggle:contains("Megaaaaa!")) ' +
                 '.s_mega_menu_odoo_menu',
        run: () => {}, // It's a check.
    }
]);

return __exports;
});
;

/******************************************************************
*  Filepath: /website/static/tests/tours/edit_translated_page.js  *
*  Lines: 41                                                      *
******************************************************************/
odoo.define('@website/../tests/tours/edit_translated_page', ['@web/core/registry', 'website.tour_utils'], async function (require) {
'use strict';
let __exports = {};
/** @odoo-module **/

const { registry } = require("@web/core/registry");
const wTourUtils = require("website.tour_utils");

registry.category("web_tour.tours").add('edit_translated_page_redirect', {
    test: true,
    url: '/nl/contactus',
    steps: [
    {
        content: "Enter backend",
        trigger: 'a.o_frontend_to_backend_edit_btn',
    },
    {
        content: "Check the data-for attribute",
        trigger: 'iframe main:has([data-for="contactus_form"])',
        run: () => {}, // it's a check
        },
    ...wTourUtils.clickOnEditAndWaitEditMode(),
    {
        content: "Go to /nl",
        trigger: "body",
        run: () => {
            // After checking the presence of the editor dashboard, we visit a
            // translated version of the homepage. The homepage is a special
            // case (there is no trailing slash), so we test it separately.
            location.href = '/nl';
        },
    },
    {
        content: "Enter backend",
        trigger: 'a.o_frontend_to_backend_edit_btn',
    },
    ...wTourUtils.clickOnEditAndWaitEditMode(),
]});

return __exports;
});
;

/*****************************************************************
*  Filepath: /website/static/tests/tours/focus_blur_snippets.js  *
*  Lines: 83                                                     *
*****************************************************************/
odoo.define('website.tour.focus_blur_snippets', function (require) {
'use strict';

const { loadJS } = require('@web/core/assets');
const wTourUtils = require("website.tour_utils");

const blockIDToData = {
    parent: {
        selector: 'iframe .s_focusblur',
        name: 'section',
        overlayIndex: 2,
    },
    child1: {
        selector: 'iframe .s_focusblur_child1',
        name: 'first child',
        overlayIndex: 1,
    },
    child2: {
        selector: 'iframe .s_focusblur_child2',
        name: 'second child',
        overlayIndex: 0,
    },
};

function clickAndCheck(blockID, expected) {
    const blockData = blockIDToData[blockID] || {};

    return [{
        content: blockID ? `Enable the ${blockData.name}` : 'Disable all blocks',
        trigger: blockData.selector || 'iframe #wrapwrap',
    }, {
        content: 'Once the related overlays are enabled/disabled, check that the focus/blur calls have been correct.',
        trigger: blockID
            ? `iframe .oe_overlay.ui-draggable:eq(${blockData.overlayIndex}).oe_active`
            : `iframe #oe_manipulators:not(:has(.oe_active))`,
        run: function (actions) {
            const result = window.focusBlurSnippetsResult;
            window.focusBlurSnippetsResult = [];

            if (expected.length !== result.length
                    || !expected.every((item, i) => item === result[i])) {
                console.error(`
                    Expected: ${expected.toString()}
                    Result: ${result.toString()}
                `);
            }
        },
    }];
}

window.focusBlurSnippetsResult = [];

wTourUtils.registerWebsitePreviewTour("focus_blur_snippets", {
    test: true,
    url: "/",
    edition: true,
}, [
    {
        content: 'First load our custom JS options',
        trigger: "body",
        run: function () {
            loadJS('/website/static/tests/tour_utils/focus_blur_snippets_options.js').then(function () {
                $('iframe:not(.o_ignore_in_tour)').contents().find('body').addClass('focus_blur_snippets_options_loaded');
            });
        },
    },
    {
        content: 'Drag the custom block into the page',
        trigger: '#snippet_structure .oe_snippet:has(.oe_snippet_body.s_focusblur) .oe_snippet_thumbnail',
        extra_trigger: 'iframe body.focus_blur_snippets_options_loaded',
        run: 'drag_and_drop iframe #wrap',
    },
    ...clickAndCheck('parent', ['focus parent']),
    ...clickAndCheck(null, ['blur parent']),
    ...clickAndCheck('child1', ['focus parent', 'focus child1']),
    ...clickAndCheck('child1', []),
    ...clickAndCheck(null, ['blur parent', 'blur child1']),
    ...clickAndCheck('parent', ['focus parent']),
    ...clickAndCheck('child1', ['blur parent', 'focus parent', 'focus child1']),
    ...clickAndCheck('child2', ['blur parent', 'blur child1', 'focus parent', 'focus child2']),
    ...clickAndCheck('parent', ['blur parent', 'blur child2', 'focus parent']),
]);
});
;

/****************************************************************
*  Filepath: /website/static/tests/tours/gray_color_palette.js  *
*  Lines: 84                                                    *
****************************************************************/
odoo.define('@website/../tests/tours/gray_color_palette', ['website.tour_utils'], async function (require) {
'use strict';
let __exports = {};
/** @odoo-module **/
const wTourUtils = require('website.tour_utils');

function waitForCSSReload() {
    return [
        {
            // This step is here because the option is applied but triggers a
            // reloading of the CC value, so if the second value is sent too
            // soon, it will be ignored. Clicking on the snippet tab and back
            // will ensure that the mutex is cleared, and therefore we can apply
            // the saturation step.
            content: "Click on the blocks tab and back on theme to ensure the changes are applied",
            trigger: '.o_we_add_snippet_btn',
        },
        {
            content: "Go back to theme options",
            trigger: '.o_we_customize_theme_btn',
            extra_trigger: '#o_scroll',
        },
    ];
}

wTourUtils.registerWebsitePreviewTour('website_gray_color_palette', {
    test: true,
    url: '/',
    edition: true,
}, [
    {
        content: "Go to theme options",
        trigger: '.o_we_customize_theme_btn',
    },
    {
        content: "Toggle gray color palette",
        trigger: '.o_we_gray_preview.o_we_collapse_toggler',
    },
    {
        content: "Drag the hue slider",
        trigger: '.o_we_slider_tint[data-param="gray-hue"]',
        run: () => {
            const slider = document.querySelector('.o_we_slider_tint[data-param="gray-hue"] input');
            slider.value = 100;
            slider.dispatchEvent(new InputEvent('change', {bubbles: true}));
        },
    },
    {
        content: "Check the preview of the gray 900 after hue change",
        trigger: '[variable="900"][style="background-color: rgb(36, 41, 33) !important;"]',
        run: () => {}, // This is a check.
    },
    ...waitForCSSReload(),
    {
        content: "Drag the saturation slider",
        trigger: '.o_we_user_value_widget[data-param="gray-extra-saturation"]',
        extra_trigger: ':not(:has(.o_we_ui_loading))',
        run: () => {
            const slider = document.querySelector('.o_we_user_value_widget[data-param="gray-extra-saturation"] input');
            slider.value = 15;
            slider.dispatchEvent(new InputEvent('change', {bubbles: true}));
        }
    },
    {
        content: "Check the preview of the gray 900 after saturation change",
        trigger: '[variable="900"][style="background-color: rgb(34, 47, 27) !important;"]',
        run: () => {}, // This is a check.
    },
    ...waitForCSSReload(),
    {
        content: "Wait for the iframe to be loaded",
        trigger: 'iframe body',
        run: () => {
            const iframeEl = document.querySelector('.o_website_preview .o_iframe');
            const styles = iframeEl.contentWindow.getComputedStyle(iframeEl.contentDocument.documentElement);
            if (styles.getPropertyValue('--900').toString().replace(/ /g, '') !== '#222F1B') {
                console.error('The value for the gray 900 is not right');
            }
        }
    },
]);

return __exports;
});
;

/*********************************************************
*  Filepath: /website/static/tests/tours/grid_layout.js  *
*  Lines: 51                                             *
*********************************************************/
odoo.define('@website/../tests/tours/grid_layout', ['website.tour_utils'], async function (require) {
'use strict';
let __exports = {};
/** @odoo-module **/

const wTourUtils = require('website.tour_utils');

wTourUtils.registerWebsitePreviewTour('website_replace_grid_image', {
    test: true,
    url: '/',
    edition: true,
}, [
    wTourUtils.dragNDrop({
        id: 's_text_image',
        name: 'Text - Image',
    }),
    wTourUtils.clickOnSnippet({
        id: 's_text_image',
        name: 'Text - Image',
    }),
    {
        content: "Toggle to grid mode",
        trigger: '.o_we_user_value_widget[data-name="grid_mode"]',
    },
    {
        content: "Replace image",
        trigger: 'iframe .s_text_image img',
        run: 'dblclick',
    },
    {
        content: "Pick new image",
        trigger: '.o_select_media_dialog img[title="s_banner_default_image.jpg"]',
    },
    {
        content: "Add new image column",
        trigger: '.o_we_user_value_widget[data-add-element="image"]',
    },
    {
        content: "Replace new image",
        trigger: 'iframe .s_text_image img[src="/web/image/website.s_text_image_default_image"]',
        run: 'dblclick',
    },
    {
        content: "Pick new image",
        trigger: '.o_select_media_dialog img[title="s_banner_default_image.jpg"]',
    },
    ...wTourUtils.clickOnSave()
]);

return __exports;
});
;

/*******************************************************************
*  Filepath: /website/static/tests/tours/homepage_edit_discard.js  *
*  Lines: 24                                                       *
*******************************************************************/
odoo.define('@website/../tests/tours/homepage_edit_discard', ['website.tour_utils'], async function (require) {
'use strict';
let __exports = {};
/** @odoo-module **/

const wTourUtils = require("website.tour_utils");

wTourUtils.registerWebsitePreviewTour('homepage_edit_discard', {
    test: true,
    url: '/',
    edition: true,
}, [{
    trigger: "#oe_snippets button[data-action=\"cancel\"]:not([disabled])",
    extra_trigger: "body:not(:has(.o_dialog))",
    content: "<b>Click Discard</b> to Discard all Changes.",
    position: "bottom",
}, {
    trigger: "iframe body:not(.editor_enable)",
    auto: true,
    run: () => null,
}]);

return __exports;
});
;

/*********************************************************
*  Filepath: /website/static/tests/tours/html_editor.js  *
*  Lines: 222                                            *
*********************************************************/
/* global ace */
odoo.define('website.test.html_editor', function (require) {
'use strict';

const wTourUtils = require('website.tour_utils');

const adminCssModif = '#wrap {display: none;}';
const demoCssModif = '// demo_edition';

wTourUtils.registerWebsitePreviewTour('html_editor_multiple_templates', {
    url: '/generic',
    edition: true,
    test: true,
},
    [
        {
            content: "drop a snippet",
            trigger: ".oe_snippet:has(.s_cover) .oe_snippet_thumbnail",
            // id starting by 'oe_structure..' will actually create an inherited view
            run: "drag_and_drop iframe #oe_structure_test_ui",
        },
        ...wTourUtils.clickOnSave(),
        // 2. Edit generic view
        {
            content: "open site menu",
            extra_trigger: "iframe body:not(.editor_enable)",
            trigger: 'button[data-menu-xmlid="website.menu_site"]',
        },
        {
            content: "open html editor",
            trigger: 'a[data-menu-xmlid="website.menu_ace_editor"]',
        },
        {
            content: "add something in the generic view",
            trigger: 'div.ace_line .ace_xml:contains("Generic")',
            run: function () {
                ace.edit('ace-view-editor').getSession().insert({row: 3, column: 1}, '<p>somenewcontent</p>\n');
            },
        },
        // 3. Edit oe_structure specific view
        {
            content: "select oe_structure specific view",
            trigger: 'div.ace_line .ace_xml:contains("somenewcontent")',
            run: function () {
                var viewId = $('#ace-view-list option:contains("oe_structure_test_ui")').val();
                $('#ace-view-list').val(viewId).trigger('change');
            },
        },
        {
            content: "add something in the oe_structure specific view",
            extra_trigger: '#ace-view-id:contains("test.generic_view_oe_structure_test_ui")', // If no xml_id it should show key
            trigger: 'div.ace_line .ace_xml:contains("s_cover")',
            run: function () {
                ace.edit('ace-view-editor').getSession().insert({row: 2, column: 1}, '<p>anothernewcontent</p>\n');
            },
        },
        {
            content: "save the html editor",
            extra_trigger: 'div.ace_line .ace_xml:contains("anothernewcontent")',
            trigger: ".o_ace_view_editor button[data-action=save]",
        },
        {
           content: "check that the page has both modification",
           extra_trigger: 'iframe #wrapwrap:contains("anothernewcontent")',
           trigger: 'iframe #wrapwrap:contains("somenewcontent")',
           run: function () {}, // it's a check
       },
    ]
);

wTourUtils.registerWebsitePreviewTour('test_html_editor_scss', {
    url: '/contactus',
    test: true,
},
    [
        // 1. Open Html Editor and select a scss file
        {
            content: "open site menu",
            extra_trigger: 'iframe #wrap:visible', // ensure state for later
            trigger: 'button[data-menu-xmlid="website.menu_site"]',
        },
        {
            content: "open html editor",
            trigger: 'a[data-menu-xmlid="website.menu_ace_editor"]',
        },
        {
            content: "open type switcher",
            trigger: '.o_ace_type_switcher button',
        },
        {
            content: "select scss files",
            trigger: '.o_ace_type_switcher_choice[data-type="scss"]',
        },
        {
            content: "select 'user_custom_rules'",
            trigger: 'body:has(#ace-scss-list option:contains("user_custom_rules"))',
            run: function () {
                var scssId = $('#ace-scss-list option:contains("user_custom_rules")').val();
                $('#ace-scss-list').val(scssId).trigger('change');
            },
        },
        // 2. Edit that file and ensure it was saved then reset it
        {
            content: "add some scss content in the file",
            trigger: 'div.ace_line .ace_comment:contains("footer {")',
            run: function () {
                ace.edit('ace-view-editor').getSession().insert({row: 2, column: 0}, `${adminCssModif}\n`);
            },
        },
        {
            content: "save the html editor",
            extra_trigger: `div.ace_line:contains("${adminCssModif}")`,
            trigger: ".o_ace_view_editor button[data-action=save]",
        },
         {
            content: "check that the scss modification got applied",
            trigger: 'iframe body:has(#wrap:hidden)',
            run: function () {}, // it's a check
            timeout: 30000, // SCSS compilation might take some time
        },
        {
            content: "reset view (after reload, html editor should have been reopened where it was)",
            trigger: '#ace-view-id button[data-action="reset"]:not([disabled])',
        },
        {
            content: "confirm reset warning",
            trigger: '.modal-footer .btn-primary',
        },
        {
            content: "check that the scss file was reset correctly, wrap content should now be visible again",
            trigger: 'iframe #wrap:visible',
            run: function () {}, // it's a check
            timeout: 30000, // SCSS compilation might take some time
        },
        // 3. Customize again that file (will be used in second part of the test
        //    to ensure restricted user can still use the HTML Editor)
        {
            content: "add some scss content in the file",
            trigger: 'div.ace_line .ace_comment:contains("footer {")',
            run: function () {
                ace.edit('ace-view-editor').getSession().insert({row: 2, column: 0}, `${adminCssModif}\n`);
            },
        },
        {
            content: "save the html editor",
            extra_trigger: `div.ace_line:contains("${adminCssModif}")`,
            trigger: '.o_ace_view_editor button[data-action=save]',
        },
        {
            content: "check that the scss modification got applied",
            trigger: 'iframe body:has(#wrap:hidden)',
            run: function () {}, // it's a check
        },
    ]
);

wTourUtils.registerWebsitePreviewTour('test_html_editor_scss_2', {
    url: '/',
    test: true,
},
    [
        // This part of the test ensures that a restricted user can still use
        // the HTML Editor if someone else made a customization previously.

        // 4. Open Html Editor and select a scss file
        {
            content: "open site menu",
            trigger: 'button[data-menu-xmlid="website.menu_site"]',
        },
        {
            content: "open html editor",
            trigger: 'a[data-menu-xmlid="website.menu_ace_editor"]',
        },
        {
            content: "open type switcher",
            trigger: '.o_ace_type_switcher button',
        },
        {
            content: "select scss files",
            trigger: '.o_ace_type_switcher_choice[data-type="scss"]',
        },
        {
            content: "select 'user_custom_rules'",
            trigger: 'body:has(#ace-scss-list option:contains("user_custom_rules"))',
            run: function () {
                var scssId = $('#ace-scss-list option:contains("user_custom_rules")').val();
                $('#ace-scss-list').val(scssId).trigger('change');
            },
        },
        // 5. Edit that file and ensure it was saved then reset it
        {
            content: "add some scss content in the file",
            trigger: `div.ace_line:contains("${adminCssModif}")`, // ensure the admin modification is here
            run: function () {
                ace.edit('ace-view-editor').getSession().insert({row: 2, column: 0}, `${demoCssModif}\n`);
            },
        },
        {
            content: "save the html editor",
            extra_trigger: `div.ace_line:contains("${demoCssModif}")`,
            trigger: ".o_ace_view_editor button[data-action=save]",
        },
        {
            content: "reset view (after reload, html editor should have been reopened where it was)",
            trigger: '#ace-view-id button[data-action="reset"]:not([disabled])',
            timeout: 30000, // SCSS compilation might take some time
        },
        {
            content: "confirm reset warning",
            trigger: '.modal-footer .btn-primary',
        },
        {
            content: "check that the scss file was reset correctly",
            extra_trigger: `body:not(:has(div.ace_line:contains("${adminCssModif}")))`,
            trigger: `body:not(:has(div.ace_line:contains("${demoCssModif}")))`,
            run: function () {}, // it's a check
            timeout: 30000, // SCSS compilation might take some time
        },
    ]
);

});
;

/********************************************************
*  Filepath: /website/static/tests/tours/link_tools.js  *
*  Lines: 194                                           *
********************************************************/
odoo.define('@website/../tests/tours/link_tools', ['website.tour_utils'], async function (require) {
'use strict';
let __exports = {};
/** @odoo-module */

const wTourUtils = require('website.tour_utils');

const clickOnImgStep = {
    content: "Click somewhere else to save.",
    trigger: 'iframe #wrap .s_text_image img',
};

wTourUtils.registerWebsitePreviewTour('link_tools', {
    test: true,
    url: '/',
    edition: true,
}, [
    // 1. Create a new link from scratch.
    wTourUtils.dragNDrop({
        id: 's_text_image',
        name: 'Text - Image',
    }),
    {
        content: "Replace first paragraph, to insert a new link",
        trigger: 'iframe #wrap .s_text_image p',
        run: 'text Go to odoo: '
    },
    {
        content: "Open link tools",
        trigger: "#toolbar #create-link",
    },
    {
        content: "Type the link URL odoo.com",
        trigger: '#o_link_dialog_url_input',
        run: 'text odoo.com'
    },
    clickOnImgStep,
    // 2. Edit the link with the link tools.
    {
        content: "Click on the newly created link",
        trigger: 'iframe .s_text_image a[href="http://odoo.com"]:contains("odoo.com")',
    },
    {
        content: "Change content (editing the label input) to odoo website_2",
        trigger: '#o_link_dialog_label_input[value="odoo.com"]',
        run: 'text odoo website_2',
    },
    {
        content: "Click again on the link",
        trigger: 'iframe .s_text_image a[href="http://odoo.com"]:contains("odoo website_2")',
    },
    {
        content: "Change content (editing the DOM) to odoo website",
        trigger: 'iframe .s_text_image a[href="http://odoo.com"]:contains("odoo website_2")',
        run: 'text odoo website',
    },
    clickOnImgStep,
    {
        content: "Click again on the link",
        trigger: 'iframe .s_text_image a[href="http://odoo.com"]:contains("odoo website")',
    },
    {
        content: "Check that the label input contains the new content",
        trigger: '#o_link_dialog_label_input[value="odoo website"]',
        run: () => null, // it's a check
    },
    {
        content: "Link tools, should be open, change the url",
        trigger: '#o_link_dialog_url_input',
        run: 'text odoo.be'
    },

    clickOnImgStep,
    ...wTourUtils.clickOnSave(),
    // 3. Edit a link after saving the page.
    ...wTourUtils.clickOnEditAndWaitEditMode(),
    {
        content: "The new link content should be odoo website and url odoo.be",
        trigger: 'iframe .s_text_image a[href="http://odoo.be"]:contains("odoo website")',
    },
    {
        content: "The new link content should be odoo website and url odoo.be",
        trigger: '#toolbar .dropdown:has([name="link_style_color"]) > button',
    },
    {
        // When doing automated testing, the link popover takes time to
        // hide. While hidding, the editor observer is unactive in order to
        // prevent the popover mutation to be recorded. In a manual
        // scenario, the popover has plenty of time to be hidden and the
        // obsever would be re-activated in time. As this problem arise only
        // in test, we make sure the popover is hidden
        trigger: 'iframe html:not(:has(.popover))',
        run: () => null, // it's a check
    },
    {
        content: "Click on the secondary style button.",
        trigger: '#toolbar we-button[data-value="secondary"]',
    },
    ...wTourUtils.clickOnSave(),
    {
        content: "The link should have the secondary button style.",
        trigger: 'iframe .s_text_image a.btn.btn-secondary[href="http://odoo.be"]:contains("odoo website")',
        run: () => {}, // It's a check.
    },
    // 4. Add link on image.
    ...wTourUtils.clickOnEditAndWaitEditMode(),
    wTourUtils.dragNDrop({
        id: 's_three_columns',
        name: 'Columns',
    }),
    {
        content: "Click on the first image.",
        trigger: 'iframe .s_three_columns .row > :nth-child(1) img',
    },
    {
        content: "Activate link.",
        trigger: '.o_we_customize_panel we-row:contains("Media") we-button.fa-link',
    },
    {
        content: "Set URL.",
        trigger: '.o_we_customize_panel we-input:contains("Your URL") input',
        run: 'text odoo.com',
    },
    {
        content: "Deselect image.",
        trigger: 'iframe .s_three_columns .row > :nth-child(2) img',
    },
    {
        content: "Re-select image.",
        trigger: 'iframe .s_three_columns .row > :nth-child(1) img',
    },
    {
        content: "Check that the second image is not within a link.",
        trigger: 'iframe .s_three_columns .row > :nth-child(2) div > img',
        run: () => {}, // It's a check.
    },
    {
        content: "Check that link tools appear.",
        trigger: 'iframe .popover div a:contains("http://odoo.com")',
        run: () => {}, // It's a check.
    },
    // 5. Remove link from image.
    {
        content: "Remove link.",
        trigger: 'iframe .popover:contains("http://odoo.com") a .fa-chain-broken',
    },
    {
        content: "Check that image is not within a link anymore.",
        trigger: 'iframe .s_three_columns .row > :nth-child(1) div > img',
        run: () => {}, // It's a check.
    },
    // 6. Add mega menu with Cards template and edit URL on text-selected card.
    wTourUtils.clickOnElement("menu link", "iframe header .nav-item a"),
    wTourUtils.clickOnElement("'Edit menu' icon", "iframe .o_edit_menu_popover .fa-sitemap"),
    {
        content: "Click on 'Add Mega Menu Item' link",
        extra_trigger: '.o_website_dialog:visible',
        trigger: ".modal-body a:contains('Add Mega Menu Item')",
    },
    {
        content: "Enter mega menu name",
        trigger: ".modal-body input",
        run: "text Mega",
    },
    wTourUtils.clickOnElement("OK button", ".btn-primary"),
    {
        content: "Drag Mega at the top",
        trigger: '.oe_menu_editor li:contains("Mega") .fa-bars',
        run: "drag_move_and_drop [0,0]@.oe_menu_editor li:contains('Home') .fa-bars => .oe_menu_editor li",
    },
    {
        content: "Wait for drop",
        trigger: '.oe_menu_editor:first-child:contains("Mega")',
        run: () => {}, // This is a check.
    },
    wTourUtils.clickOnElement("Save button", ".btn-primary:contains('Save')"),
    wTourUtils.clickOnElement("mega menu", "iframe header .o_mega_menu_toggle"),
    wTourUtils.changeOption("MegaMenuLayout", "we-toggler"),
    wTourUtils.changeOption("MegaMenuLayout", '[data-select-label="Cards"]'),
    wTourUtils.clickOnElement("card's text", "iframe header .s_mega_menu_cards font"),
    {
        content: "Enter an URL",
        trigger: "#o_link_dialog_url_input",
        run: "text https://www.odoo.com",
    },
    {
        content: "Check nothing is lost",
        trigger: "iframe header .s_mega_menu_cards a[href='https://www.odoo.com']:has(img):has(h4):has(p font)",
        run: () => {}, // This is a check.
    },
]);

return __exports;
});
;

/**********************************************************
*  Filepath: /website/static/tests/tours/media_dialog.js  *
*  Lines: 102                                             *
**********************************************************/
odoo.define('@website/../tests/tours/media_dialog', ['website.tour_utils'], async function (require) {
'use strict';
let __exports = {};
/** @odoo-module */

const wTourUtils = require('website.tour_utils');

wTourUtils.registerWebsitePreviewTour("website_media_dialog_undraw", {
    test: true,
    url: '/',
    edition: true,
}, [
wTourUtils.dragNDrop({
    id: 's_text_image',
    name: 'Text - Image',
}),
{
    trigger: '.s_text_image img',
    run: "dblclick",
},
{
    trigger: '.o_select_media_dialog:has(.o_we_search_select option[value="media-library"])',
},
]);

wTourUtils.registerWebsitePreviewTour('website_media_dialog_icons', {
    test: true,
    url: '/',
    edition: true,
}, [
    wTourUtils.dragNDrop({
        id: 's_process_steps',
        name: 'Steps',
    }),
    {
        content: "Open MediaDialog from a snippet icon",
        trigger: 'iframe .s_process_steps .fa-unlock-alt',
        run: "dblclick",
    },
    {
        content: "Pick the same icon",
        trigger: '.o_select_media_dialog .o_we_attachment_selected.fa-unlock-alt',
    },
    {
        content: "Check if the icon remains the same",
        trigger: 'iframe .s_process_steps .fa-unlock-alt',
        run: () => null, // it's a check
    },
    {
        content: "Open MediaDialog again",
        trigger: 'iframe .s_process_steps .fa-unlock-alt',
        run: "dblclick",
    },
    {
        content: "Click on the ADD button",
        trigger: '.o_select_media_dialog .btn:contains(Add)',
    },
    {
        content: "Check if the icon remains the same",
        trigger: 'iframe .s_process_steps .fa-unlock-alt',
        run: () => null, // it's a check
    },
    ...wTourUtils.clickOnSave()
]);

wTourUtils.registerWebsitePreviewTour("website_media_dialog_image_shape", {
    test: true,
    url: "/",
    edition: true,
}, [
    wTourUtils.dragNDrop({
        id: "s_text_image",
        name: "Text - Image",
    }),
    {
        content: "Click on the image",
        trigger: "iframe .s_text_image img",
    },
    wTourUtils.changeOption("ImageTools", 'we-select[data-name="shape_img_opt"] we-toggler'),
    wTourUtils.changeOption("ImageTools", "we-button[data-set-img-shape]"),
    {
        content: "Open MediaDialog from an image",
        trigger: "iframe .s_text_image img[data-shape]",
        run: "dblclick",
    },
    {
        content: "Click on the 'Icons' tab",
        trigger: '.o_select_media_dialog .o_notebook_headers .nav-item a:contains("Icons")',
    },
    {
        content: "Select an icon",
        trigger: ".o_select_media_dialog:has(.nav-link.active:contains('Icons')) .tab-content span.fa-heart",
    },
    {
        content: "Checks that the icon doesn't have a shape",
        trigger: "iframe .s_text_image .fa-heart:not([data-shape])",
        run: () => {}, //it's a check
    },
]);

return __exports;
});
;

/***********************************************************
*  Filepath: /website/static/tests/tours/multi_edition.js  *
*  Lines: 42                                               *
***********************************************************/
odoo.define('@website/../tests/tours/multi_edition', ['website.tour_utils'], async function (require) {
'use strict';
let __exports = {};
/** @odoo-module **/

const wTourUtils = require('website.tour_utils');

wTourUtils.registerWebsitePreviewTour('website_multi_edition', {
    test: true,
    url: '/',
    edition: true,
}, [
    {
        content: 'Check the current page has not the elements that will be added',
        trigger: 'iframe body:not(:has(.s_text_image)):not(:has(.s_hr))',
        run: () => null,
    },
    // Edit the main element of the page
    wTourUtils.dragNDrop({
        id: 's_text_image',
        name: 'Text - Image',
    }),
    // Edit another part in the page, like the footer
    wTourUtils.dragNDrop({
        id: 's_hr',
        name: 'Separator',
    }),
    ...wTourUtils.clickOnSave(),
    {
        content: 'Check that the main element of the page was properly saved',
        trigger: 'iframe main .s_text_image',
        run: () => null,
    },
    {
        content: 'Check that the footer was properly saved',
        trigger: 'iframe footer .s_hr',
        run: () => null,
    },
]);

return __exports;
});
;

/**********************************************************
*  Filepath: /website/static/tests/tours/page_manager.js  *
*  Lines: 119                                             *
**********************************************************/
odoo.define('@website/../tests/tours/page_manager', ['website.tour_utils'], async function (require) {
'use strict';
let __exports = {};
/** @odoo-module **/

const wTourUtils = require('website.tour_utils');

// TODO: This part should be moved in a QUnit test
const checkKanbanGroupBy = [{
    content: "Click on Kanban View",
    trigger: '.o_cp_switch_buttons .o_kanban',
}, {
    content: "Click on Group By",
    extra_trigger: '.o_kanban_renderer',
    trigger: '.o_search_options .o_group_by_menu button',
}, {
    content: "Click on Add Custom Group",
    trigger: '.o_search_options .o_add_custom_group_menu button',
    run: function (actions) {
        this.$anchor[0].dispatchEvent(new MouseEvent('mouseenter'));
    },
}, {
    content: "Click on Apply", // Active is selected by default
    trigger: '.o_add_custom_group_menu .dropdown-menu .btn-primary',
}, {
    content: "Click on List View",
    extra_trigger: '.o_kanban_renderer .o_kanban_header',
    trigger: '.o_cp_switch_buttons .o_list',
}, {
    content: "Remove applied Group By",
    extra_trigger: '.o_list_renderer',
    trigger: '.o_cp_searchview .o_facet_remove',
}];

const checkWebsiteFilter = [{
    content: "Click on My Website",
    trigger: "button.dropdown-toggle:contains('My Website')",
}, {
    content: "Select My Website 2",
    trigger: ".dropdown-menu.show > .dropdown-item:contains('My Website 2')",
}, {
    content: "Check that the homepage is now the one of My Website 2",
    trigger: ".o_list_table .o_data_row .o_data_cell[name=name]:contains('Home') " +
             "~ .o_data_cell[name=website_id]:contains('My Website 2')",
    run: () => null, // it's a check
}, {
    content: "Click on My Website 2",
    trigger: "button.dropdown-toggle:contains('My Website 2')",
}, {
    content: "Go back to My Website",
    trigger: ".dropdown-menu.show > .dropdown-item:contains('My Website')",
}, {
    content: "Check that the homepage is now the one of My Website",
    trigger: ".o_list_table .o_data_row .o_data_cell[name=name]:contains('Home') " +
             "~ .o_data_cell[name=website_id]:contains('My Website'):not(:contains('2'))",
    run: () => null, // it's a check
}];

const deleteSelectedPage = [
    {
        content: "Click on Action",
        trigger: '.o_cp_action_menus button',
    },
    {
        content: "Click on Delete",
        trigger: '.o-dropdown--menu span:contains("Delete")',
    },
    {
        content: "Click on I am sure about this",
        trigger: 'main.modal-body input[type="checkbox"]',
        // The loading of the dependencies can take a while and
        // sometimes reach the default 10s timeout
        timeout: 20000,
    },
    {
        content: "Click on OK",
        trigger: '.modal-content footer button.btn-primary:not([disabled])',
    }
];
const homePage = 'tr:contains("Home")';

wTourUtils.registerWebsitePreviewTour('website_page_manager', {
    test: true,
    url: '/',
}, [
    {
        content: "Click on Site",
        trigger: 'button.dropdown-toggle[data-menu-xmlid="website.menu_site"]',
    },
    {
        content: "Click on Pages",
        trigger: 'a.dropdown-item[data-menu-xmlid="website.menu_website_pages_list"]',
    },
    ...checkKanbanGroupBy,
    ...checkWebsiteFilter,
    {
        content: "Click on Home Page",
        trigger: `.o_list_renderer ${homePage} td.o_list_record_selector input[type="checkbox"]`,
    },
    ...deleteSelectedPage,
    {
        content: "Check that the page has been removed",
        trigger: `.o_list_renderer:not(:has(${homePage}))`,
        run: () => null,
    },
    {
        content: "Click on All Pages",
        trigger: '.o_list_renderer thead input[type="checkbox"]',
    },
    ...deleteSelectedPage,
    {
        content: "Check that all pages have been removed",
        trigger: '.o_list_renderer tbody:not(:has([data-id]))',
        run: () => null,
    },
]);

return __exports;
});
;

/******************************************************
*  Filepath: /website/static/tests/tours/parallax.js  *
*  Lines: 52                                          *
******************************************************/
odoo.define("website.tour.parallax", function (require) {
"use strict";

const wTourUtils = require("website.tour_utils");

const coverSnippet = {id: "s_cover", name: "Cover"};

wTourUtils.registerWebsitePreviewTour("test_parallax", {
    test: true,
    url: "/",
    edition: true,
}, [
    wTourUtils.dragNDrop(coverSnippet),
    wTourUtils.clickOnSnippet(coverSnippet),
    wTourUtils.changeOption("BackgroundOptimize", "we-toggler"),
    wTourUtils.changeOption("BackgroundOptimize", 'we-button[data-gl-filter="blur"]'),
{
    content: "Check that the Cover snippet has the Blur filter on its background image",
    trigger: "iframe .s_cover span[data-gl-filter='blur']",
    run: () => {}, //it's a check
},
    wTourUtils.changeOption("Parallax", "we-toggler"),
    wTourUtils.changeOption("Parallax", 'we-button[data-select-data-attribute="0"]'),
{
    content: "Check that the data related to the filter have been transferred to the new target",
    trigger: "iframe .s_cover[data-gl-filter='blur']",
    run: () => {}, //it's a check
},
{
    content: "Check that the 'o_modified_image_to_save' class has been transferred to the new target",
    trigger: "iframe .s_cover.o_modified_image_to_save",
    run: () => {}, //it's a check
},
    wTourUtils.changeOption("Parallax", "we-toggler"),
    wTourUtils.changeOption("Parallax", 'we-button[data-select-data-attribute="1"]'),
{
    content: "Check that the 'o_modified_image_to_save' class has been deleted from the old target",
    trigger: "iframe .s_cover:not(.o_modified_image_to_save)",
    run: () => {}, //it's a check
},
{
    content: "Check that the 'o_modified_image_to_save' class has been transferred to the new target",
    trigger: "iframe span.s_parallax_bg.o_modified_image_to_save",
    run: () => {}, //it's a check
},
{
    content: "Check that the data related to the filter have been transferred to the new target",
    trigger: "iframe span.s_parallax_bg[data-gl-filter='blur']",
    run: () => {}, //it's a check
},
]);
});
;

/****************************************************************
*  Filepath: /website/static/tests/tours/public_user_editor.js  *
*  Lines: 31                                                    *
****************************************************************/
odoo.define('website.tour.public_user_editor_dep_widget', function (require) {
'use strict';

const publicWidget = require('web.public.widget');
const wysiwygLoader = require('web_editor.loader');

publicWidget.registry['public_user_editor_test'] = publicWidget.Widget.extend({
    selector: 'textarea.o_public_user_editor_test_textarea',

    /**
     * @override
     */
    start: async function () {
        await this._super(...arguments);
        await wysiwygLoader.loadFromTextarea(this, this.el, {});
    },
});
});

odoo.define('website.tour.public_user_editor', function (require) {
'use strict';

const { registry } = require("@web/core/registry");

registry.category("web_tour.tours").add('public_user_editor', {
    test: true,
    steps: [{
    trigger: '.note-editable',
    run: function () {}, // Simple check
}]});
});
;

/************************************************************
*  Filepath: /website/static/tests/tours/reset_password.js  *
*  Lines: 30                                                *
************************************************************/
odoo.define('website.tour_reset_password', function (require) {
'use strict';

const { registry } = require("@web/core/registry");
require('web.dom_ready');

registry.category("web_tour.tours").add('website_reset_password', {
    test: true,
    steps: [
    {
        content: "fill new password",
        trigger: '.oe_reset_password_form input[name="password"]',
        run: "text adminadmin"
    },
    {
        content: "fill confirm password",
        trigger: '.oe_reset_password_form input[name="confirm_password"]',
        run: "text adminadmin"
    },
    {
        content: "submit reset password form",
        trigger: '.oe_reset_password_form button[type="submit"]',
    },
    {
        content: "check that we're logged in",
        trigger: '.oe_topbar_name:contains("The King")',
        run: function () {}
    },
]});
});
;

/***************************************************************
*  Filepath: /website/static/tests/tours/restricted_editor.js  *
*  Lines: 12                                                   *
***************************************************************/
odoo.define("website.tour.restricted_editor", function (require) {
"use strict";

var wTourUtils = require("website.tour_utils");

wTourUtils.registerWebsitePreviewTour("restricted_editor", {
    test: true,
    url: "/",
}, [
    ...wTourUtils.clickOnEditAndWaitEditMode(),
]);
});
;

/*************************************************
*  Filepath: /website/static/tests/tours/rte.js  *
*  Lines: 253                                    *
*************************************************/
odoo.define('website.tour.rte', function (require) {
'use strict';

var session = require('web.session');
const wTourUtils = require('website.tour_utils');

var domReady = new Promise(function (resolve) {
    $(resolve);
});
var ready = Promise.all([domReady, session.is_bound]);

wTourUtils.registerWebsitePreviewTour('rte_translator', {
    test: true,
    url: '/',
    wait_for: ready,
}, [{
    content: "click language dropdown",
    trigger: 'iframe .js_language_selector .dropdown-toggle',
}, {
    content: "click on Add a language",
    trigger: 'iframe a.o_add_language',
}, {
    content: "type Parseltongue",
    trigger: 'div[name="lang_ids"] .o_input_dropdown input',
    run: 'text Parseltongue',
}, {
    content: 'select Parseltongue',
    trigger: '.dropdown-item:contains(Parseltongue)',
}, {
    content: "load Parseltongue",
    trigger: '.modal-footer .btn-primary',
    extra_trigger: '.modal-dialog div[name="lang_ids"] .rounded-pill .o_tag_badge_text:contains(Parseltongue)',
}, {
    content: "click language dropdown (2)",
    trigger: 'iframe .js_language_selector .dropdown-toggle',
    timeout: 60000,
}, {
    content: "go to english version",
    trigger: 'iframe .js_language_selector a[data-url_code="en"]',
    extra_trigger: 'iframe html[lang*="pa-GB"]',
}, {
    content: "Open new page menu",
    trigger: ".o_menu_systray .o_new_content_container > a",
    extra_trigger: 'iframe html[lang*="en-US"]',
    consumeVisibleOnly: true,
}, {
    content: "click on new page",
    trigger: '.o_new_content_element a',
}, {
    content: "insert file name",
    trigger: '.modal-dialog input[type="text"]',
    run: 'text rte_translator.xml',
}, {
    content: "create file",
    trigger: '.modal-dialog button.btn-primary',
    extra_trigger: 'input[type="text"]:propValue(rte_translator.xml)',
}, {
    content: "click on the 'page manager' button",
    trigger: 'button[name="website.action_website_pages_list"]',
}, {
    content: "click on the record to display the xml file in the iframe",
    trigger: 'td:contains("rte_translator.xml")',
}, {
    content: "Open new page menu",
    trigger: ".o_menu_systray .o_new_content_container > a",
    consumeVisibleOnly: true,
}, {
    content: "click on new page",
    trigger: '.o_new_content_element a',
}, {
    content: "insert page name",
    trigger: '.modal-dialog input[type="text"]',
    run: 'text rte_translator',
}, {
    content: "create page",
    trigger: '.modal-dialog button.btn-primary',
    extra_trigger: 'input[type="text"]:propValue(rte_translator)',
}, {
    content: "drop a snippet",
    trigger: "#snippet_structure .oe_snippet:eq(1) .oe_snippet_thumbnail",
    run: 'drag_and_drop iframe #wrap',
}, {
    content: "change content",
    trigger: 'iframe #wrap',
    run: function () {
        $('iframe:not(.o_ignore_in_tour)').contents().find("#wrap p:first").replaceWith('<p>Write one or <font style="background-color: yellow;">two paragraphs <b>describing</b></font> your product or\
                <font style="color: rgb(255, 0, 0);">services</font>. To be successful your content needs to be\
                useful to your <a href="/999">readers</a>.</p> <input value="test translate default value" placeholder="test translate placeholder"/>\
                <p>&lt;b&gt;&lt;/b&gt; is an HTML&nbsp;tag &amp; is empty</p>');
        $('iframe:not(.o_ignore_in_tour)').contents().find("#wrap img").attr("title", "test translate image title");
    }
}, {
    content: "save",
    trigger: 'button[data-action=save]',
    extra_trigger: 'iframe #wrap p:first b',
}, {
    content: "click language dropdown (3)",
    trigger: 'iframe .js_language_selector .dropdown-toggle',
    extra_trigger: 'iframe body:not(.editor_enable)',
}, {
    content: "click on Parseltongue version",
    trigger: 'iframe .js_language_selector a[data-url_code="pa_GB"]',
    extra_trigger: 'iframe html[lang*="en"]',
}, {
    content: "translate",
    trigger: '.o_menu_systray .o_translate_website_container > a',
    extra_trigger: 'iframe html:not(:has(#wrap p span))',
}, {
    content: "close modal",
    trigger: '.modal-footer .btn-secondary',
}, {
    content: "check if translation is activate",
    trigger: 'iframe [data-oe-translation-initial-sha]',
}, {
    content: "translate text",
    extra_trigger: '#oe_snippets.o_loaded',
    trigger: 'iframe #wrap p font:first',
    run: function (actionHelper) {
        actionHelper.text('translated Parseltongue text');
        const Wysiwyg = odoo.__DEBUG__.services['web_editor.wysiwyg'];
        Wysiwyg.setRange(this.$anchor.contents()[0], 22);
        this.$anchor.trigger($.Event("keyup", {key: '_', keyCode: 95}));
        this.$anchor.trigger('input');
    },
}, {
    content: "translate text with special char",
    trigger: 'iframe #wrap input + p span:first',
    run: function (actionHelper) {
        actionHelper.click();
        this.$anchor.prepend('&lt;{translated}&gt;');
        const Wysiwyg = odoo.__DEBUG__.services['web_editor.wysiwyg'];
        Wysiwyg.setRange(this.$anchor.contents()[0], 0);
        this.$anchor.trigger($.Event("keyup", {key: '_', keyCode: 95}));
        this.$anchor.trigger('input');
    },
}, {
    content: "click on input",
    trigger: 'iframe #wrap input:first',
    extra_trigger: 'iframe #wrap .o_dirty font:first:contains(translated Parseltongue text)',
    run: 'click',
}, {
    content: "translate placeholder",
    trigger: '.modal-dialog input:first',
    run: 'text test Parseltongue placeholder',
}, {
    content: "translate default value",
    trigger: '.modal-dialog input:last',
    run: 'text test Parseltongue default value',
}, {
    content: "close modal",
    trigger: '.modal-footer .btn-primary',
    extra_trigger: '.modal input:propValue(test Parseltongue placeholder)',
}, {
    content: "check: input marked as translated",
    trigger: 'iframe input[placeholder="test Parseltongue placeholder"].oe_translated',
    run: () => {},
}, {
    content: "save translation",
    trigger: 'button[data-action=save]',
}, {
    content: "check: content is translated",
    trigger: 'iframe #wrap p font:first:contains(translated Parseltongue text)',
    extra_trigger: 'iframe body:not(.editor_enable)',
    run: function () {}, // it's a check
}, {
    content: "check: content with special char is translated",
    trigger: "iframe #wrap input + p:contains(<{translated}><b></b> is an HTML\xa0tag & )",
    run: function () {}, // it's a check

}, {
    content: "check: placeholder translation",
    trigger: 'iframe input[placeholder="test Parseltongue placeholder"]',
    run: function () {}, // it's a check
}, {
    content: "check: default value translation",
    trigger: 'iframe input[value="test Parseltongue default value"]',
    run: () => {},
}, {
    content: "open language selector",
    trigger: 'iframe .js_language_selector button:first',
    extra_trigger: 'iframe html[lang*="pa-GB"]:not(:has(#wrap p span))',
}, {
    content: "return to english version",
    trigger: 'iframe .js_language_selector a[data-url_code="en"]',
}, {
    content: "edit english version",
    trigger: '.o_edit_website_container > a',
    extra_trigger: 'iframe body:not(:has(#wrap p font:first:containsExact(paragraphs <b>describing</b>)))',
}, {
    content: "select text",
    extra_trigger: '#oe_snippets.o_loaded',
    trigger: 'iframe #wrap p',
    run: function (actionHelper) {
        actionHelper.click();
        var el = this.$anchor[0];
        var mousedown = document.createEvent('MouseEvents');
        mousedown.initMouseEvent('mousedown', true, true, window, 0, 0, 0, 0, 0, false, false, false, false, 0, el);
        el.dispatchEvent(mousedown);
        var mouseup = document.createEvent('MouseEvents');
        const Wysiwyg = odoo.__DEBUG__.services['web_editor.wysiwyg'];
        Wysiwyg.setRange(el.childNodes[2], 6, el.childNodes[2], 13);
        mouseup.initMouseEvent('mouseup', true, true, window, 0, 0, 0, 0, 0, false, false, false, false, 0, el);
        el.dispatchEvent(mouseup);
    },
// This is disabled for now because it reveals a bug that is fixed in saas-15.1
// and considered a tradeoff in 15.0. The bug concerns the invalidation of
// translations when inserting tags with more than one character. Whereas <u>
// didn't trigger an invalidation, <span style="text-decoration-line: underline;">
// does.
// }, {
//     content: "underline",
//     trigger: '.oe-toolbar #underline',
}, {
    content: "save new change",
    trigger: 'button[data-action=save]',
    // See comment above.
    // extra_trigger: '#wrap.o_dirty p span[style*="text-decoration-line: underline;"]',
}, {
    content: "click language dropdown (4)",
    trigger: 'iframe .js_language_selector .dropdown-toggle',
    extra_trigger: 'iframe body:not(.editor_enable)',
}, {
    content: "return in Parseltongue",
    trigger: 'iframe html[lang="en-US"] .js_language_selector .js_change_lang[data-url_code="pa_GB"]',
}, {
    content: "check bis: content is translated",
    trigger: 'iframe #wrap p font:first:contains(translated Parseltongue text)',
    extra_trigger: 'iframe html[lang*="pa-GB"]',
}, {
    content: "check bis: placeholder translation",
    trigger: 'iframe input[placeholder="test Parseltongue placeholder"]',
}, {
    content: "open site menu",
    trigger: 'button[data-menu-xmlid="website.menu_site"]',
}, {
    content: "Open HTML editor",
    trigger: 'a[data-menu-xmlid="website.menu_ace_editor"]',
}, {
    content: "Check that the editor is not showing translated content (1)",
    trigger: '.ace_text-layer .ace_line:contains("an HTML")',
    run: function (actions) {
        var lineEscapedText = $(this.$anchor.text()).last().text();
        if (lineEscapedText !== "&lt;b&gt;&lt;/b&gt; is an HTML&nbsp;tag &amp; is empty") {
            console.error('The HTML editor should display the correct untranslated content');
            $('iframe:not(.o_ignore_in_tour)').contents().find('body').addClass('rte_translator_error');
        }
    },
}, {
    content: "Check that the editor is not showing translated content (2)",
    trigger: 'iframe body:not(.rte_translator_error)',
    run: function () {},
}]);
});
;

/************************************************************************
*  Filepath: /website/static/tests/tours/snippet_background_edition.js  *
*  Lines: 373                                                           *
************************************************************************/
odoo.define('@website/../tests/tours/snippet_background_edition', ['web_editor.utils', 'website.tour_utils'], async function (require) {
'use strict';
let __exports = {};
/** @odoo-module */

const weUtils = require('web_editor.utils');
const wTourUtils = require('website.tour_utils');

const snippets = [
    {
        id: 's_text_image',
        name: 'Text - Image',
    },
];
const gradients = [
    'linear-gradient(135deg, rgb(203, 94, 238) 0%, rgb(75, 225, 236) 100%)',
    'linear-gradient(135deg, rgb(255, 222, 202) 0%, rgb(202, 115, 69) 100%)',
];

function typeToName(xType) {
    return xType === 'cc' ? 'color combinations' : xType === 'bg' ? 'background colors' : 'gradients';
}

function switchTo(type, _name) {
    const target = type === 'cc' ? 'color-combinations' : type === 'bg' ? 'custom-colors' : 'gradients';
    const name = _name || typeToName(type);
    return {
        trigger: `.o_we_colorpicker_switch_pane_btn[data-target="${target}"]`,
        content: `Switch to ${name}`,
    };
}

function addCheck(steps, checkX, checkNoX, xType, noSwitch = false) {
    if (!checkX && !checkNoX) {
        return;
    }

    const name = typeToName(xType);
    const selectorCheckX = checkX && `.o_we_color_btn[data-color="${checkX}"].selected`;
    const selectorCheckNoX = checkNoX && `.o_we_color_btn[data-color="${checkNoX}"]:not(.selected)`;
    const step = {
        trigger: selectorCheckX || selectorCheckNoX,
        content: `The correct ${name} is marked as selected`,
        position: 'bottom',
        run: () => null,
    };
    if (!selectorCheckX && selectorCheckNoX) {
        step.extra_trigger = selectorCheckNoX;
    }

    if (!noSwitch) {
        steps.push(switchTo(xType, name));
    }
    steps.push(step);
}

function checkAndUpdateBackgroundColor({
    checkCC, checkNoCC,
    checkBg, checkNoBg,
    checkGradient, checkNoGradient,
    changeType, change,
    finalSelector, finalRun
}) {
    const steps = [
        wTourUtils.changeBackgroundColor(),
    ];

    addCheck(steps, checkCC, checkNoCC, 'cc', true);
    addCheck(steps, checkBg, checkNoBg, 'bg');
    addCheck(steps, checkGradient, checkNoGradient, 'gradient');

    if (changeType) {
        steps.push(switchTo(changeType));
        steps.push(wTourUtils.changeOption('ColoredLevelBackground', `.o_we_color_btn[data-color="${change}"]`, 'background color', 'top', true));
        steps.push({
            trigger: finalSelector,
            content: "The selected colors have been applied (CC AND (BG or GRADIENT))",
            position: 'bottom',
            run: finalRun,
        });
    }

    return steps;
}

function updateAndCheckCustomGradient({updateStep, checkGradient}) {
    const steps = [updateStep, {
        trigger: `iframe #wrapwrap section.${snippets[0].id}.o_cc1`,
        content: 'Color combination 1 still selected',
        run: () => null,
    }];
    addCheck(steps, checkGradient, checkGradient !== gradients[0] && gradients[0], 'gradient', true);
    return steps;
}

wTourUtils.registerWebsitePreviewTour('snippet_background_edition', {
    url: '/',
    edition: true,
    test: true,
},
[
wTourUtils.dragNDrop(snippets[0]),
wTourUtils.clickOnSnippet(snippets[0]),

// Add a color combination
...checkAndUpdateBackgroundColor({
    changeType: 'cc',
    change: 3,
    finalSelector: `iframe .${snippets[0].id}.o_cc.o_cc3:not([class*=bg-]):not([style*="background"])`,
}),

// Change the color combination + Check the previous one was marked as selected
...checkAndUpdateBackgroundColor({
    checkCC: 3,
    changeType: 'cc',
    change: 2,
    finalSelector: `iframe .${snippets[0].id}.o_cc.o_cc2:not(.o_cc3):not([class*=bg-])`,
}),

// Check the color combination was marked as selected + Edit the bg color
...checkAndUpdateBackgroundColor({
    checkCC: 2,
    checkNoCC: 3,
    changeType: 'bg',
    change: 'black-50',
    finalSelector: `iframe .${snippets[0].id}.o_cc.o_cc2.bg-black-50`,
}),

// Check the current color palette selection + Change the bg color
...checkAndUpdateBackgroundColor({
    checkCC: 2,
    checkBg: 'black-50',
    changeType: 'bg',
    change: '800',
    finalSelector: `iframe .${snippets[0].id}.o_cc.o_cc2.bg-800:not(.bg-black-50)`,
}),

// Check the current color palette selection + Change the color combination
// again. It should keep the bg color class.
...checkAndUpdateBackgroundColor({
    checkCC: 2,
    checkBg: '800',
    checkNoBg: 'black-50',
    changeType: 'cc',
    change: 4,
    finalSelector: `iframe .${snippets[0].id}.o_cc.o_cc4:not(.o_cc2).bg-800`,
}),

// Check the current color palette status + Replace the bg color by a gradient
...checkAndUpdateBackgroundColor({
    checkCC: 4,
    checkNoCC: 2,
    checkBg: '800',
    changeType: 'gradient',
    change: gradients[0],
    finalSelector: `iframe .${snippets[0].id}.o_cc.o_cc4:not(.bg-800)[style*="background-image: ${gradients[0]}"]`,
}),

// Check the current color palette status + Replace the gradient
...checkAndUpdateBackgroundColor({
    checkCC: 4,
    checkNoBg: '800',
    checkGradient: gradients[0],
    changeType: 'gradient',
    change: gradients[1],
    finalSelector: `iframe .${snippets[0].id}.o_cc.o_cc4[style*="background-image: ${gradients[1]}"]:not([style*="background-image: ${gradients[0]}"])`,
}),

// Check the current color palette selection + Change the color combination
// again. It should keep the gradient.
...checkAndUpdateBackgroundColor({
    checkCC: 4,
    checkGradient: gradients[1],
    checkNoGradient: gradients[0],
    changeType: 'cc',
    change: 1,
    finalSelector: `iframe .${snippets[0].id}.o_cc.o_cc1:not(.o_cc4)[style*="background-image: ${gradients[1]}"]`,
}),

// Final check of the color status in the color palette
...checkAndUpdateBackgroundColor({
    checkCC: 1,
    checkNoCC: 4,
    checkGradient: gradients[1],
}),

// Now, add an image on top of that color combination + gradient
{
    // Close the palette before selecting a media.
    trigger: '.snippet-option-ColoredLevelBackground we-title',
    content: 'Close palette',
},
wTourUtils.changeOption('ColoredLevelBackground', '[data-name="bg_image_toggle_opt"]'),
{
    trigger: '.o_existing_attachment_cell img',
    content: "Select an image in the media dialog",
},
{
    trigger: `iframe .${snippets[0].id}.o_cc.o_cc1`,
    run: function () {
        const parts = weUtils.backgroundImageCssToParts(this.$anchor.css('background-image'));
        if (!parts.url || !parts.url.startsWith('url(')) {
            console.error('An image should have been added as background.');
        }
        if (parts.gradient !== gradients[1]) {
            console.error('The gradient should have been kept when adding the background image');
        }
    },
},

// Replace the gradient while there is a background-image
...checkAndUpdateBackgroundColor({
    checkCC: 1,
    checkGradient: gradients[1],
    changeType: 'gradient',
    change: gradients[0],
    finalSelector: `iframe .${snippets[0].id}.o_cc.o_cc1:not([style*="${gradients[1]}"])`,
    finalRun: function () {
        const parts = weUtils.backgroundImageCssToParts(this.$anchor.css('background-image'));
        if (!parts.url || !parts.url.startsWith('url(')) {
            console.error('The image should have been kept when changing the gradient');
        }
        if (parts.gradient !== gradients[0]) {
            console.error('The gradient should have been changed');
        }
    },
}),

// Customize gradient
wTourUtils.changeBackgroundColor(),
switchTo('gradient'),
// Avoid navigating across tabs to maintain current editor state
// Step colors
...updateAndCheckCustomGradient({
    updateStep: {
        trigger: '.colorpicker .o_custom_gradient_scale',
        content: 'Add step',
        run: 'click',
    },
    checkGradient: 'linear-gradient(135deg, rgb(203, 94, 238) 0%, rgb(203, 94, 238) 0%, rgb(75, 225, 236) 100%)',
}),
...updateAndCheckCustomGradient({
    updateStep: {
        trigger: '.colorpicker .o_slider_multi input.active',
        content: 'Move step',
        run: () => {
            const slider = $('.colorpicker .o_slider_multi input.active');
            slider.val(45);
            slider.trigger('click');
        },
    },
    checkGradient: 'linear-gradient(135deg, rgb(203, 94, 238) 0%, rgb(203, 94, 238) 45%, rgb(75, 225, 236) 100%)',
}),
...updateAndCheckCustomGradient({
    updateStep: {
        trigger: '.colorpicker .o_color_picker_inputs .o_hex_div input',
        content: 'Pick step color',
        run: 'text #FF0000',
    },
    checkGradient: 'linear-gradient(135deg, rgb(203, 94, 238) 0%, rgb(255, 0, 0) 45%, rgb(75, 225, 236) 100%)',
}),
...updateAndCheckCustomGradient({
    updateStep: {
        trigger: '.colorpicker .o_remove_color',
        content: 'Delete step',
        run: 'click',
    },
    checkGradient: 'linear-gradient(135deg, rgb(203, 94, 238) 0%, rgb(75, 225, 236) 100%)',
}),
// Linear
...updateAndCheckCustomGradient({
    updateStep: {
        trigger: '.colorpicker input[data-name="angle"]',
        content: 'Change angle',
        run: 'text_blur 50',
    },
    checkGradient: 'linear-gradient(50deg, rgb(203, 94, 238) 0%, rgb(75, 225, 236) 100%)',
}),
// Radial
...updateAndCheckCustomGradient({
    updateStep: {
        trigger: '.colorpicker we-button[data-gradient-type="radial-gradient"]',
        content: 'Switch to Radial',
        run: 'click',
    },
    checkGradient: 'radial-gradient(circle farthest-side at 25% 25%, rgb(203, 94, 238) 0%, rgb(75, 225, 236) 100%)',
}),
...updateAndCheckCustomGradient({
    updateStep: {
        trigger: '.colorpicker input[data-name="positionX"]',
        content: 'Change X position',
        run: 'text_blur 33',
    },
    checkGradient: 'radial-gradient(circle farthest-side at 33% 25%, rgb(203, 94, 238) 0%, rgb(75, 225, 236) 100%)',
}),
...updateAndCheckCustomGradient({
    updateStep: {
        trigger: '.colorpicker input[data-name="positionY"]',
        content: 'Change Y position',
        run: 'text_blur 75',
    },
    checkGradient: 'radial-gradient(circle farthest-side at 33% 75%, rgb(203, 94, 238) 0%, rgb(75, 225, 236) 100%)',
}),
...updateAndCheckCustomGradient({
    updateStep: {
        trigger: '.colorpicker we-button[data-gradient-size="closest-side"]',
        content: 'Change color spread size',
        run: 'click',
    },
    checkGradient: 'radial-gradient(circle closest-side at 33% 75%, rgb(203, 94, 238) 0%, rgb(75, 225, 236) 100%)',
}),
// Revert to predefined gradient
{
    trigger: `.o_we_color_btn[data-color="${gradients[0]}"]`,
    content: `Revert to predefiend gradient ${gradients[0]}`,
    run: 'click',
},

// Replace the gradient by a bg color
...checkAndUpdateBackgroundColor({
    checkCC: 1,
    checkGradient: gradients[0],
    checkNoGradient: gradients[1],
    changeType: 'bg',
    change: 'black-75',
    finalSelector: `iframe .${snippets[0].id}.o_cc.o_cc1.bg-black-75[style^="background-image: url("]:not([style*="${gradients[0]}"])`
}),

// Re-add a gradient
...checkAndUpdateBackgroundColor({
    checkCC: 1,
    checkBg: 'black-75',
    checkNoGradient: gradients[0],
    changeType: 'gradient',
    change: gradients[1],
    finalSelector: `iframe .${snippets[0].id}.o_cc.o_cc1:not(.bg-black-75)`,
    finalRun: function () {
        const parts = weUtils.backgroundImageCssToParts(this.$anchor.css('background-image'));
        if (!parts.url || !parts.url.startsWith('url(')) {
            console.error('The image should have been kept when re-adding the gradient');
        }
        if (parts.gradient !== gradients[1]) {
            console.error('The gradient should have been re-added');
        }
    },
}),

// Final check of color selection and removing the image
...checkAndUpdateBackgroundColor({
    checkCC: 1,
    checkNoBg: 'black-75',
    checkGradient: gradients[1],
}),
wTourUtils.changeOption('ColoredLevelBackground', '[data-name="bg_image_toggle_opt"]', 'image toggle', 'top', true),
{
    trigger: `iframe .${snippets[0].id}.o_cc.o_cc1[style*="background-image: ${gradients[1]}"]`,
    run: () => null,
},

// Now removing all colors via the 'None' button (note: colorpicker still opened)
{
    trigger: '.o_colorpicker_reset',
    content: "Click on the None button of the color palette",
},
{
    trigger: `iframe .${snippets[0].id}:not(.o_cc):not(.o_cc1):not([style*="background-image"])`,
    content: "All color classes and properties should have been removed",
    run: () => null,
}
]);

return __exports;
});
;

/***************************************************************************
*  Filepath: /website/static/tests/tours/snippet_cache_across_websites.js  *
*  Lines: 47                                                               *
***************************************************************************/
odoo.define('@website/../tests/tours/snippet_cache_across_websites', ['website.tour_utils'], async function (require) {
'use strict';
let __exports = {};
/** @odoo-module **/

const wTourUtils = require('website.tour_utils');

wTourUtils.registerWebsitePreviewTour('snippet_cache_across_websites', {
    edition: true,
    test: true,
    url: '/@/'
}, [
    {
        content: "Check that the custom snippet is displayed",
        trigger: '#snippet_custom_body span:contains("custom_snippet_test")',
        run: () => null,
    },
    // There's no need to save, but canceling might or might not show a popup...
    ...wTourUtils.clickOnSave(),
    {
        content: "Click on the website switch to switch to website 2",
        trigger: '.o_website_switcher_container button',
    },
    {
        content: "Switch to website 2",
        // Ensure data-website-id exists
        extra_trigger: 'iframe html[data-website-id="1"]',
        trigger: '.o_website_switcher_container .dropdown-item:contains("My Website 2")'
    },
    {
        content: "Wait for the iframe to be loaded",
        // The page reload generates assets for website 2, it may take some time
        timeout: 20000,
        trigger: 'iframe html:not([data-website-id="1"])',
        run: () => null,
    },
    ...wTourUtils.clickOnEditAndWaitEditMode(),
    {
        content: "Check that the custom snippet is not here",
        extra_trigger: '#oe_snippets:not(:has(#snippet_custom_body span:contains("custom_snippet_test")))',
        trigger: '#oe_snippets:has(#snippet_custom.d-none)',
        run: () => null,
    },
]);

return __exports;
});
;

/***************************************************************
*  Filepath: /website/static/tests/tours/snippet_countdown.js  *
*  Lines: 62                                                   *
***************************************************************/
odoo.define('@website/../tests/tours/snippet_countdown', ['website.tour_utils'], async function (require) {
'use strict';
let __exports = {};
/** @odoo-module */

const wTourUtils = require('website.tour_utils');

wTourUtils.registerWebsitePreviewTour('snippet_countdown', {
    test: true,
    url: '/',
    edition: true,
}, [
    wTourUtils.dragNDrop({id: 's_countdown', name: 'Countdown'}),
    wTourUtils.clickOnSnippet({id: 's_countdown', name: 'Countdown'}),
    wTourUtils.changeOption('countdown', 'we-select:has([data-end-action]) we-toggler', 'end action'),
    wTourUtils.changeOption('countdown', 'we-button[data-end-action="message"]', 'end action'),
    wTourUtils.changeOption('countdown', 'we-button.toggle-edit-message', 'message preview'),
    // The next two steps check that the end message does not disappear when a
    // widgets_start_request is triggered.
    {
        content: "Hover an option which has a preview",
        trigger: '[data-select-class="o_half_screen_height"]',
        run: function (actions) {
            this.$anchor.trigger('mouseover');
            this.$anchor.trigger('mouseenter');
        },
    },
    {
        content: "Check that the countdown message is still displayed",
        trigger: 'iframe .s_countdown .s_picture',
        run: () => {
            // Just a visibility check

            // Also make sure the mouseout and mouseleave are triggered so that
            // next steps make sense.
            // TODO the next steps are not actually testing anything without
            // it and the mouseout and mouseleave make sense but really it
            // should not be *necessary* to simulate those for the editor flow
            // to make some sense.
            const $previousAnchor = $('[data-select-class="o_half_screen_height"]');
            $previousAnchor.trigger('mouseout');
            $previousAnchor.trigger('mouseleave');
        },
    },
    // Next, we change the end action to message and no countdown while the edit
    // message toggle is still activated. It should hide the countdown
    wTourUtils.changeOption('countdown', 'we-select:has([data-end-action]) we-toggler', 'end action'),
    wTourUtils.changeOption('countdown', 'we-button[data-end-action="message_no_countdown"]', 'end action'),
    {
        content: "Check that the countdown is not displayed",
        trigger: 'iframe .s_countdown:has(.s_countdown_canvas_wrapper:not(:visible))',
        run: () => null, // Just a visibility check
    },
    {
        content: "Check that the message is still displayed",
        trigger: 'iframe .s_countdown .s_picture',
        run: () => null, // Just a visibility check
    },
]);

return __exports;
});
;

/**************************************************************************
*  Filepath: /website/static/tests/tours/snippet_editor_panel_options.js  *
*  Lines: 194                                                             *
**************************************************************************/
odoo.define('@website/../tests/tours/snippet_editor_panel_options', ['website.tour_utils'], async function (require) {
'use strict';
let __exports = {};
/** @odoo-module */

const wTourUtils = require('website.tour_utils');

wTourUtils.registerWebsitePreviewTour('snippet_editor_panel_options', {
    test: true,
    url: '/',
    edition: true,
}, [
wTourUtils.dragNDrop({
    id: 's_text_image',
    name: 'Text - Image',
}),
// Test keeping the text selection when using the width option.
{
    content: "Click on the first paragraph.",
    trigger: 'iframe .s_text_image p',
}, {
    content: "The text toolbar should be visible. The paragraph should be selected.",
    trigger: '#oe_snippets .o_we_customize_panel > #o_we_editor_toolbar_container',
    run() {
        const iframeDocument = document.querySelector('.o_iframe').contentDocument;
        const pText = iframeDocument.querySelector('.s_text_image p').textContent;
        const selection = iframeDocument.getSelection().toString();
        if (pText !== selection) {
            console.error("The paragraph was not correctly selected.");
        }
    },
}, {
    content: "Click on the width option.",
    trigger: '[data-select-class="o_container_small"]',
}, {
    content: "The snippet should have the correct class.",
    trigger: 'iframe .s_text_image > .o_container_small',
    run: () => {}, // It's a check.
}, {
    content: "The text toolbar should still be visible, and the text still selected.",
    trigger: '#oe_snippets .o_we_customize_panel > #o_we_editor_toolbar_container',
    run() {
        const iframeDocument = document.querySelector('.o_iframe').contentDocument;
        const pText = iframeDocument.querySelector('.s_text_image p').textContent;
        const selection = iframeDocument.getSelection().toString();
        if (pText !== selection) {
            console.error("The paragraph text selection was lost.");
        }
    },
},
// Test the anchor option.
{
    content: "Click on the anchor option",
    trigger: '#oe_snippets .snippet-option-anchor we-button',
    run() {
        // The clipboard cannot be accessed from a script.
        // https://w3c.github.io/editing/docs/execCommand/#dfn-the-copy-command
        // The execCommand is patched for that step so that ClipboardJS still
        // sends the 'success' event.
        const oldExecCommand = document.execCommand;
        document.execCommand = () => true;
        this.$anchor[0].click();
        document.execCommand = oldExecCommand;
    }
}, {
    content: "Check the copied url from the notification toast",
    trigger: '.o_notification_manager .o_notification_content',
    run() {
        const { textContent } = this.$anchor[0];
        const url = textContent.substring(textContent.indexOf('/'));

        // The url should not target the client action
        if (url.startsWith('/@')) {
            console.error('The anchor option should target the frontend');
        }

        const iframeDocument = document.querySelector('.o_iframe').contentDocument;
        const snippetId = iframeDocument.querySelector('.s_text_image').id;
        if (!url || url.indexOf(snippetId) < 0) {
            console.error('The anchor option does not target the correct snippet.');
        }
    },
},
// Test keeping the text selection when adding columns to a snippet with none.
wTourUtils.goBackToBlocks(),
wTourUtils.dragNDrop({
    id: 's_text_block',
    name: 'Text',
}),
{
    content: "Click on the first paragraph.",
    trigger: 'iframe .s_text_block p',
}, {
    content: "The text toolbar should be visible. The paragraph should be selected.",
    trigger: '#oe_snippets .o_we_customize_panel > #o_we_editor_toolbar_container',
    run() {
        const iframeDocument = document.querySelector('.o_iframe').contentDocument;
        const pText = iframeDocument.querySelector('.s_text_block p').textContent;
        const selection = iframeDocument.getSelection().toString();
        if (pText !== selection) {
            console.error("The paragraph was not correctly selected.");
        }
    },
}, {
    content: "Click on the columns option.",
    trigger: '.snippet-option-layout_column we-select',
},
{
    content: "Change the number of columns.",
    trigger: '.snippet-option-layout_column [data-select-count="3"]',
}, {
    content: "The snippet should have the correct number of columns.",
    trigger: 'iframe .s_text_block .container > .row',
    run() {
        if (this.$anchor[0].childElementCount !== 3) {
            console.error("The snippet does not have the correct number of columns");
        }
    },
}, {
    content: "The text toolbar should still be visible, and the text still selected.",
    trigger: '#oe_snippets .o_we_customize_panel > #o_we_editor_toolbar_container',
    run() {
        const iframeDocument = document.querySelector('.o_iframe').contentDocument;
        const pText = iframeDocument.querySelector('.s_text_block p').textContent;
        const selection = iframeDocument.getSelection().toString();
        if (pText !== selection) {
            console.error("The paragraph text selection was lost.");
        }
    },
},
// Test keeping the text selection when removing all columns of a snippet.
{
    content: "Click on the columns option.",
    trigger: '.snippet-option-layout_column we-select',
},
{
    content: "Change the number of columns.",
    trigger: '.snippet-option-layout_column [data-select-count="0"]',
}, {
    content: "The snippet should have the correct number of columns.",
    trigger: 'iframe .s_text_block .container:not(:has(.row))',
}, {
    content: "The text toolbar should still be visible, and the text still selected.",
    trigger: '#oe_snippets .o_we_customize_panel > #o_we_editor_toolbar_container',
    run() {
        const iframeDocument = document.querySelector('.o_iframe').contentDocument;
        const pText = iframeDocument.querySelector('.s_text_block p').textContent;
        const selection = iframeDocument.getSelection().toString();
        if (pText !== selection) {
            console.error("The paragraph text selection was lost.");
        }
    },
},
// Test keeping the text selection when toggling the grid mode.
wTourUtils.changeOption("layout_column", 'we-button[data-name="grid_mode"]'),
{
    content: "The snippet row should have the grid mode class.",
    trigger: "iframe .s_text_block .row.o_grid_mode",
    run: () => {}, // It's a check.
}, {
    content: "The text toolbar should still be visible, and the text still selected.",
    trigger: "#oe_snippets .o_we_customize_panel > #o_we_editor_toolbar_container",
    run() {
        const iframeDocument = document.querySelector(".o_iframe").contentDocument;
        const pText = iframeDocument.querySelector(".s_text_block p").textContent;
        const selection = iframeDocument.getSelection().toString();
        if (pText !== selection) {
            console.error("The paragraph text selection was lost.");
        }
    },
},
// Test keeping the text selection when toggling back the normal mode.
wTourUtils.changeOption("layout_column", 'we-button[data-name="normal_mode"]'),
{
    content: "The snippet row should not have the grid mode class anymore.",
    trigger: "iframe .s_text_block .row:not(.o_grid_mode)",
    run: () => {}, // It's a check.
}, {
    content: "The text toolbar should still be visible, and the text still selected.",
    trigger: "#oe_snippets .o_we_customize_panel > #o_we_editor_toolbar_container",
    run() {
        const iframeDocument = document.querySelector(".o_iframe").contentDocument;
        const pText = iframeDocument.querySelector(".s_text_block p").textContent;
        const selection = iframeDocument.getSelection().toString();
        if (pText !== selection) {
            console.error("The paragraph text selection was lost.");
        }
    },
},
...wTourUtils.clickOnSave(),
]);

return __exports;
});
;

/*****************************************************************************
*  Filepath: /website/static/tests/tours/snippet_empty_parent_autoremove.js  *
*  Lines: 69                                                                 *
*****************************************************************************/
odoo.define("website.tour.snippet_empty_parent_autoremove", function (require) {
"use strict";

const wTourUtils = require('website.tour_utils');

function removeSelectedBlock() {
    return {
        content: "Remove selected block",
        trigger: '#oe_snippets we-customizeblock-options:nth-last-child(3) .oe_snippet_remove',
    };
}

wTourUtils.registerWebsitePreviewTour('snippet_empty_parent_autoremove', {
    test: true,
    url: '/',
    edition: true,
}, [
    // Base case: remove both columns from text - image
    wTourUtils.dragNDrop({
        id: 's_text_image',
        name: 'Text - Image',
    }),
    {
        content: "Click on second column",
        trigger: 'iframe #wrap .s_text_image .row > :nth-child(2)',
    },
    removeSelectedBlock(),
    {
        content: "Click on first column",
        trigger: 'iframe #wrap .s_text_image .row > :first-child',
    },
    removeSelectedBlock(),
    {
        content: "Check that #wrap is empty",
        trigger: 'iframe #wrap:empty',
    },

    // Banner: test that parallax, bg-filter and shape are not treated as content
    wTourUtils.dragNDrop({
        id: 's_banner',
        name: 'Banner',
    }),
    wTourUtils.clickOnSnippet({
        id: 's_banner',
        name: 'Banner',
    }),
    {
        content: "Check that parallax is present",
        trigger: 'iframe #wrap .s_banner .s_parallax_bg',
        run: () => null,
    },
    wTourUtils.changeOption('ColoredLevelBackground', 'Shape'),
    {
        content: "Check that shape is present",
        trigger: 'iframe #wrap .s_banner .o_we_shape',
        run: () => null,
    },
    {
        content: "Click on first column",
        trigger: 'iframe #wrap .s_banner .row > :first-child',
    },
    removeSelectedBlock(),
    {
        content: "Check that #wrap is empty",
        trigger: 'iframe #wrap:empty',
        run: () => null,
    },
]);
});
;

/*******************************************************************
*  Filepath: /website/static/tests/tours/snippet_image_gallery.js  *
*  Lines: 69                                                       *
*******************************************************************/
odoo.define('@website/../tests/tours/snippet_image_gallery', ['website.tour_utils'], async function (require) {
'use strict';
let __exports = {};
/** @odoo-module */

const wTourUtils = require('website.tour_utils');

wTourUtils.registerWebsitePreviewTour('snippet_image_gallery', {
    test: true,
    url: '/',
    edition: true,
}, [
    wTourUtils.dragNDrop({id: 's_image_gallery', name: 'Images Wall'}),
    ...wTourUtils.clickOnSave(),
    {
        content: 'Click on an image of the Image Wall',
        trigger: 'iframe .s_image_gallery img',
        run: 'click',
    },
    {
        content: 'Check that the modal has opened properly',
        trigger: 'iframe .s_gallery_lightbox img',
        run: () => {}, // This is a check.
    },
]);

wTourUtils.registerWebsitePreviewTour("snippet_image_gallery_remove", {
    test: true,
    url: "/",
    edition: true,
}, [
    wTourUtils.dragNDrop({
        id: "s_image_gallery",
        name: "Image Gallery",
}), wTourUtils.clickOnSnippet({
    id: 's_image_gallery',
    name: 'Image Gallery',
}), {
    content: "Click on Remove all",
    trigger: "we-button:has(div:contains('Remove all'))",
}, {
    content: "Click on Add Images",
    trigger: "iframe span:contains('Add Images')",
}, {
    content: "Click on the first new image",
    trigger: ".o_select_media_dialog img[title='s_default_image.jpg']",
}, {
    content: "Click on the second new image",
    trigger: ".o_select_media_dialog img[title='s_default_image2.jpg']",
},
    wTourUtils.addMedia(),
   {
    content: "Click on the image of the Image Gallery snippet",
    trigger: "iframe .s_image_gallery .carousel-item.active  img",
}, {
    content: "Check that the Snippet Editor of the clicked image has been loaded",
    trigger: "we-customizeblock-options span:contains('Image'):not(:contains('Image Gallery'))",
    run: () => null,
}, {
    content: "Click on Remove Block",
    trigger: ".o_we_customize_panel we-title:has(span:contains('Image Gallery')) we-button[title='Remove Block']",
}, {
    content: "Check that the Image Gallery snippet has been removed",
    trigger: "iframe #wrap:not(:has(.s_image_gallery))",
    run: () => null,
}]);

return __exports;
});
;

/*****************************************************************
*  Filepath: /website/static/tests/tours/snippet_images_wall.js  *
*  Lines: 79                                                     *
*****************************************************************/
odoo.define('@website/../tests/tours/snippet_images_wall', ['website.tour_utils'], async function (require) {
'use strict';
let __exports = {};
/** @odoo-module **/

const wTourUtils = require("website.tour_utils");

const selectSignImageStep = {
    content: "Click on sign image",
    extra_trigger: ".o_we_customize_panel:not(:has(.snippet-option-gallery_img))",
    trigger: "iframe .s_image_gallery img[data-original-src*='sign']",
};
// Without reselecting the image, the tour manages to click on the
// move button before the active image is updated.
const reselectSignImageSteps = [{
    content: "Select footer",
    trigger: "iframe footer",
}, selectSignImageStep];

wTourUtils.registerWebsitePreviewTour("snippet_images_wall", {
    test: true,
    url: "/",
    edition: true,
}, [
    wTourUtils.dragNDrop({
        id: "s_images_wall",
        name: "Images Wall",
}), wTourUtils.clickOnSnippet({
    id: "s_image_gallery",
    name: "Images Wall",
}),
selectSignImageStep,
{
    content: "Click on move to previous",
    trigger: ".snippet-option-gallery_img we-button[data-position='prev']",
}, {
    content: "Check if sign is in second column",
    trigger: "iframe .s_image_gallery .o_masonry_col:nth-child(2):has(img[data-index='1'][data-original-src*='sign'])",
    run: () => {}, // This is a check.
},
...reselectSignImageSteps,
{
    content: "Click on move to first",
    trigger: ".snippet-option-gallery_img we-button[data-position='first']",
}, {
    content: "Check if sign is in first column",
    trigger: "iframe .s_image_gallery .o_masonry_col:nth-child(1):has(img[data-index='0'][data-original-src*='sign'])",
    run: () => {}, // This is a check.
},
...reselectSignImageSteps,
{
    content: "Click on move to previous",
    trigger: ".snippet-option-gallery_img we-button[data-position='prev']",
}, {
    content: "Check if sign is in third column",
    trigger: "iframe .s_image_gallery .o_masonry_col:nth-child(3):has(img[data-index='5'][data-original-src*='sign'])",
    run: () => {}, // This is a check.
},
...reselectSignImageSteps,
{
    content: "Click on move to next",
    trigger: ".snippet-option-gallery_img we-button[data-position='next']",
}, {
    content: "Check if sign is in first column",
    trigger: "iframe .s_image_gallery .o_masonry_col:nth-child(1):has(img[data-index='0'][data-original-src*='sign'])",
    run: () => {}, // This is a check.
},
...reselectSignImageSteps,
{
    content: "Click on move to last",
    trigger: ".snippet-option-gallery_img we-button[data-position='last']",
}, {
    content: "Check layout",
    trigger: "iframe .s_image_gallery .o_masonry_col:nth-child(3):has(img[data-index='5'][data-original-src*='sign'])",
    run: () => {}, // This is a check.
}]);

return __exports;
});
;

/**********************************************************************
*  Filepath: /website/static/tests/tours/snippet_popup_add_remove.js  *
*  Lines: 61                                                          *
**********************************************************************/
odoo.define('@website/../tests/tours/snippet_popup_add_remove', ['website.tour_utils'], async function (require) {
'use strict';
let __exports = {};
/** @odoo-module */

const wTourUtils = require('website.tour_utils');

wTourUtils.registerWebsitePreviewTour('snippet_popup_add_remove', {
    test: true,
    url: '/',
    edition: true,
}, [{
    content: 'Drop s_popup snippet',
    trigger: '.oe_snippet:has( > [data-snippet="s_popup"]) .oe_snippet_thumbnail',
    run: "drag_and_drop iframe #wrap",
}, {
    content: 'Edit s_popup snippet',
    in_modal: false,
    trigger: 'iframe #wrap.o_editable [data-snippet="s_popup"] .row > div', // Click deep in the snippet structure
}, {
    content: 'Check s_popup setting are loaded, wait panel is visible',
    in_modal: false,
    trigger: '.o_we_customize_panel',
    run: () => null,
}, {
    content: `Remove the s_popup snippet`,
    in_modal: false,
    trigger: '.o_we_customize_panel we-customizeblock-options:contains("Popup") we-button.oe_snippet_remove:first',
}, {
    content: 'Check the s_popup was removed',
    in_modal: false,
    trigger: 'iframe #wrap.o_editable:not(:has([data-snippet="s_popup"]))',
    run: () => null,
},
// Test that undoing dropping the snippet removes the invisible elements panel.
{
    content: "Drop the snippet again.",
    trigger: '#oe_snippets .oe_snippet:has(> [data-snippet="s_popup"]) .oe_snippet_thumbnail',
    run: "drag_and_drop iframe #wrap",
}, {
    content: "The popup should be in the invisible elements panel.",
    in_modal: false,
    trigger: '.o_we_invisible_el_panel .o_we_invisible_entry',
    run: () => null, // It's a check.
}, {
    content: "Click on the 'undo' button.",
    in_modal: false,
    trigger: '#oe_snippets button[data-action="undo"]',
}, {
    content: "Check that the s_popup was removed.",
    in_modal: false,
    trigger: 'iframe #wrap.o_editable:not(:has([data-snippet="s_popup"]))',
    run: () => null, // It's a check.
}, {
    content: "The invisible elements panel should also be removed.",
    trigger: '#oe_snippets:has(.o_we_invisible_el_panel.d-none)',
    run: () => null, // It's a check.
}]);

return __exports;
});
;

/**************************************************************************
*  Filepath: /website/static/tests/tours/snippet_popup_and_animations.js  *
*  Lines: 124                                                             *
**************************************************************************/
odoo.define('@website/../tests/tours/snippet_popup_and_animations', ['website.tour_utils'], async function (require) {
'use strict';
let __exports = {};
/** @odoo-module */

const wTourUtils = require("website.tour_utils");

const snippets = [
    {
        id: "s_popup",
        name: "Popup",
    },
    {
        id: "s_media_list",
        name: "Media List",
    },
    {
        id: "s_three_columns",
        name: "Columns",
    },
];

const setOnScrollAnim = function () {
    return [
        wTourUtils.changeOption("WebsiteAnimate", 'we-select[data-is-animation-type-selection="true"] we-toggler'),
        wTourUtils.changeOption("WebsiteAnimate", 'we-button[data-animation-mode="onScroll"]'),
        wTourUtils.changeOption("WebsiteAnimate", 'we-select[data-name="animation_effect_opt"] we-toggler'),
        wTourUtils.changeOption("WebsiteAnimate", 'we-button[data-name="o_anim_slide_in_opt"]'),
    ];
};

wTourUtils.registerWebsitePreviewTour("snippet_popup_and_animations", {
    test: true,
    url: "/",
    edition: true,
}, [
    wTourUtils.dragNDrop(snippets[1]), // Media List
    wTourUtils.dragNDrop(snippets[1]), // Media List
    wTourUtils.dragNDrop(snippets[2]), // Columns
    wTourUtils.clickOnElement("3rd columns", "iframe .s_three_columns .row > :last-child"),
    ...setOnScrollAnim(),
    {
        content: "Open the Cookies Bar.",
        trigger: ".o_we_invisible_el_panel .o_we_invisible_entry",
    },
    {
        content: "Scroll to top",
        trigger: "iframe #wrapwrap",
        extra_trigger: "iframe #website_cookies_bar:not(.d-none)",
        run: function () {
            const animatedColumnEl = this.$anchor[0].querySelector(".s_three_columns .row > :last-child");
            // When the animated element is fully visible, its animation delay
            // should be rounded to -1 in the following condition.
            if (Math.round(parseFloat(animatedColumnEl.style.animationDelay)) !== -1) {
                console.error("The scroll animation in the page did not start properly with the cookies bar open.");
            }
            this.$anchor[0].scrollTo({
                top: 0,
                left: 0,
                behavior: 'smooth'
            });
        },
    },
    {
        content: "Wait for the page to be scrolled to the top.",
        trigger: "iframe .s_three_columns .row > :last-child:not(.o_animating)",
        extra_trigger: "iframe header#top:not(.o_header_affixed)",
        run: function () {
            // If the column has been animated successfully, the animation delay
            // should be set to approximately zero when it is not visible.
            // The main goal of the following condition is to verify if the
            // animation delay is being updated as expected.
            if (Math.round(parseFloat(this.$anchor[0].style.animationDelay)) !== 0) {
                console.error("The scroll animation in the page did not end properly with the cookies bar open.");
            }
        },
    },
    {
        content: "Close the Cookies Bar.",
        trigger: ".o_we_invisible_el_panel .o_we_invisible_entry",
        run: "click",
    },
    wTourUtils.dragNDrop(snippets[0]), // Popup
    wTourUtils.dragNDrop(snippets[1]), // Media List
    {
        content: "Drag the Columns building block and drop it at the bottom of the popup.",
        trigger: '#oe_snippets .oe_snippet[name="Columns"] .oe_snippet_thumbnail:not(.o_we_already_dragging)',
        extra_trigger: ".o_website_preview.editor_enable.editor_has_snippets",
        run: "drag_and_drop iframe #wrapwrap .modal-content .s_media_list .container > .row > :last-child",
    },
    wTourUtils.clickOnElement("3rd columns", "iframe .s_popup .s_three_columns .row > :last-child"),
    ...setOnScrollAnim(),
    {
        content: "Verify the animation delay of the animated element in the popup at the beginning",
        trigger: "iframe .s_popup .modal",
        run: function () {
            const animatedColumnEl = this.$anchor[0].querySelector(".s_three_columns .row > :last-child");
            // When the animated element is fully visible, its animation delay
            // should be rounded to -1 in the following condition.
            if (Math.round(parseFloat(animatedColumnEl.style.animationDelay)) !== -1) {
                console.error("The scroll animation in the modal did not start properly.");
            }
            this.$anchor[0].closest(".modal").scrollTo({
                top: 0,
                left: 0,
                behavior: 'smooth'
            });
        },
    },
    {
        content: "Wait until the column is no longer animated/visible.",
        trigger: "iframe .s_popup .s_three_columns .row > :last-child:not(.o_animating)",
        run: function () {
            // If the column has been animated successfully, the animation delay
            // should be set to approximately zero when it is not visible.
            if (Math.round(parseFloat(this.$anchor[0].style.animationDelay)) !== 0) {
                console.error("The scroll animation in the modal did not end properly.");
            }
        },
    },
]);

return __exports;
});
;

/*************************************************************************
*  Filepath: /website/static/tests/tours/snippet_popup_and_scrollbar.js  *
*  Lines: 131                                                            *
*************************************************************************/
odoo.define('@website/../tests/tours/snippet_popup_and_scrollbar', ['website.tour_utils'], async function (require) {
'use strict';
let __exports = {};
/** @odoo-module */

const wTourUtils = require("website.tour_utils");

const snippets = [
    {
        id: "s_popup",
        name: "Popup",
    },
    {
        id: "s_media_list",
        name: "Media List",
    },
];

const checkScrollbar = function (hasScrollbar) {
    return {
        content: `Check that the #wrapwrap ${hasScrollbar ? "has" : "does not have"} a vertical scrollbar.`,
        trigger: `iframe ${hasScrollbar ? "body:not(.modal-open)" : "body.modal-open"}`,
        run: function () {
            const wrapwrapEl = this.$anchor[0].querySelector("#wrapwrap");
            const wrapwrapStyle = window.getComputedStyle(wrapwrapEl);
            if (!hasScrollbar && (wrapwrapStyle.overflow !== "hidden" || parseFloat(wrapwrapStyle.paddingRight) < 1)) {
                console.error("error The #wrapwrap vertical scrollbar should be hidden");
            } else if (hasScrollbar && (wrapwrapStyle.overflow === "hidden" || parseFloat(wrapwrapStyle.paddingRight) > 0)) {
                console.error("error The #wrapwrap vertical scrollbar should be displayed");
            }
        },
    };
};

const toggleBackdrop = function () {
    return wTourUtils.changeOption('SnippetPopup', 'we-button[data-name="popup_backdrop_opt"] we-checkbox', 'backdrop');
};

wTourUtils.registerWebsitePreviewTour("snippet_popup_and_scrollbar", {
    test: true,
    url: "/",
    edition: true,
}, [
    wTourUtils.dragNDrop(snippets[1]), // Media List
    wTourUtils.dragNDrop(snippets[0]), // Popup
    checkScrollbar(false),
    wTourUtils.clickOnSnippet(snippets[0]), // Popup
    toggleBackdrop(), // hide Popup backdrop
    checkScrollbar(true),
    wTourUtils.goBackToBlocks(),
    {
        content: "Drag the Media List block and drop it in the popup.",
        trigger: "#oe_snippets .oe_snippet:has(> [data-snippet='s_media_list']) .oe_snippet_thumbnail",
        run: "drag_and_drop iframe #wrap .s_popup .modal-content.oe_structure",
    },
    checkScrollbar(false),
    {
        content: "Select the Media List snippet in the Popup.",
        trigger: "iframe #wrap .s_popup .modal-content .s_media_list",
    },
    {
        content: "Remove the Media List snippet in the Popup.",
        trigger: "iframe .oe_overlay.oe_active .oe_snippet_remove",
    },
    checkScrollbar(true),
    toggleBackdrop(), // show Popup backdrop
    checkScrollbar(false),
    {
        content: "Close the Popup.",
        trigger: ".o_we_invisible_el_panel .o_we_invisible_entry",
    },
    checkScrollbar(true),
    {
        content: "Open the Cookies Bar.",
        trigger: ".o_we_invisible_el_panel .o_we_invisible_entry:last-child",
    },
    checkScrollbar(true),
    toggleBackdrop(), // show Cookies Bar backdrop
    checkScrollbar(false),
    toggleBackdrop(), // hide Cookies Bar backdrop
    checkScrollbar(true),
    {
        content: "Open the Popup.",
        trigger: ".o_we_invisible_el_panel .o_we_invisible_entry",
    },
    checkScrollbar(false),
    wTourUtils.goBackToBlocks(),
    {
        content: "Drag the Media List block and drop it in the popup.",
        trigger: "#oe_snippets .oe_snippet:has(> [data-snippet='s_media_list']) .oe_snippet_thumbnail",
        run: "drag_and_drop iframe #wrap .s_popup .modal-content.oe_structure",
    },
    checkScrollbar(false),
    wTourUtils.clickOnSnippet(snippets[0]), // Popup
    {
        content: "Remove the s_popup snippet",
        trigger: ".o_we_customize_panel we-customizeblock-options:contains('Popup') we-button.oe_snippet_remove:first",
        in_modal: false,
        run: "click",
    },
    checkScrollbar(true),
    wTourUtils.goBackToBlocks(),
    {
        content: "Drag a Media List snippet and drop it in the Cookies Bar.",
        trigger: "#oe_snippets .oe_snippet:has(> [data-snippet='s_media_list']) .oe_snippet_thumbnail",
        run: "drag_and_drop iframe #website_cookies_bar .modal-content.oe_structure",
    },
    {
        content: "Select the Media List snippet in the Cookies Bar.",
        trigger: "iframe #website_cookies_bar .modal-content .s_media_list",
    },
    {
        content: "Duplicate the Media List snippet",
        trigger: ".o_we_customize_panel we-customizeblock-options:contains('Media List') we-button.oe_snippet_clone:first",
        in_modal: false,
        run: "click",
    },
    checkScrollbar(false),
    {
        content: "Remove the first Media List snippet in the Cookies Bar.",
        trigger: "iframe .oe_overlay.oe_active .oe_snippet_remove",
    },
    {
        content: "Remove the second Media List snippet in the Cookies Bar.",
        trigger: "iframe .oe_overlay.oe_active .oe_snippet_remove",
    },
    checkScrollbar(true),
]);

return __exports;
});
;

/******************************************************************
*  Filepath: /website/static/tests/tours/snippet_social_media.js  *
*  Lines: 167                                                     *
******************************************************************/
odoo.define('@website/../tests/tours/snippet_social_media', ['website.tour_utils'], async function (require) {
'use strict';
let __exports = {};
/** @odoo-module */

const wTourUtils = require('website.tour_utils');

// TODO: Remove following steps once fix of task-3212519 is done.
// Those steps are preventing a race condition to happen in the meantime: when
// the tour was clicking on the toggle to hide facebook in the next step, it
// would actually "ignore" the result of the click on the toggle and would just
// consider the action of focusing out the input.
const socialRaceConditionClass = 'social_media_race_condition';
const preventRaceConditionStep = [{
    content: "Wait a few ms to avoid race condition",
    // Ensure the class is remove from previous call of those steps
    extra_trigger: `body:not(.${socialRaceConditionClass})`,
    trigger: 'iframe .s_social_media',
    run() {
        setTimeout(() => {
            document.body.classList.add(socialRaceConditionClass);
        }, 500);
    }
}, {
    content: "Check the race condition class is added after a few ms",
    trigger: `body.${socialRaceConditionClass}`,
    run() {
        document.body.classList.remove(socialRaceConditionClass);
    }
}];

const addNewSocialNetwork = function (optionIndex, linkIndex, url) {
    return [{
        content: "Click on Add New Social Network",
        trigger: 'we-list we-button.o_we_list_add_optional',
    },
    {
        content: "Ensure new option is found",
        trigger: `we-list table input:eq(${optionIndex})[data-list-position=${optionIndex}][data-dom-position=${linkIndex}][data-undeletable=false]`,
        run: () => {}, // This is a check.
    },
    {
        content: "Ensure new link is found",
        trigger: `iframe .s_social_media:has(a:eq(${linkIndex})[href='https://www.example.com'])`,
        run: () => {}, // This is a check.
    },
    {
        content: "Change added Option label",
        trigger: `we-list table input:eq(${optionIndex})`,
        run: `text_blur ${url}`,
    },
    {
        content: "Ensure new link is changed",
        trigger: `iframe .s_social_media:has(a:eq(${linkIndex})[href='${url}'])`,
        run: () => {}, // This is a check.
    },
    ...preventRaceConditionStep,
    ];
};

wTourUtils.registerWebsitePreviewTour('snippet_social_media', {
    test: true,
    url: '/',
    edition: true,
}, [
    wTourUtils.dragNDrop({id: 's_social_media', name: 'Social Media'}),
    wTourUtils.clickOnSnippet({id: 's_social_media', name: 'Social Media'}),
    ...addNewSocialNetwork(6, 6, 'https://www.youtu.be/y7TlnAv6cto'),
    {
        content: 'Click on the toggle to hide Facebook',
        trigger: 'we-list table we-button.o_we_user_value_widget',
        run: 'click',
    },
    {
        content: "Ensure twitter became first",
        trigger: 'iframe .s_social_media:has(a:eq(0)[href="/website/social/twitter"])',
        run: () => {}, // This is a check.
    },
    {
        content: 'Drag the facebook link at the end of the list',
        trigger: 'we-list table we-button.o_we_drag_handle',
        position: 'bottom',
        run: "drag_and_drop we-list table tr:last-child",
    },
    {
        content: 'Check drop completed',
        trigger: 'we-list table input:eq(6)[data-media="facebook"]',
        run: () => {}, // This is a check.
    },
    ...preventRaceConditionStep,
    // Create a Link for which we don't have an icon to propose.
    ...addNewSocialNetwork(7, 6, 'https://whatever.it/1EdSw9X'),
    // Create a custom instagram link.
    ...addNewSocialNetwork(8, 7, 'https://instagr.am/odoo.official/'),
    {
        content: "Check if the result is correct before removing",
        trigger: "iframe .s_social_media" +
                 ":has(a:eq(0)[href='/website/social/twitter'])" +
                 ":has(a:eq(1)[href='/website/social/linkedin'])" +
                 ":has(a:eq(2)[href='/website/social/youtube'])" +
                 ":has(a:eq(3)[href='/website/social/instagram'])" +
                 ":has(a:eq(4)[href='/website/social/github'])" +
                 ":has(a:eq(5)[href='https://www.youtu.be/y7TlnAv6cto']:has(i.fa-youtube))" +
                 ":has(a:eq(6)[href='https://whatever.it/1EdSw9X']:has(i.fa-pencil))" +
                 ":has(a:eq(7)[href='https://instagr.am/odoo.official/']:has(i.fa-instagram))",
        run: () => {}, // This is a check.
    },
    // Create a custom link, not officially supported, ensure icon is found.
    {
        content: 'Change custom social to unsupported link',
        trigger: 'we-list table input:eq(5)',
        run: 'text_blur https://www.paypal.com/abc',
    },
    {
        content: "Ensure paypal icon is found",
        trigger: "iframe .s_social_media" +
                 ":has(a:eq(5)[href='https://www.paypal.com/abc']:has(i.fa-paypal))",
        run: () => {}, // This is a check.
    },
    ...preventRaceConditionStep,
    {
        content: 'Delete the custom link',
        trigger: 'we-list we-button.o_we_select_remove_option',
        run: 'click',
    },
    {
        content: "Ensure custom link was removed",
        trigger: 'iframe .s_social_media:has(a:eq(5)[href="https://whatever.it/1EdSw9X"]:has(i.fa-pencil))',
        run: () => {}, // This is a check.
    },
    {
        content: 'Click on the toggle to show Facebook',
        trigger: 'we-list table we-button.o_we_user_value_widget:not(.active)',
        run: 'click',
    },
    {
        content: "Check if the result is correct after removing",
        trigger: "iframe .s_social_media" +
                 ":has(a:eq(0)[href='/website/social/twitter'])" +
                 ":has(a:eq(1)[href='/website/social/linkedin'])" +
                 ":has(a:eq(2)[href='/website/social/youtube'])" +
                 ":has(a:eq(3)[href='/website/social/instagram'])" +
                 ":has(a:eq(4)[href='/website/social/github'])" +
                 ":has(a:eq(5)[href='/website/social/facebook'])" +
                 ":has(a:eq(6)[href='https://whatever.it/1EdSw9X']:has(i.fa-pencil))" +
                 ":has(a:eq(7)[href='https://instagr.am/odoo.official/']:has(i.fa-instagram))",
        run: () => {}, // This is a check.
    },
    {
        content: 'Change url of the DB instagram link',
        trigger: 'we-list table input:eq(3)',
        run: 'text_blur https://instagram.com/odoo.official/',
    },
    {
        content: 'Save',
        trigger: 'button[data-action=save]',
        run: 'click',
    },
    {
        content: "Wait until save's calls are finished",
        trigger: "iframe body:not(.editor_enable)",
        run: function () {}, // it's a check
    }
]);

return __exports;
});
;

/**********************************************************************
*  Filepath: /website/static/tests/tours/snippet_table_of_content.js  *
*  Lines: 89                                                          *
**********************************************************************/
odoo.define('@website/../tests/tours/snippet_table_of_content', ['website.tour_utils'], async function (require) {
'use strict';
let __exports = {};
/** @odoo-module */

const wTourUtils = require('website.tour_utils');

const scrollToHeading = function (position) {
    return {
        content: `Scroll to h1 number ${position}`,
        trigger: `iframe h1:eq(${position})`,
        run: function () {
            this.$anchor[0].scrollIntoView(true);
        },
    };
};
const checkTOCNavBar = function (tocPosition, activeHeaderPosition) {
    return {
        content: `Check that the header ${activeHeaderPosition} is active for TOC ${tocPosition}`,
        trigger: `iframe .s_table_of_content:eq(${tocPosition}) .table_of_content_link:eq(${activeHeaderPosition}).active `,
        run: () => {}, // This is a check.
    };
};

wTourUtils.registerWebsitePreviewTour('snippet_table_of_content', {
    test: true,
    url: '/',
    edition: true,
}, [
    wTourUtils.dragNDrop({id: 's_table_of_content', name: 'Table of Content'}),
    wTourUtils.dragNDrop({id: 's_table_of_content', name: 'Table of Content'}),
    // To make sure that the public widgets of the two previous ones started.
    wTourUtils.dragNDrop({id: 's_banner', name: 'Banner'}),
    ...wTourUtils.clickOnSave(),
    checkTOCNavBar(0, 0),
    checkTOCNavBar(1, 0),
    scrollToHeading(1),
    checkTOCNavBar(0, 1),
    checkTOCNavBar(1, 0),
    scrollToHeading(2),
    checkTOCNavBar(1, 0),
    scrollToHeading(3),
    checkTOCNavBar(1, 1),
    ...wTourUtils.clickOnEditAndWaitEditMode(),
    {
        content: "Click on the first TOC's title",
        trigger: 'iframe .s_table_of_content:eq(0) h1',
    },
    {
        content: "Hide the first TOC on mobile",
        trigger: '[data-toggle-device-visibility="no_mobile"]',
    },
    {
        content: "Click on the second TOC's title",
        trigger: 'iframe .s_table_of_content:eq(1) h1',
    },
    {
        content: "Hide the second TOC on desktop",
        trigger: '[data-toggle-device-visibility="no_desktop"]',
    },
    ...wTourUtils.clickOnSave(),
    {
        content: "Check that we have the good TOC on desktop",
        trigger: 'iframe .s_table_of_content.o_snippet_mobile_invisible',
        run: () => {
            if ($(document.querySelector('iframe .s_table_of_content.o_snippet_desktop_invisible'))
                    .is(':visible')) {
                console.error('The mobile TOC should not be visible on desktop');
            }
        },
    },
    {
        content: "Toggle the mobile view",
        trigger: '.o_mobile_preview',
    },
    {
        content: "Check that we have the good TOC on mobile",
        trigger: 'iframe .s_table_of_content.o_snippet_desktop_invisible',
        run: () => {
            if ($(document.querySelector('iframe .s_table_of_content.o_snippet_mobile_invisible'))
                    .is(':visible')) {
                console.error('The desktop TOC should not be visible on mobile');
            }
        },
    },
]);

return __exports;
});
;

/*****************************************************************
*  Filepath: /website/static/tests/tours/snippet_translation.js  *
*  Lines: 56                                                     *
*****************************************************************/
odoo.define('@website/../tests/tours/snippet_translation', ['website.tour_utils'], async function (require) {
'use strict';
let __exports = {};
/** @odoo-module **/

const wTourUtils = require('website.tour_utils');

wTourUtils.registerWebsitePreviewTour('snippet_translation', {
    url: '/',
    edition: true,
    test: true,
}, [
    wTourUtils.dragNDrop({name: 'Cover'}),
    {
        content: "Check that contact us contain Parseltongue",
        trigger: 'iframe .s_cover .btn-primary:contains("Contact us in Parseltongue")',
        run: () => null, // it's a check
    },
    {
        content: "Check that the save button contains 'in fu_GB'",
        trigger: '.btn[data-action="save"]:contains("Save in fu_GB")',
        run: () => null, // it's a check
    },
]);
wTourUtils.registerWebsitePreviewTour('snippet_translation_changing_lang', {
    url: '/',
    test: true,
}, [
    {
        content: "Change language to Parseltongue",
        trigger: 'iframe .js_language_selector .btn',
    },
    {
        content: "Change the language to English",
        trigger: 'iframe .js_language_selector .js_change_lang[data-url_code="en"]',
    },
    {
        content: "Enable translation",
        trigger: '.o_translate_website_container a',
    },
    {
        content: "Close the dialog",
        trigger: '.modal-footer .btn-primary',
    },
    ...wTourUtils.clickOnSave(),
    ...wTourUtils.clickOnEditAndWaitEditMode(),
    wTourUtils.dragNDrop({name: 'Cover'}),
    {
        content: "Check that contact us contain Parseltongue",
        trigger: 'iframe .s_cover .btn-primary:contains("Contact us in Parseltongue")',
        run: () => null, // it's a check
    },
]);

return __exports;
});
;

/*************************************************************
*  Filepath: /website/static/tests/tours/snippet_version.js  *
*  Lines: 61                                                 *
*************************************************************/
odoo.define("website.tour.snippet_version", function (require) {
"use strict";

const wTourUtils = require('website.tour_utils');

wTourUtils.registerWebsitePreviewTour("snippet_version", {
    edition: true,
    url: "/",
    test: true,
}, [{
    content: "Drop s_test_snip snippet",
    trigger: '#oe_snippets .oe_snippet:has(.s_test_snip) .oe_snippet_thumbnail',
    run: "drag_and_drop iframe #wrap",
}, {
    content: "Drop s_text_image snippet",
    trigger: '#oe_snippets .oe_snippet:has(.s_text_image) .oe_snippet_thumbnail:not(.o_we_already_dragging)',
    run: "drag_and_drop iframe #wrap",
}, {
    content: "Test t-snippet and t-snippet-call: snippets have data-snippet set",
    trigger: '#oe_snippets .o_panel_body > .oe_snippet.ui-draggable',
    run: function () {
        // Tests done here as all these are not visible on the page
        const draggableSnippets = document.querySelectorAll('#oe_snippets .o_panel_body > .oe_snippet.ui-draggable > :nth-child(2)');
        if (![...draggableSnippets].every(el => el.dataset.snippet)) {
            console.error("error Some t-snippet are missing their template name");
        }
        if (!document.querySelector('#oe_snippets [data-snippet="s_test_snip"] [data-snippet="s_share"]')) {
            console.error("error s_share t-called inside s_test_snip is missing template name");
        }
        if (!document.querySelector('iframe:not(.o_ignore_in_tour)').contentDocument.querySelector('#wrap [data-snippet="s_test_snip"] [data-snippet="s_share"]')) {
            console.error("error Dropped a s_test_snip snippet but missing s_share template name in it");
        }
    },
},
    ...wTourUtils.clickOnSave(),
    ...wTourUtils.clickOnEditAndWaitEditMode(),
{
    content: "Modify the version of snippets",
    trigger: '#oe_snippets .o_panel_body > .oe_snippet',
    run: function () {
        document.querySelector('#oe_snippets .oe_snippet > [data-snippet="s_test_snip"]').dataset.vjs = '999';
        document.querySelector('#oe_snippets .oe_snippet > [data-snippet="s_share"]').dataset.vcss = '999';
        document.querySelector('#oe_snippets .oe_snippet > [data-snippet="s_text_image"]').dataset.vxml = '999';
    },
}, {
    content: "Edit s_test_snip",
    trigger: 'iframe #wrap.o_editable .s_test_snip',
}, {
    content: "Edit text_image",
    extra_trigger: 'we-customizeblock-options:contains(Test snip) .snippet-option-VersionControl > we-alert',
    trigger: 'iframe #wrap.o_editable .s_text_image',
}, {
    content: "Edit s_share",
    extra_trigger: 'we-customizeblock-options:contains(Text - Image) .snippet-option-VersionControl  > we-alert',
    trigger: 'iframe #wrap.o_editable .s_share',
}, {
    content: "s_share is outdated",
    extra_trigger: 'we-customizeblock-options:contains(Share) .snippet-option-VersionControl > we-alert',
    trigger: 'iframe body',
}]);
});
;

/************************************************************************
*  Filepath: /website/static/tests/tours/snippets_all_drag_and_drop.js  *
*  Lines: 123                                                           *
************************************************************************/
odoo.define("website.tour.snippets_all_drag_and_drop", async function (require) {
"use strict";

const { WysiwygAdapterComponent } = require('@website/components/wysiwyg_adapter/wysiwyg_adapter');
const websiteTourUtils = require('website.tour_utils');
const { patch, unpatch } = require('web.utils');

const patchWysiwygAdapter = () => patch(WysiwygAdapterComponent.prototype, 'snippets_all_drag_and_drop.wysiwyg_adapter', {
    _trigger_up(ev) {
        this._super(...arguments);
        if (ev.name === 'snippet_removed') {
            $('body').attr('test-dd-snippet-removed', true);
        }
    }
});

const unpatchWysiwygAdapter = () => unpatch(WysiwygAdapterComponent.prototype, 'snippets_all_drag_and_drop.wysiwyg_adapter');

const { registry } = require("@web/core/registry");

let snippetsNames = (new URL(document.location.href)).searchParams.get('snippets_names') || '';
// When this test is loaded in the backend, the search params aren't as easy to
// read as before. Little trickery to make this test run.
const searchParams = new URLSearchParams(window.location.href.split('#')[1]).get('path');
if (searchParams) {
    snippetsNames = new URLSearchParams(searchParams.split('/')[1]).get('snippets_names') || '';
    snippetsNames = snippetsNames.split(',');
}
let steps = [];
let n = 0;
for (const snippet of snippetsNames) {
    n++;
    const snippetSteps = [{
        content: `Drop ${snippet} snippet [${n}/${snippetsNames.length}]`,
        trigger: `#oe_snippets .oe_snippet:has( > [data-snippet='${snippet}']) .oe_snippet_thumbnail`,
        run: "drag_and_drop iframe #wrap",
    }, {
        content: `Edit ${snippet} snippet`,
        trigger: `iframe #wrap.o_editable [data-snippet='${snippet}']`,
    }, {
        content: `check ${snippet} setting are loaded, wait panel is visible`,
        trigger: ".o_we_customize_panel",
        run: function () {}, // it's a check
    }, {
        content: `Remove the ${snippet} snippet`, // Avoid bad perf if many snippets
        trigger: "we-button.oe_snippet_remove:last"
    }, {
        content: `click on 'BLOCKS' tab (${snippet})`,
        extra_trigger: 'body[test-dd-snippet-removed]',
        trigger: ".o_we_add_snippet_btn",
        run: function (actions) {
            $('body').removeAttr('test-dd-snippet-removed');
            actions.auto();
        },
    }];

    if (snippet === 's_google_map') {
        snippetSteps.splice(1, 3, {
            content: 'Close API Key popup',
            trigger: "iframe .modal-footer .btn-secondary",
        });
    } else if (['s_popup', 's_newsletter_subscribe_popup'].includes(snippet)) {
        snippetSteps[2]['in_modal'] = false;
        snippetSteps.splice(3, 2, {
            content: `Hide the ${snippet} popup`,
            trigger: "iframe .s_popup_close",
        }, {
            content: `Make sure ${snippet} is hidden`,
            trigger: "iframe body:not(.modal-open)",
        });
    }
    steps = steps.concat(snippetSteps);
}

registry.category("web_tour.tours").add("snippets_all_drag_and_drop", {
    test: true,
    // To run the tour locally, you need to insert the URL sent by the python
    // tour here. There is currently an issue with tours which don't have an URL
    // url: '/?enable_editor=1&snippets_names=s_showcase,s_numbers,s_...',
    steps: [
    ...websiteTourUtils.clickOnEditAndWaitEditMode(),
    {
        content: "Ensure snippets are actually passed at the test.",
        trigger: "body",
        run: function () {
            // safety check, otherwise the test might "break" one day and
            // receive no steps. The test would then not test anything anymore
            // without us noticing it.
            if (steps.length < 220) {
                console.error(`This test is not behaving as it should, got only ${steps.length} steps.`);
            }
            patchWysiwygAdapter();
        },
    },
    // This first step is needed as it will be used later for inner snippets
    // Without this, it will dropped inside the footer and will need an extra
    // selector.
    {
        content: "Drop s_text_image snippet",
        trigger: "#oe_snippets .oe_snippet:has( > [data-snippet='s_text_image']) .oe_snippet_thumbnail",
        run: "drag_and_drop iframe #wrap"
    },
    {
        content: "Edit s_text_image snippet",
        trigger: "iframe #wrap.o_editable [data-snippet='s_text_image']"
    },
    {
        content: "check setting are loaded, wait panel is visible",
        trigger: ".o_we_customize_panel"
    },
    {
        content: "click on 'BLOCKS' tab",
        trigger: ".o_we_add_snippet_btn"
    },
].concat(steps).concat([
    {
        content: "Remove wysiwyg patch",
        trigger: "body",
        run: () => unpatchWysiwygAdapter(),
    }
]),
});
});
;

/*********************************************************************
*  Filepath: /website/static/tests/tours/specific_website_editor.js  *
*  Lines: 29                                                         *
*********************************************************************/
odoo.define('website.tour.specific_website_editor', function (require) {
'use strict';

const { registry } = require("@web/core/registry");
const wTourUtils = require("website.tour_utils");

wTourUtils.registerWebsitePreviewTour("generic_website_editor", {
    test: true,
    edition: true,
}, [{
    trigger: 'iframe body:not([data-hello="world"])',
    content: 'Check that the editor DOM matches its website-generic features',
    run: function () {}, // Simple check
}]);

// Good practice would have been to use `wTourUtils.registerWebsitePreviewTour`
// for this tour with `edition: true` and remove the first step to enter edit
// mode. Unfortunately this breaks the page and therefore the test fails for
// unknown reason.
registry.category("web_tour.tours").add('specific_website_editor', {
    test: true,
    steps: [
    ...wTourUtils.clickOnEditAndWaitEditMode(),
{
    trigger: 'iframe body[data-hello="world"]',
    content: 'Check that the editor DOM matches its website-specific features',
    run: function () {}, // Simple check
}]});
});
;

/******************************************************************
*  Filepath: /website/static/tests/tours/start_cloned_snippet.js  *
*  Lines: 39                                                      *
******************************************************************/
odoo.define('@website/../tests/tours/start_cloned_snippet', ['website.tour_utils'], async function (require) {
'use strict';
let __exports = {};
/** @odoo-module **/

const wTourUtils = require('website.tour_utils');

const countdownSnippet = {
    name: 'Countdown',
    id: 's_countdown',
};
const dragNDropOutOfFooter = wTourUtils.dragNDrop(countdownSnippet);
dragNDropOutOfFooter.run = 'drag_and_drop iframe #wrapwrap #wrap';

wTourUtils.registerWebsitePreviewTour('website_start_cloned_snippet', {
    edition: true,
    test: true,
    url: '/',
}, [
    dragNDropOutOfFooter,
    wTourUtils.clickOnSnippet(countdownSnippet),
    {
        content: 'Click on clone snippet',
        trigger: '.oe_snippet_clone',
    },
    {
        content: 'Check that the cloned snippet has a canvas and that something has been drawn inside of it',
        trigger: 'iframe .s_countdown:eq(1) canvas',
        run: function () {
            // Check that at least one bit has been drawn in the canvas
            if (!this.$anchor[0].getContext('2d').getImageData(0, 0, 1000, 1000).data.includes(1)) {
                console.error('The cloned snippet should have been started');
            }
        },
    },
]);

return __exports;
});
;

/*************************************************************
*  Filepath: /website/static/tests/tours/text_animations.js  *
*  Lines: 52                                                 *
*************************************************************/
odoo.define('@website/../tests/tours/text_animations', ['website.tour_utils'], async function (require) {
'use strict';
let __exports = {};
/** @odoo-module */

const wTourUtils = require("website.tour_utils");

wTourUtils.registerWebsitePreviewTour("text_animations", {
    test: true,
    url: "/",
    edition: true,
}, [
    wTourUtils.dragNDrop({
        id: "s_cover",
        name: "Cover",
    }),
    {
        content: "Click on the snippet title",
        trigger: "iframe .s_cover h1 > font",
        run: "dblclick", // Make sure the title is selected.
    },
    {
        content: "Click on the 'Animate Text' button to activate the option",
        trigger: "div.o_we_animate_text",
    },
    {
        content: "Check that the animation was applied",
        trigger: "iframe .s_cover h1 span.o_animated_text",
        run: () => null, // it's a check
    },
    {
        content: "Click on the 'Animate Text' button",
        trigger: "div.o_we_animate_text",
    },
    {
        content: "Check that the animation was disabled for the title",
        trigger: "iframe .s_cover:not(:has(.o_animated_text))",
        run: () => null, // it's a check
    },
    {
        content: "Try to apply the text animation again",
        trigger: "div.o_we_animate_text",
    },
    {
        content: "Check that the animation was applied",
        trigger: "iframe .s_cover:has(span.o_animated_text)",
        run: () => null, // it's a check
    },
]);

return __exports;
});
;

/*****************************************************************
*  Filepath: /website/static/tests/tours/translate_menu_name.js  *
*  Lines: 31                                                     *
*****************************************************************/
odoo.define('@website/../tests/tours/translate_menu_name', ['website.tour_utils'], async function (require) {
'use strict';
let __exports = {};
/** @odoo-module **/

const wTourUtils = require('website.tour_utils');

wTourUtils.registerWebsitePreviewTour('translate_menu_name', {
    url: '/pa_GB',
    test: true,
    edition: false,
}, [
    {
        content: "activate translate mode",
        trigger: '.o_translate_website_container a',
    },
    {
        content: "Close the dialog",
        trigger: '.modal-footer .btn-primary',
    },
    wTourUtils.clickOnExtraMenuItem({}, true),
    {
        content: "translate the menu entry",
        trigger: 'iframe a[href="/englishURL"] span',
        run: 'text value pa-GB',
    },
    ...wTourUtils.clickOnSave(),
]);

return __exports;
});
;

/*************************************************************
*  Filepath: /website/static/tests/tours/unsplash_beacon.js  *
*  Lines: 14                                                 *
*************************************************************/
odoo.define("website.tour.unsplash_beacon", function (require) {
"use strict";

const tour = require("web_tour.tour");

tour.register("test_unsplash_beacon", {
    test: true,
    url: "/",
}, [{
    content: "Verify whether beacon was sent.",
    trigger: 'img[data-beacon="sent"]',
    run: () => {}, // This is a check.
}]);
});
;

/****************************************************************************
*  Filepath: /website/static/tests/tours/website_backend_menus_redirect.js  *
*  Lines: 36                                                                *
****************************************************************************/
odoo.define('@website/../tests/tours/website_backend_menus_redirect', ['web_tour.tour'], async function (require) {
'use strict';
let __exports = {};
/** @odoo-module **/

const tour = require('web_tour.tour');

tour.register('website_backend_menus_redirect', {
    test: true,
    url: '/',
},
[{
    content: 'Need at least a step so the tour is not failing in enterprise',
    trigger: 'body',
    edition: 'enterprise',
}, {
    content: 'Make frontend to backend menus appears',
    trigger: 'body:has(#wrap)',
    run: function () {
        // The dropdown is hidden behind an SVG on hover animation.
        this.$anchor.find('.o_frontend_to_backend_apps_menu').addClass('show');
    },
    edition: 'community',
}, {
    content: 'Click on Test Root backend menu',
    trigger: '.o_frontend_to_backend_apps_menu a:contains("Test Root")',
    edition: 'community',
}, {
    content: 'Check that we landed on the apps page (Apps), and not the Home Action page (Settings)',
    trigger: '.oe_module_vignette',
    edition: 'community',
},
]);

return __exports;
});
;

/*****************************************************************
*  Filepath: /website/static/tests/tours/website_click_tests.js  *
*  Lines: 43                                                     *
*****************************************************************/
odoo.define('@website/../tests/tours/website_click_tests', ['website.tour_utils'], async function (require) {
'use strict';
let __exports = {};
/** @odoo-module **/

const wTourUtils = require('website.tour_utils');

const cover = {
    id: 's_cover',
    name: 'Cover',
};

wTourUtils.registerWebsitePreviewTour('website_click_tour', {
    test: true,
    url: '/',
}, [
    {
        content: "trigger a page navigation",
        trigger: 'iframe a[href="/contactus"]',
    },
    {
        content: "wait for the page to be loaded",
        trigger: '.o_website_preview[data-view-xmlid="website.contactus"]',
        run: () => null, // it's a check
    },
    ...wTourUtils.clickOnEditAndWaitEditMode(),
    {
        content: "click on a link that would trigger navigation",
        trigger: 'iframe a[href="/"]',
    },
    wTourUtils.goBackToBlocks(),
    wTourUtils.dragNDrop(cover),
    wTourUtils.clickOnSnippet(cover),
    ...wTourUtils.clickOnSave(),
    {
        content: "wait for the iframe to be ready",
        trigger: 'iframe body:not(.editor_enable)',
        run: () => null, // it's a check
    }
]);

return __exports;
});
;

/*****************************************************************
*  Filepath: /website/static/tests/tours/website_form_editor.js  *
*  Lines: 675                                                    *
*****************************************************************/
odoo.define('website.tour.form_editor', function (require) {
    'use strict';

    const wTourUtils = require("website.tour_utils");

    // Visibility possible values:
    const VISIBLE = 'Always Visible';
    const HIDDEN = 'Hidden';
    const CONDITIONALVISIBILITY = 'Visible only if';

    const NB_NON_ESSENTIAL_REQUIRED_FIELDS_IN_DEFAULT_FORM = 2;
    const ESSENTIAL_FIELDS_VALID_DATA_FOR_DEFAULT_FORM = [
        {
            name: 'email_from',
            value: 'admin@odoo.com',
        },
        {
            name: 'subject',
            value: 'Hello, world!',
        }
    ];
    const essentialFieldsForDefaultFormFillInSteps = [];
    for (const data of ESSENTIAL_FIELDS_VALID_DATA_FOR_DEFAULT_FORM) {
        essentialFieldsForDefaultFormFillInSteps.push({
            content: "Enter data in model-required field",
            trigger: `iframe .s_website_form_model_required .s_website_form_input[name="${data.name}"]`,
            run: `text ${data.value}`,
        });
    }

    // Replace all `"` character by `&quot;`, all `'` character by `&apos;` and
    // all "`" character by `&lsquo;`.
    const getQuotesEncodedName = function (name) {
            return name.replaceAll(/"/g, character => `&quot;`)
                       .replaceAll(/'/g, character => `&apos;`)
                       .replaceAll(/`/g, character => `&lsquo;`);
    };

    const triggerFieldByLabel = (label) => {
        return `.s_website_form_field.s_website_form_custom:has(label:contains("${label}"))`;
    };
    const selectFieldByLabel = (label) => {
        return [{
            content: `Select field "${label}"`,
            trigger: "iframe " + triggerFieldByLabel(label),
        }];
    };
    const selectButtonByText = function (text) {
        return [{
            content: "Open the select",
            trigger: `we-select:has(we-button:contains("${text}")) we-toggler`,
        },
        {
            content: "Click on the option",
            trigger: `we-select we-button:contains("${text}")`,
        }];
    };
    const selectButtonByData = function (data) {
        return [{
            content: "Open the select",
            trigger: `we-select:has(we-button[${data}]) we-toggler`,
        }, {
            content: "Click on the option",
            trigger: `we-select we-button[${data}]`,
        }];
    };
    const addField = function (name, type, label, required, isCustom,
                               display = {visibility: VISIBLE, condition: ""}) {
        const data = isCustom ? `data-custom-field="${name}"` : `data-existing-field="${name}"`;
        const ret = [{
            content: "Select form",
            extra_trigger: 'iframe .s_website_form_field',
            trigger: 'iframe section.s_website_form',
        }, {
            content: "Add field",
            trigger: 'we-button[data-add-field]',
        },
        ...selectButtonByData(data),
        {
            content: "Wait for field to load",
            trigger: `iframe .s_website_form_field[data-type="${name}"], .s_website_form_input[name="${name}"]`, //custom or existing field
            run: function () {},
        },
        ...selectButtonByText(display.visibility),
    ];
        let testText = 'iframe .s_website_form_field';
        if (display.condition) {
            ret.push({
                content: "Set the visibility condition",
                trigger: 'we-input[data-attribute-name="visibilityCondition"] input',
                run: `text ${display.condition}`,
            });
        }
        if (required) {
            testText += '.s_website_form_required';
            ret.push({
                content: "Mark the field as required",
                trigger: 'we-button[data-name="required_opt"] we-checkbox',
            });
        }
        if (label) {
            testText += `:has(label:contains(${label}))`;
            ret.push({
                content: "Change the label text",
                trigger: 'we-input[data-set-label-text] input',
                run: `text ${label}`,
            });
        }
        if (type !== 'checkbox' && type !== 'radio' && type !== 'select') {
            let inputType = type === 'textarea' ? type : `input[type="${type}"]`;
            const nameAttribute = isCustom && label ? getQuotesEncodedName(label) : name;
            testText += `:has(${inputType}[name="${nameAttribute}"]${required ? "[required]" : ""})`;
        }
        ret.push({
            content: "Check the resulting field",
            trigger: testText,
            run: function () {},
        });
        return ret;
    };
    const addCustomField = function (name, type, label, required, display) {
        return addField(name, type, label, required, true, display);
    };
    const addExistingField = function (name, type, label, required, display) {
        return addField(name, type, label, required, false, display);
    };

    wTourUtils.registerWebsitePreviewTour("website_form_editor_tour", {
        url: '/',
        edition: true,
        test: true,
    }, [
        // Drop a form builder snippet and configure it
        {
            content: "Drop the form snippet",
            trigger: '#oe_snippets .oe_snippet:has(.s_website_form) .oe_snippet_thumbnail',
            run: 'drag_and_drop iframe #wrap',
        }, {
            content: "Select form by clicking on an input field",
            extra_trigger: 'iframe .s_website_form_field',
            trigger: 'iframe section.s_website_form input',
        }, {
            content: "Verify that the form editor appeared",
            trigger: '.o_we_customize_panel .snippet-option-WebsiteFormEditor',
            run: () => null,
        }, {
            content: "Go back to blocks to unselect form",
            trigger: '.o_we_add_snippet_btn',
        }, {
            content: "Select form by clicking on a text area",
            extra_trigger: 'iframe .s_website_form_field',
            trigger: 'iframe section.s_website_form textarea',
        }, {
            content: "Verify that the form editor appeared",
            trigger: '.o_we_customize_panel .snippet-option-WebsiteFormEditor',
            run: () => null,
        }, {
            content: "Rename the field label",
            trigger: 'we-input[data-set-label-text] input',
            run: "text Renamed",
        }, {
            content: "Leave the rename options",
            trigger: 'we-input[data-set-label-text] input',
            run: "text_blur",
        }, {
            content: "Go back to blocks to unselect form",
            trigger: '.o_we_add_snippet_btn',
        }, {
            content: "Select form itself (not a specific field)",
            extra_trigger: 'iframe .s_website_form_field',
            trigger: 'iframe section.s_website_form',
        },
        ...selectButtonByText('Send an E-mail'),
        {
            content: "Form has a model name",
            trigger: 'iframe section.s_website_form form[data-model_name="mail.mail"]',
        }, {
            content: 'Edit the Phone Number field',
            trigger: 'iframe input[name="phone"]',
        }, {
            content: 'Change the label position of the phone field',
            trigger: 'we-button[data-select-label-position="right"]',
        },
        ...addExistingField('email_cc', 'text', 'Test conditional visibility', false, {visibility: CONDITIONALVISIBILITY, condition: 'odoo'}),

        ...addExistingField('date', 'text', 'Test Date', true),

        ...addExistingField('record_name', 'text', 'Awesome Label', false, {visibility: HIDDEN}),

        ...addExistingField('body_html', 'textarea', 'Your Message', true),

        ...addExistingField('recipient_ids', 'checkbox'),

        ...addCustomField('one2many', 'checkbox', 'Products', true),
        {
            content: "Change Option 1 label",
            trigger: 'we-list table input:eq(0)',
            run: 'text Iphone',
        }, {
            content: "Change Option 2 label",
            trigger: 'we-list table input:eq(1)',
            run: 'text Galaxy S',
        }, {
            content: "Change first Option 3 label",
            trigger: 'we-list table input:eq(2)',
            run: 'text Xperia',
        }, {
            content: "Click on Add new Checkbox",
            trigger: 'we-list we-button.o_we_list_add_optional',
        }, {
            content: "Change added Option label",
            trigger: 'we-list table input:eq(3)',
            run: 'text Wiko Stairway',
        }, {
            content: "Check the resulting field",
            trigger: "iframe .s_website_form_field.s_website_form_custom.s_website_form_required" +
                        ":has(.s_website_form_multiple[data-display='horizontal'])" +
                        ":has(.checkbox:has(label:contains('Iphone')):has(input[type='checkbox'][required]))" +
                        ":has(.checkbox:has(label:contains('Galaxy S')):has(input[type='checkbox'][required]))" +
                        ":has(.checkbox:has(label:contains('Xperia')):has(input[type='checkbox'][required]))" +
                        ":has(.checkbox:has(label:contains('Wiko Stairway')):has(input[type='checkbox'][required]))",
            run: function () {},
        },
        ...selectButtonByData('data-multi-checkbox-display="vertical"'),
        {
            content: "Check the resulting field",
            trigger: "iframe .s_website_form_field.s_website_form_custom.s_website_form_required" +
                        ":has(.s_website_form_multiple[data-display='vertical'])" +
                        ":has(.checkbox:has(label:contains('Iphone')):has(input[type='checkbox'][required]))" +
                        ":has(.checkbox:has(label:contains('Galaxy S')):has(input[type='checkbox'][required]))" +
                        ":has(.checkbox:has(label:contains('Xperia')):has(input[type='checkbox'][required]))" +
                        ":has(.checkbox:has(label:contains('Wiko Stairway')):has(input[type='checkbox'][required]))",
            run: function () {},
        },

        ...addCustomField('selection', 'radio', 'Service', true),
        {
            content: "Change Option 1 label",
            trigger: 'we-list table input:eq(0)',
            run: 'text After-sales Service',
        }, {
            content: "Change Option 2 label",
            trigger: 'we-list table input:eq(1)',
            run: 'text Invoicing Service',
        }, {
            content: "Change first Option 3 label",
            trigger: 'we-list table input:eq(2)',
            run: 'text Development Service',
        }, {
            content: "Click on Add new Checkbox",
            trigger: 'we-list we-button.o_we_list_add_optional',
        }, {
            content: "Change last Option label",
            trigger: 'we-list table input:eq(3)',
            run: 'text Management Service',
        }, {
            content: "Mark the field as not required",
            trigger: 'we-button[data-name="required_opt"] we-checkbox',
        }, {
            content: "Check the resulting field",
            trigger: "iframe .s_website_form_field.s_website_form_custom:not(.s_website_form_required)" +
                        ":has(.radio:has(label:contains('After-sales Service')):has(input[type='radio']:not([required])))" +
                        ":has(.radio:has(label:contains('Invoicing Service')):has(input[type='radio']:not([required])))" +
                        ":has(.radio:has(label:contains('Development Service')):has(input[type='radio']:not([required])))" +
                        ":has(.radio:has(label:contains('Management Service')):has(input[type='radio']:not([required])))",
            run: function () {},
        },

        ...addCustomField('many2one', 'select', 'State', true),

        // Customize custom selection field
        {
            content: "Change Option 1 Label",
            trigger: 'we-list table input:eq(0)',
            run: 'text Germany',
        }, {
            content: "Change Option 2 Label",
            trigger: 'we-list table input:eq(1)',
            run: 'text Belgium',
        }, {
            content: "Change first Option 3 label",
            trigger: 'we-list table input:eq(2)',
            run: 'text France',
        }, {
            content: "Click on Add new Checkbox",
            trigger: 'we-list we-button.o_we_list_add_optional',
        }, {
            content: "Change last Option label",
            trigger: 'we-list table input:eq(3)',
            run: 'text Canada',
        }, {
            content: "Remove Germany Option",
            trigger: '.o_we_select_remove_option:eq(0)',
        }, {
            content: "Click on Add new Checkbox",
            trigger: 'we-list we-button.o_we_list_add_optional',
        }, {
            content: "Change last option label with a number",
            trigger: 'we-list table input:eq(3)',
            run: 'text 44 - UK',
        }, {
            content: "Check that the input value is the full option value",
            trigger: 'we-list table input:eq(3)',
            run: () => {
                const addedOptionEl = document.querySelector('iframe.o_iframe').contentDocument.querySelector('.s_website_form_field select option[value="44 - UK"]');
                if (!addedOptionEl) {
                    console.error('The number option was not correctly added');
                }
            },
        }, {
            content: "Check the resulting snippet",
            trigger: "iframe .s_website_form_field.s_website_form_custom.s_website_form_required" +
                        ":has(label:contains('State'))" +
                        ":has(select[required]:hidden)" +
                        ":has(.s_website_form_select_item:contains('Belgium'))" +
                        ":has(.s_website_form_select_item:contains('France'))" +
                        ":has(.s_website_form_select_item:contains('Canada'))" +
                        ":has(.s_website_form_select_item:contains('44 - UK'))" +
                        ":not(:has(.s_website_form_select_item:contains('Germany')))",
            run: function () {},
        },

        ...addExistingField('attachment_ids', 'file', 'Invoice Scan'),

        {
            content: "Insure the history step of the editor is not checking for unbreakable",
            trigger: 'iframe #wrapwrap',
            run: () => {
                const wysiwyg = $('iframe:not(.o_ignore_in_tour)').contents().find('#wrapwrap').data('wysiwyg');
                wysiwyg.odooEditor.historyStep(true);
            },
        },
        // Edit the submit button using linkDialog.
        {
            content: "Click submit button to show edit popover",
            trigger: 'iframe .s_website_form_send',
        }, {
            content: "Click on Edit Link in Popover",
            trigger: 'iframe .o_edit_menu_popover .o_we_edit_link',
        }, {
            content: "Check that no URL field is suggested",
            trigger: '#toolbar:has(#url_row:hidden)',
            run: () => null,
        }, {
            content: "Change button's style",
            trigger: '.dropdown:has([name="link_style_color"]) > button',
            run: () => {
                $('.dropdown:has([name="link_style_color"]) > button').click();
                $('[data-value="secondary"]').click();
                $('.dropdown:has([name="link_style_shape"]) > button').click();
                $('[data-value="rounded-circle"]').click();
                $('.dropdown:has([name="link_style_size"]) > button').click();
                $('[data-value="sm"]').click();
            },
        }, {
            content: "Check the resulting button",
            trigger: 'iframe .s_website_form_send.btn.btn-sm.btn-secondary.rounded-circle',
            run: () => null,
        },
        // Add a default value to a auto-fillable field.
        {
            content: 'Select the name field',
            trigger: 'iframe .s_website_form_field:eq(0)',
        }, {
            content: 'Set a default value to the name field',
            trigger: 'we-input[data-attribute-name="value"] input',
            run: 'text John Smith',
        },

        // Add two fields: the 1st one's visibility is tied to the 2nd one
        // being set, and the 2nd one is autopopulated. As a result, both
        // should be visible by default.
        ...addCustomField("char", "text", "field A", false, {visibility: CONDITIONALVISIBILITY}),
        ...addCustomField("char", "text", "field B", false),
        ...selectFieldByLabel("field A"),
        ...selectButtonByData('data-set-visibility-dependency="field B"'),
        ...selectButtonByData('data-select-data-attribute="set"'),
        ...selectFieldByLabel("field B"),
        {
            content: "Insert default value",
            trigger: 'we-input[data-attribute-name="value"] input',
            run: "text prefilled",
        },
        {
            content: "Save the page",
            trigger: "button[data-action=save]",
        },
        {
            content: 'Verify value attribute and property',
            extra_trigger: 'iframe body:not(.editor_enable)',
            trigger: 'iframe .s_website_form_field:eq(0) input[value="John Smith"]:propValue("Mitchell Admin")',
        },
        {
            content: 'Verify that phone field is still auto-fillable',
            trigger: 'iframe .s_website_form_field input[data-fill-with="phone"]:propValue("+1 555-555-5555")',
        },
        // Check that the resulting form behavior is correct.
        {
            content: "Check that field B prefill text is set",
            trigger: `iframe ${triggerFieldByLabel("field B")}:has(input[value="prefilled"])`,
            run: () => null, // it's a check
        }, {
            content: "Check that field A is visible",
            trigger: `iframe .s_website_form:has(${triggerFieldByLabel("field A")}:visible)`,
            run: () => null, // it's a check
        },
        // A) Check that if we edit again and save again the default value is
        // not deleted.
        // B) Add a 3rd field. Field A's visibility is tied to field B being set,
        // field B is autopopulated and its visibility is tied to field C being
        // set, and field C is empty.
        ...wTourUtils.clickOnEditAndWaitEditMode(),
        {
            content: 'Edit the form',
            trigger: 'iframe .s_website_form_field:eq(0) input',
            run: 'click',
        },
        ...addCustomField("char", "text", "field C", false),
        ...selectFieldByLabel("field B"),
        ...selectButtonByText(CONDITIONALVISIBILITY),
        ...selectButtonByData('data-set-visibility-dependency="field C"'),
        ...selectButtonByData('data-select-data-attribute="set"'),
        {
            content: 'Save the page',
            trigger: 'button[data-action=save]',
            run: 'click',
        },

        // Check that the resulting form behavior is correct.
        {
            content: 'Verify that the value has not been deleted',
            extra_trigger: 'iframe body:not(.editor_enable)',
            trigger: 'iframe .s_website_form_field:eq(0) input[value="John Smith"]',
        }, {
            content: "Check that fields A and B are not visible and that field B's prefill text is still set",
            trigger: "iframe .s_website_form" +
                `:has(${triggerFieldByLabel("field A")}:not(:visible))` +
                `:has(${triggerFieldByLabel("field B")}` +
                `:has(input[value="prefilled"]):not(:visible))`,
            run: () => null, // it's a check
        }, {
            content: "Type something in field C",
            trigger: `iframe ${triggerFieldByLabel("field C")} input`,
            run: "text Sesame",
        }, {
            content: "Check that fields A and B are visible",
            trigger: `iframe .s_website_form:has(${triggerFieldByLabel("field B")}:visible)` +
                `:has(${triggerFieldByLabel("field A")}:visible)`,
            run: () => null, // it's a check
        },

        // Have field A's visibility tied to field B containing something,
        // while field B's visibility is also tied to another field.
        ...wTourUtils.clickOnEditAndWaitEditMode(),
        ...selectFieldByLabel("field A"),
        {
            content: "Verify that the form editor appeared",
            trigger: ".o_we_customize_panel .snippet-option-WebsiteFormEditor",
            run: () => null,
        },
        ...selectButtonByData('data-select-data-attribute="contains"'),
        {
            content: "Tie the visibility of field A to field B containing 'peek-a-boo'",
            trigger: "we-input[data-name=hidden_condition_additional_text] input",
            run: "text peek-a-boo",
        },
        ...wTourUtils.clickOnSave(),

        // Check that the resulting form works and does not raise an error.
         {
            content: "Write anything in C",
            trigger: `iframe ${triggerFieldByLabel("field C")} input`,
            run: "text Mellon",
        }, {
            content: "Check that field B is visible, but field A is not",
            trigger: `iframe .s_website_form:has(${triggerFieldByLabel("field B")}:visible)` +
                `:has(${triggerFieldByLabel("field A")}:not(:visible))`,
            run: () => null, // it's a check
        }, {
            content: "Insert 'peek-a-boo' in field B",
            trigger: `iframe ${triggerFieldByLabel("field B")} input`,
            run: "text peek-a-boo",
        }, {
            content: "Check that field A is visible",
            trigger: `iframe .s_website_form:has(${triggerFieldByLabel("field A")}:visible)`,
            run: () => null, // it's a check
        },
        ...wTourUtils.clickOnEditAndWaitEditMode(),
        {
            content: 'Click on the submit button',
            trigger: 'iframe .s_website_form_send',
            run: 'click',
        },
        {
            content: 'Change the Recipient Email',
            trigger: '[data-field-name="email_to"] input',
            run: 'text test@test.test',
        },
        ...addCustomField("char", "text", "''", false),
        ...addCustomField("char", "text", '""', false),
        ...addCustomField("char", "text", "``", false),
        {
            content: 'Save the page',
            trigger: 'button[data-action=save]',
            run: 'click',
        },
        {
            content: 'Verify that the recipient email has been saved',
            trigger: 'iframe body:not(.editor_enable)',
            // We have to this that way because the input type = hidden.
            extra_trigger: 'iframe form:has(input[name="email_to"][value="test@test.test"])',
        },
    ]);

    function editContactUs(steps) {
        return [
            {
                content: "Select the contact us form by clicking on an input field",
                trigger: 'iframe .s_website_form input',
                extra_trigger: '#oe_snippets .oe_snippet_thumbnail',
                run: 'click',
            },
            ...steps,
            {
                content: 'Save the page',
                trigger: 'button[data-action=save]',
            },
            {
                content: 'Wait for reload',
                trigger: 'body:not(.editor_enable)',
            },
        ];
    }

    wTourUtils.registerWebsitePreviewTour('website_form_contactus_edition_with_email', {
        url: '/contactus',
        edition: true,
        test: true,
    }, editContactUs([
        {
            content: 'Change the Recipient Email',
            trigger: '[data-field-name="email_to"] input',
            run: 'text test@test.test',
        },
    ]));
    wTourUtils.registerWebsitePreviewTour('website_form_contactus_edition_no_email', {
        url: '/contactus',
        edition: true,
        test: true,
    }, editContactUs([
        {
            content: "Change a random option",
            trigger: '[data-set-mark] input',
            run: 'text_blur **',
        },
    ]));

    wTourUtils.registerWebsitePreviewTour('website_form_conditional_required_checkboxes', {
        test: true,
        url: '/',
        edition: true,
    }, [
        // Create a form with two checkboxes: the second one required but
        // invisible when the first one is checked. Basically this should allow
        // to have: both checkboxes are visible by default but the form can
        // only be sent if one of the checkbox is checked.
        {
            content: "Add the form snippet",
            trigger: '#oe_snippets .oe_snippet:has(.s_website_form) .oe_snippet_thumbnail',
            run: 'drag_and_drop iframe #wrap',
        }, {
            content: "Select the form by clicking on an input field",
            extra_trigger: 'iframe .s_website_form_field',
            trigger: 'iframe section.s_website_form input',
            run: function (actions) {
                actions.auto();

                // The next steps will be about removing non essential required
                // fields. For the robustness of the test, check that amount
                // of field stays the same.
                const requiredFields = this.$anchor.closest('[data-snippet]').find('.s_website_form_required');
                if (requiredFields.length !== NB_NON_ESSENTIAL_REQUIRED_FIELDS_IN_DEFAULT_FORM) {
                    console.error('The amount of required fields seems to have changed');
                }
            },
        },
        ...((function () {
            const steps = [];
            for (let i = 0; i < NB_NON_ESSENTIAL_REQUIRED_FIELDS_IN_DEFAULT_FORM; i++) {
                steps.push({
                    content: "Select required field to remove",
                    trigger: 'iframe .s_website_form_required .s_website_form_input',
                });
                steps.push({
                    content: "Remove required field",
                    trigger: 'iframe .oe_overlay .oe_snippet_remove',
                });
            }
            return steps;
        })()),
        ...addCustomField('boolean', 'checkbox', 'Checkbox 1', false),
        ...addCustomField('boolean', 'checkbox', 'Checkbox 2', true, {visibility: CONDITIONALVISIBILITY}),
        {
            content: "Open condition item select",
            trigger: 'we-select[data-name="hidden_condition_opt"] we-toggler',
        }, {
            content: "Choose first checkbox as condition item",
            trigger: 'we-button[data-set-visibility-dependency="Checkbox 1"]',
        }, {
            content: "Open condition comparator select",
            trigger: 'we-select[data-attribute-name="visibilityComparator"] we-toggler',
        }, {
            content: "Choose 'not equal to' comparator",
            trigger: 'we-button[data-select-data-attribute="!selected"]',
        }, {
            content: 'Save the page',
            trigger: 'button[data-action=save]',
        },

        // Check that the resulting form behavior is correct
        {
            content: "Wait for page reload",
            trigger: 'iframe body:not(.editor_enable) [data-snippet="s_website_form"]',
            run: function (actions) {
                // The next steps will be about removing non essential required
                // fields. For the robustness of the test, check that amount
                // of field stays the same.
                const essentialFields = this.$anchor.find('.s_website_form_model_required');
                if (essentialFields.length !== ESSENTIAL_FIELDS_VALID_DATA_FOR_DEFAULT_FORM.length) {
                    console.error('The amount of model-required fields seems to have changed');
                }
            },
        },
        ...essentialFieldsForDefaultFormFillInSteps,
        {
            content: 'Try sending empty form',
            trigger: 'iframe .s_website_form_send',
        }, {
            content: 'Check the form could not be sent',
            trigger: 'iframe #s_website_form_result.text-danger',
            run: () => null,
        }, {
            content: 'Check the first checkbox',
            trigger: 'iframe input[type="checkbox"][name="Checkbox 1"]',
        }, {
            content: 'Check the second checkbox is now hidden',
            trigger: 'iframe .s_website_form:has(input[type="checkbox"][name="Checkbox 2"]:not(:visible))',
            run: () => null,
        }, {
            content: 'Try sending the form',
            trigger: 'iframe .s_website_form_send',
        }, {
            content: "Check the form was sent (success page without form)",
            trigger: 'iframe body:not(:has([data-snippet="s_website_form"])) .fa-check-circle',
            run: () => null,
        }, {
            content: "Go back to the form",
            trigger: 'iframe a.navbar-brand.logo',
        },
        ...essentialFieldsForDefaultFormFillInSteps,
        {
            content: 'Check the second checkbox',
            trigger: 'iframe input[type="checkbox"][name="Checkbox 2"]',
        }, {
            content: 'Try sending the form again',
            trigger: 'iframe .s_website_form_send',
        }, {
            content: "Check the form was again sent (success page without form)",
            trigger: 'iframe body:not(:has([data-snippet="s_website_form"])) .fa-check-circle',
            run: () => null,
        }
    ]);

    return {};
});
;

/**************************************************************************
*  Filepath: /website/static/tests/tours/website_form_editor_frontend.js  *
*  Lines: 214                                                             *
**************************************************************************/
odoo.define('@website/../tests/tours/website_form_editor_frontend', ['@web/core/registry', 'web.rpc'], async function (require) {
'use strict';
let __exports = {};
/** @odoo-module **/
const { registry } = require("@web/core/registry");
const rpc = require('web.rpc');

registry.category("web_tour.tours").add("website_form_editor_tour_submit", {
    test: true,
    steps: [
    {
        content:  "Try to send the form with some required fields not filled in",
        extra_trigger:  "form[data-model_name='mail.mail']" +
                        "[data-success-page='/contactus-thank-you']" +
                        ":has(.s_website_form_field:has(label:contains('Your Name')):has(input[type='text'][name='name'][required]))" +
                        ":has(.s_website_form_field:has(label:contains('Your Email')):has(input[type='email'][name='email_from'][required]))" +
                        ":has(.s_website_form_field:has(label:contains('Your Question')):has(textarea[name='description'][required]))" +
                        ":has(.s_website_form_field:has(label:contains('Subject')):has(input[type='text'][name='subject'][required]))" +
                        ":has(.s_website_form_field:has(label:contains('Test Date')):has(input[type='text'][name='date'][required]))" +
                        ":has(.s_website_form_field:has(label:contains('Awesome Label')):hidden)" +
                        ":has(.s_website_form_field:has(label:contains('Your Message')):has(textarea[name='body_html'][required]))" +
                        ":has(.s_website_form_field:has(label:contains('Products')):has(input[type='checkbox'][name='Products'][value='Iphone'][required]))" +
                        ":has(.s_website_form_field:has(label:contains('Products')):has(input[type='checkbox'][name='Products'][value='Galaxy S'][required]))" +
                        ":has(.s_website_form_field:has(label:contains('Products')):has(input[type='checkbox'][name='Products'][value='Xperia'][required]))" +
                        ":has(.s_website_form_field:has(label:contains('Products')):has(input[type='checkbox'][name='Products'][value='Wiko Stairway'][required]))" +
                        ":has(.s_website_form_field:has(label:contains('Service')):has(input[type='radio'][name='Service'][value='After-sales Service']:not([required])))" +
                        ":has(.s_website_form_field:has(label:contains('Service')):has(input[type='radio'][name='Service'][value='Invoicing Service']:not([required])))" +
                        ":has(.s_website_form_field:has(label:contains('Service')):has(input[type='radio'][name='Service'][value='Development Service']:not([required])))" +
                        ":has(.s_website_form_field:has(label:contains('Service')):has(input[type='radio'][name='Service'][value='Management Service']:not([required])))" +
                        ":has(.s_website_form_field:has(label:contains('State')):has(select[name='State'][required]:has(option[value='Belgium'])))" +
                        ":has(.s_website_form_field.s_website_form_required:has(label:contains('State')):has(select[name='State'][required]:has(option[value='France'])))" +
                        ":has(.s_website_form_field:has(label:contains('State')):has(select[name='State'][required]:has(option[value='Canada'])))" +
                        ":has(.s_website_form_field:has(label:contains('Invoice Scan')))" +
                        ":has(.s_website_form_field:has(input[name='email_to'][value='test@test.test']))",
        trigger:  ".s_website_form_send"
    },
    {
        content:  "Check if required fields were detected and complete the Subject field",
        extra_trigger:  "form:has(#s_website_form_result.text-danger)" +
                        ":has(.s_website_form_field:has(label:contains('Your Name')):not(.o_has_error))" +
                        ":has(.s_website_form_field:has(label:contains('Email')).o_has_error)" +
                        ":has(.s_website_form_field:has(label:contains('Your Question')).o_has_error)" +
                        ":has(.s_website_form_field:has(label:contains('Subject')).o_has_error)" +
                        ":has(.s_website_form_field:has(label:contains('Test Date')).o_has_error)" +
                        ":has(.s_website_form_field:has(label:contains('Your Message')).o_has_error)" +
                        ":has(.s_website_form_field:has(label:contains('Products')).o_has_error)" +
                        ":has(.s_website_form_field:has(label:contains('Service')):not(.o_has_error))" +
                        ":has(.s_website_form_field:has(label:contains('State')):not(.o_has_error))" +
                        ":has(.s_website_form_field:has(label:contains('Invoice Scan')):not(.o_has_error))",
        trigger:  "input[name=subject]",
        run:      "text Jane Smith"
    },
    {
        content:  "Update required field status by trying to Send again",
        trigger:  ".s_website_form_send"
    },
    {
        content:  "Check if required fields were detected and complete the Message field",
        extra_trigger:  "form:has(#s_website_form_result.text-danger)" +
                        ":has(.s_website_form_field:has(label:contains('Your Name')):not(.o_has_error))" +
                        ":has(.s_website_form_field:has(label:contains('Email')).o_has_error)" +
                        ":has(.s_website_form_field:has(label:contains('Your Question')).o_has_error)" +
                        ":has(.s_website_form_field:has(label:contains('Subject')):not(.o_has_error))" +
                        ":has(.s_website_form_field:has(label:contains('Test Date')).o_has_error)" +
                        ":has(.s_website_form_field:has(label:contains('Your Message')).o_has_error)" +
                        ":has(.s_website_form_field:has(label:contains('Products')).o_has_error)" +
                        ":has(.s_website_form_field:has(label:contains('Service')):not(.o_has_error))" +
                        ":has(.s_website_form_field:has(label:contains('State')):not(.o_has_error))" +
                        ":has(.s_website_form_field:has(label:contains('Invoice Scan')):not(.o_has_error))",
        trigger:  "textarea[name=body_html]",
        run:      "text A useless message"
    },
    {
        content:  "Update required field status by trying to Send again",
        trigger:  ".s_website_form_send"
    },
    {
        content:  "Check if required fields was detected and check a product. If this fails, you probably broke the cleanForSave.",
        extra_trigger:  "form:has(#s_website_form_result.text-danger)" +
                        ":has(.s_website_form_field:has(label:contains('Your Name')):not(.o_has_error))" +
                        ":has(.s_website_form_field:has(label:contains('Email')).o_has_error)" +
                        ":has(.s_website_form_field:has(label:contains('Your Question')).o_has_error)" +
                        ":has(.s_website_form_field:has(label:contains('Subject')):not(.o_has_error))" +
                        ":has(.s_website_form_field:has(label:contains('Test Date')).o_has_error)" +
                        ":has(.s_website_form_field:has(label:contains('Your Message')):not(.o_has_error))" +
                        ":has(.s_website_form_field:has(label:contains('Products')).o_has_error)" +
                        ":has(.s_website_form_field:has(label:contains('Service')):not(.o_has_error))" +
                        ":has(.s_website_form_field:has(label:contains('State')):not(.o_has_error))" +
                        ":has(.s_website_form_field:has(label:contains('Invoice Scan')):not(.o_has_error))",
        trigger:  "input[name=Products][value='Wiko Stairway']"
    },
    {
        content:  "Complete Date field",
        trigger:  ".s_website_form_datetime [data-toggle='datetimepicker']",
    },
    {
        content:  "Check another product",
        trigger:  "input[name='Products'][value='Xperia']"
    },
    {
        content:  "Check a service",
        trigger:  "input[name='Service'][value='Development Service']"
    },
    {
        content:  "Complete Your Name field",
        trigger:  "input[name='name']",
        run:      "text chhagan"
    },
    {
        content:  "Complete Email field",
        trigger:  "input[name=email_from]",
        run:      "text test@mail.com"
    },
    {
        content: "Complete Subject field",
        trigger: 'input[name="subject"]',
        run: 'text subject',
    },
    {
        content:  "Complete Your Question field",
        trigger:  "textarea[name='description']",
        run:      "text magan"
    },
    {
        content: "Check if conditional field is visible, it shouldn't.",
        trigger: "body",
        run: function () {
            const style = window.getComputedStyle(this.$anchor[0].getElementsByClassName('s_website_form_field_hidden_if')[0]);
            if (style.display !== 'none') {
                console.error('error This field should be invisible when the name is not odoo');
            }
        }
    },
    {
        content: "Change name input",
        trigger: "input[name='name']",
        run: "text odoo",
    },
    {
        content: "Check if conditional field is visible, it should.",
        trigger: "input[name='email_cc']",
    },
    {
        content: "Select state option",
        trigger: "select[name='State']",
        run: 'text 44 - UK',
    },
    {
        content:  "Send the form",
        trigger:  ".s_website_form_send"
    },
    {
        content:  "Check form is submitted without errors",
        trigger:  "#wrap:has(h1:contains('Thank You!'))"
    }
]});

registry.category("web_tour.tours").add("website_form_editor_tour_results", {
    test: true,
    steps: [
    {
        content: "Check mail.mail records have been created",
        trigger: "body",
        run: function () {
            var mailDef = rpc.query({
                    model: 'mail.mail',
                    method: 'search_count',
                    args: [[
                        ['email_to', '=', 'test@test.test'],
                        ['body_html', 'like', 'A useless message'],
                        ['body_html', 'like', 'Service : Development Service'],
                        ['body_html', 'like', 'State : 44 - UK'],
                        ['body_html', 'like', 'Products : Xperia,Wiko Stairway']
                    ]],
                });
            var success = function(model, count) {
                if (count > 0) {
                    $('body').append('<div id="website_form_editor_success_test_tour_'+model+'"></div>');
                }
            };
            mailDef.then(_.bind(success, this, 'mail_mail'));
        }
    },
    {
        content:  "Check mail.mail records have been created",
        trigger:  "#website_form_editor_success_test_tour_mail_mail"
    }
]});
registry.category("web_tour.tours").add('website_form_contactus_submit', {
    test: true,
    url: '/contactus',
    steps: [
    // As the demo portal user, only two inputs needs to be filled to send
    // the email
    {
        content: "Fill in the subject",
        trigger: 'input[name="subject"]',
    },
    {
        content: 'Fill in the message',
        trigger: 'textarea[name="description"]',
    },
    {
        content: 'Send the form',
        trigger: '.s_website_form_send',
    },
    {
        content: 'Check form is submitted without errors',
        trigger: '#wrap:has(h1:contains("Thank You!"))',
    },
]});

return __exports;
});
;

/*****************************************************************
*  Filepath: /website/static/tests/tours/website_navbar_menu.js  *
*  Lines: 20                                                     *
*****************************************************************/
odoo.define("website.tour.website_navbar_menu", function (require) {
"use strict";

const { registry } = require("@web/core/registry");

registry.category("web_tour.tours").add("website_navbar_menu", {
    test: true,
    url: "/",
    steps: [
    {
        content: "Ensure menus are in DOM",
        trigger: '#top_menu .nav-item a:contains("Test Tour Menu")',
        run: function () {}, // it's a check
    }, {
        content: "Ensure menus loading is done (so they are actually visible)",
        trigger: 'body:not(:has(.o_menu_loading))',
        run: function () {}, // it's a check
    }
]});
});
;

/******************************************************************
*  Filepath: /website/static/tests/tours/website_page_options.js  *
*  Lines: 62                                                      *
******************************************************************/
odoo.define('@website/../tests/tours/website_page_options', ['website.tour_utils'], async function (require) {
'use strict';
let __exports = {};
/** @odoo-module **/

const wTourUtils = require('website.tour_utils');

wTourUtils.registerWebsitePreviewTour('website_page_options', {
    test: true,
    url: '/',
    edition: true,
}, [
    wTourUtils.clickOnSnippet({id: 'o_header_standard', name: 'Header'}),
    wTourUtils.changeOption('TopMenuVisibility', 'we-select:has([data-visibility]) we-toggler'),
    wTourUtils.changeOption('TopMenuVisibility', 'we-button[data-visibility="transparent"]'),
    // It's important to test saving right after changing that option only as
    // this is why this test was made in the first place: the page was not
    // marked as dirty when that option was the only one that was changed.
    ...wTourUtils.clickOnSave(),
    {
        content: "Check that the header is transparent",
        trigger: 'iframe #wrapwrap.o_header_overlay',
        run: () => null, // it's a check
    },
    ...wTourUtils.clickOnEditAndWaitEditMode(),
    wTourUtils.clickOnSnippet({id: 'o_header_standard', name: 'Header'}),
    wTourUtils.changeOption('topMenuColor', 'we-select.o_we_so_color_palette'),
    wTourUtils.changeOption('topMenuColor', 'button[data-color="black-50"]', 'background color', 'bottom', true),
    ...wTourUtils.clickOnSave(),
    {
        content: "Check that the header is in black-50",
        trigger: 'iframe header#top.bg-black-50',
        run: () => null, // it's a check
    },
    ...wTourUtils.clickOnEditAndWaitEditMode(),
    wTourUtils.clickOnSnippet({id: 'o_header_standard', name: 'Header'}),
    wTourUtils.changeOption('TopMenuVisibility', 'we-select:has([data-visibility]) we-toggler'),
    wTourUtils.changeOption('TopMenuVisibility', 'we-button[data-visibility="hidden"]'),
    ...wTourUtils.clickOnSave(),
    {
        content: "Check that the header is hidden",
        trigger: 'iframe #wrapwrap:has(header#top.d-none.o_snippet_invisible)',
        run: () => null, // it's a check
    },
    ...wTourUtils.clickOnEditAndWaitEditMode(),
    {
        content: "Click on 'header' in the invisible elements list",
        trigger: '.o_we_invisible_el_panel .o_we_invisible_entry',
    },
    wTourUtils.clickOnSnippet({id: 'o_footer', name: 'Footer'}),
    wTourUtils.changeOption('HideFooter', 'we-button[data-name="hide_footer_page_opt"] we-checkbox'),
    ...wTourUtils.clickOnSave(),
    {
        content: "Check that the footer is hidden and the header is visible",
        trigger: 'iframe #wrapwrap:has(.o_footer.d-none.o_snippet_invisible)',
        extra_trigger: 'iframe #wrapwrap header#top:not(.d-none)',
        run: () => null, // it's a check
    },
]);

return __exports;
});
;

/************************************************************************
*  Filepath: /website/static/tests/tours/website_snippets_menu_tabs.js  *
*  Lines: 39                                                            *
************************************************************************/
odoo.define('@website/../tests/tours/website_snippets_menu_tabs', ['website.tour_utils'], async function (require) {
'use strict';
let __exports = {};
/** @odoo-module **/

const wTourUtils = require('website.tour_utils');

wTourUtils.registerWebsitePreviewTour("website_snippets_menu_tabs", {
    test: true,
    url: "/",
    edition: true,
}, [
    wTourUtils.goToTheme(),
    {
        content: "Click on the empty 'DRAG BUILDING BLOCKS HERE' area.",
        extra_trigger: 'we-customizeblock-option.snippet-option-ThemeColors',
        trigger: 'iframe main > .oe_structure.oe_empty',
        run: 'click',
    },
    wTourUtils.goToTheme(),
    {
        content: "Verify that the customize panel is not empty.",
        trigger: '.o_we_customize_panel > we-customizeblock-options',
        run: () => null, // it's a check
    },
    {
        content: "Click on the style tab.",
        trigger: '#snippets_menu .o_we_customize_snippet_btn',
    },
    wTourUtils.goToTheme(),
    {
        content: "Verify that the customize panel is not empty.",
        trigger: '.o_we_customize_panel > we-customizeblock-options',
        run: () => null, // it's a check
    },
]);

return __exports;
});
;

/*******************************************************************
*  Filepath: /website/static/tests/tours/website_style_edition.js  *
*  Lines: 51                                                       *
*******************************************************************/
odoo.define("website.tour.website_style_edition", function (require) {
"use strict";

const wTourUtils = require("website.tour_utils");

const TARGET_FONT_SIZE = 30;

const checkFontSize = function (actions) {
    const style = actions.tip_widget.el.ownerDocument.defaultView.getComputedStyle(this.$anchor[0]);
    if (style.fontSize !== `${TARGET_FONT_SIZE}px`) {
        console.error(`Expected the font-size to be equal to ${TARGET_FONT_SIZE}px but found ${style.fontSize} instead`);
    }
};

wTourUtils.registerWebsitePreviewTour("website_style_edition", {
    test: true,
    url: '/',
    edition: true,
}, [{
    content: "Go to theme options",
    trigger: '.o_we_customize_theme_btn',
}, {
    content: "Change font size",
    trigger: '[data-variable="font-size-base"] input',
    run: `text_blur ${TARGET_FONT_SIZE}`,
}, {
    content: "Check the font size was properly adapted",
    trigger: 'iframe #wrapwrap',
    // Waiting the CSS to be reloaded: the code adds a new assets bundle with
    // a #t=... at the end then removes the old one.
    extra_trigger: 'iframe html:not(:has(link[href$="web.assets_frontend.min.css"]))',
    run: checkFontSize,
},
...wTourUtils.clickOnSave(),
{
    content: "Check the font size is still ok outside of edit mode",
    trigger: 'iframe body:not(.editor_enable) #wrapwrap',
    run: checkFontSize,
},
...wTourUtils.clickOnEditAndWaitEditMode(),
wTourUtils.goToTheme(),
{
    content: "Click on the Background Image selection",
    trigger: '[data-customize-body-bg-type="\'image\'"]:not(.active)',
    extra_trigger: '[data-customize-body-bg-type="NONE"].active',
}, {
    content: "The media dialog should open",
    trigger: '.o_select_media_dialog',
    run: () => {}, // It's a check.
}]);
});
;

/******************************************************************
*  Filepath: /website/static/tests/tours/website_text_edition.js  *
*  Lines: 72                                                      *
******************************************************************/
odoo.define('@website/../tests/tours/website_text_edition', ['website.tour_utils'], async function (require) {
'use strict';
let __exports = {};
/** @odoo-module **/

const wTourUtils = require('website.tour_utils');

const WEBSITE_MAIN_COLOR = '#ABCDEF';

wTourUtils.registerWebsitePreviewTour('website_text_edition', {
    test: true,
    url: '/',
    edition: true,
}, [
    {
        content: "Go to theme options",
        trigger: '.o_we_customize_theme_btn',
    },
    {
        content: "Open colorpicker to change website main color",
        trigger: 'we-select[data-color="o-color-1"] .o_we_color_preview',
    },
    {
        content: "Input the value for the new website main color (also make sure it is independent from the backend)",
        trigger: '.o_hex_input',
        run: `text_blur ${WEBSITE_MAIN_COLOR}`,
    },
    {
        content: "Go to the blocks tab",
        trigger: '.o_we_add_snippet_btn',
    },
    wTourUtils.dragNDrop({id: 's_text_block', name: 'Text'}),
    {
        content: "Click on the text block first paragraph (to auto select)",
        trigger: 'iframe .s_text_block p',
    },
    {
        content: "Open the foreground colorpicker",
        trigger: '#oe-text-color',
    },
    {
        content: "Go to the 'solid' tab",
        trigger: '.o_we_colorpicker_switch_pane_btn[data-target="custom-colors"]',
    },
    {
        content: "Input the website main color explicitly",
        trigger: '.o_hex_input',
        run: `text_blur ${WEBSITE_MAIN_COLOR}`,
    },
    {
        content: "Check that paragraph now uses the main color *class*",
        trigger: 'iframe .s_text_block p',
        run: function (actions) {
            const fontEl = this.$anchor[0].querySelector('font');
            if (!fontEl) {
                console.error("A background color should have been applied");
                return;
            }
            if (fontEl.style.backgroundColor) {
                console.error("The paragraph should not have an inline style background color");
                return;
            }
            if (!fontEl.classList.contains('text-o-color-1')) {
                console.error("The paragraph should have the right background color class");
                return;
            }
        },
    }
]);

return __exports;
});
;

/**********************************************************************************************
*  Filepath: /website/static/src/client_actions/website_preview/website_preview_test_mode.js  *
*  Lines: 18                                                                                  *
**********************************************************************************************/
odoo.define('@website/client_actions/website_preview/website_preview_test_mode', ['web.utils', '@website/client_actions/website_preview/website_preview'], async function (require) {
'use strict';
let __exports = {};
/** @odoo-module **/
const { patch } = require('web.utils');
const { WebsitePreview } = require('@website/client_actions/website_preview/website_preview');

patch(WebsitePreview.prototype, 'website_preview_test_mode', {
    /**
     * @override
     */
    get testMode() {
        return true;
    }
});

return __exports;
});
;

/**************************************************************
*  Filepath: /stock/static/tests/tours/stock_report_tests.js  *
*  Lines: 23                                                  *
**************************************************************/
odoo.define('stock.reports.setup.tour', function (require) {
    "use strict";

    const { registry } = require("@web/core/registry");

    registry.category("web_tour.tours").add('test_stock_route_diagram_report', {
        test: true,
        steps: [
    {
        trigger: '.o_kanban_record',
        extra_trigger:'.breadcrumb',
    },
    {
        trigger: '.nav-item > a:contains("Inventory")',
    },
    {
        trigger: '.btn[id="stock.view_diagram_button"]',
    },
    {
        trigger: 'iframe .o_report_stock_rule',
    },
    ]});
});
;

/***********************************************************************************
*  Filepath: /mail_enterprise/static/tests/tours/mail_channel_expand_test_tour.js  *
*  Lines: 26                                                                       *
***********************************************************************************/
odoo.define('@mail_enterprise/../tests/tours/mail_channel_expand_test_tour', ['@web/core/registry'], async function (require) {
'use strict';
let __exports = {};
/** @odoo-module **/

const { registry } = require("@web/core/registry");

/**
 * This tour depends on data created by python test in charge of launching it.
 * It is not intended to work when launched from interface. It is needed to test
 * an action (action manager) which is not possible to test with QUnit.
 * @see mail_enterprise/tests/test_mail_channel_expand.py
 */
registry.category("web_tour.tours").add('mail_enterprise/static/tests/tours/mail_channel_expand_test_tour.js', {
    test: true,
    steps: [{
    content: "Click on chat window header expand button to open channel in Discuss",
    trigger: '.o_ChatWindow:has(.o_ChatWindowHeaderView_name:contains("test-mail-channel-expand-tour")) .o_ChatWindowHeaderView_commandExpand',
}, {
    content: "Check that first message of #test-mail-channel-expand-tour is shown in Discuss app",
    trigger: '.o_DiscussView .o_MessageView_content:contains("test-message-mail-channel-expand-tour")',
    run: () => {},
}]});

return __exports;
});
;

/******************************************************************************************
*  Filepath: /account_accountant/static/tests/tours/account_dashboard_setup_bar_tests.js  *
*  Lines: 19                                                                              *
******************************************************************************************/
odoo.define('account_accountant.dashboard.setup.tour', function (require) {
"use strict";

require('account.dashboard.setup.tour');
require("web.legacy_tranlations_loaded");
const { _t } = require('web.core');
const { registry } = require("@web/core/registry");

const { steps } = registry.category("web_tour.tours").get("account_render_report");
const accountMenuClickIndex = steps.findIndex(step => step.id === 'account_menu_click');

steps.splice(accountMenuClickIndex, 1, {
    trigger: '.o_app[data-menu-xmlid="account_accountant.menu_accounting"]',
    position: 'bottom',
}, {
    trigger: `a:contains(${_t("Customer Invoices")})`,
});

});
;

/***********************************************************************
*  Filepath: /account_accountant/static/tests/tours/reconciliation.js  *
*  Lines: 94                                                           *
***********************************************************************/
odoo.define('account.tour_bank_statement_reconciliation', function(require) {
'use strict';

const { registry } = require("@web/core/registry");

registry.category("web_tour.tours").add('bank_statement_reconciliation', {
        test: true,
        // Go to the reconciliation page of the statement: "BNK/2014/001"
        steps: [
        // The first line, 'line1' (350.0) should automatically have been
        // reconciled with with 'out_invoice_1' (100.0) and 'out_invoice_2' (250.0).

        // 'line2' should be matched for partial reconciliation with 'in_invoice_1' (-1175.0).

        {
            content: "Open the receivable/payable tab for 'line2'",
            extra_trigger: '.o_reconciliation_line:first[data-mode="inactive"]',
            trigger: '.o_reconciliation_line:nth-child(1) .cell_label:contains("line2")',
        },
        {
            content: "Check the line has been added to the propositions",
            trigger: '.o_reconciliation_line:nth-child(1) .accounting_view .line_amount:contains("500.00")',
        },
        {
            content: "Reconcile 'line2' with 'in_invoice_1'",
            trigger: '.o_reconciliation_line:nth-child(1) .o_reconcile:visible',
        },

        // Reconciliation of 'line3' (-180.0) having no partner.
        // Set 'partner_b', then reconcile with 'in_invoice_2' (-180.0).

        {
            content: "Open the receivable/payable tab for 'line3'",
            extra_trigger: '.o_reconciliation_line:first[data-mode="match_rp"]',
            trigger: '.o_reconciliation_line:nth-child(1) .cell_label:contains("line3")',
            run: 'click',
        },
        {
            content: "Search 'partner_b'",
            extra_trigger: '.o_reconciliation_line:nth-child(1)[data-mode="match_rp"]',
            trigger: '.o_reconciliation_line:nth-child(1) .o_field_many2one[name="partner_id"] input',
            run: 'text partner_b'
        },
        {
            content: "Select 'partner_b' ",
            extra_trigger: '.ui-autocomplete:visible li:eq(1):contains(Create)',
            trigger: '.ui-autocomplete:visible li:contains("partner_b")',
        },
        {
            content: "Open the receivable/payable tab for 'line3'",
            extra_trigger: '.o_reconciliation_line:first[data-mode="match_rp"]',
            trigger: '.o_reconciliation_line:nth-child(1) .cell_label:contains("line3")'
        },
        {
            content: "Search for 'in_invoice_2'",
            extra_trigger: '.o_reconciliation_line:nth-child(1) .match .cell_label:contains("BILL"):not(:contains("partner_b"))',
            trigger: '.o_reconciliation_line:nth-child(1) .match .match_controls .filter',
            run: 'text 180'
        },
        {
            content: "Select the line corresponding to 'in_invoice_2'",
            extra_trigger: '.o_reconciliation_line:nth-child(1) .match tr:only-child',
            trigger: '.o_reconciliation_line:nth-child(1) .o_notebook .cell_left:contains("180.00")'
        },
        {
            content: "Reconcile 'line3' with 'in_invoice_2'",
            trigger: '.o_reconciliation_line:nth-child(1) .o_reconcile:visible',
        },

        // Reconciliation of 'line4' (900.0).
        // Create a write-off line manually.

        {
            content: "Open the manual tab for 'line4'",
            extra_trigger: '.o_reconciliation_line:nth-child(1) .cell_label:contains("line4")',
            trigger: '.o_reconciliation_line:nth-child(1) .o_notebook .nav-link[href*="notebook_page_create"]'
        },
        {
            content: "Enter the write-off account",
            trigger: '.o_reconciliation_line:nth-child(1) .o_field_many2one[name="account_id"] input',
            run: 'text 151000'
        },
        {
            content: "Select the first matched account",
            trigger: '.ui-autocomplete:visible li:last:contains(151000)',
        },
        {
            content: "Reconcile 'line4'",
            trigger: '.o_reconciliation_line:nth-child(1) .o_reconcile:visible',
        },
    ]
});

});
;

/************************************************************************
*  Filepath: /account_accountant/static/tests/tours/tax_group_tests.js  *
*  Lines: 20                                                            *
************************************************************************/
odoo.define('@account_accountant/../tests/tours/tax_group_tests', ['web_tour.tour'], async function (require) {
'use strict';
let __exports = {};
/** @odoo-module */

const tour = require('web_tour.tour');

const { steps } = tour.tours.account_tax_group;

const accountMenuClickIndex = steps.findIndex(step => step.id === 'account_menu_click');

steps.splice(accountMenuClickIndex, 1, 
    {
        trigger: '.o_app[data-menu-xmlid="account_accountant.menu_accounting"]',
        content: "Go to Accounting",
    }
);

return __exports;
});
;

/******************************************************************************
*  Filepath: /account_accountant/static/tests/tours/test_tour_bank_rec_ui.js  *
*  Lines: 611                                                                 *
******************************************************************************/
odoo.define('@account_accountant/../tests/tours/test_tour_bank_rec_ui', ['@web/core/registry', '@web_tour/js/tour_step_utils'], async function (require) {
'use strict';
let __exports = {};
/** @odoo-module **/

const { registry } = require("@web/core/registry");
const { stepUtils } = require("@web_tour/js/tour_step_utils");

registry.category("web_tour.tours").add('account_accountant_bank_rec_widget_ui',
    {
        url: '/web',
        steps: [
        stepUtils.showAppsMenuItem(),
        ...stepUtils.goToAppSteps('account_accountant.menu_accounting', "Open the accounting module"),

        // Open the widget. The first line should be selected by default.
        {
            content: "Open the bank reconciliation widget",
            extra_trigger: ".breadcrumb",
            trigger: "button.btn-primary[name='action_open_reconcile']",
        },
        {
            content: "'line1' should be selected and form mounted",
            extra_trigger: "div[name='lines_widget'] td[field='name']:contains('line1')",
            trigger: ".o_bank_rec_selected_st_line:contains('line1')",
            run: () => {},
        },
        // Select line2. It should remain selected when returning using the breadcrumbs.
        {
            content: "select 'line2'",
            extra_trigger: ".o_bank_rec_st_line:contains('line3')",
            trigger: ".o_bank_rec_st_line:contains('line2')",
        },
        {
            content: "'line2' should be selected",
            trigger: ".o_bank_rec_selected_st_line:contains('line2')",
            run: () => {},
        },
        {
            content: "View an invoice",
            trigger: "button.btn-secondary[name='action_open_business_doc']:eq(1)",
        },
        {
            content: "Breadcrumb back to Bank Reconciliation from INV/2019/00002",
            trigger: ".breadcrumb-item:contains('Bank Reconciliation')",
            extra_trigger: ".breadcrumb-item:contains('INV/2019/00002')",
            run: "click"
        },
        {
            content: "'line2' should be selected after returning",
            trigger: ".o_bank_rec_selected_st_line:contains('line2')",
            extra_trigger: ".o_bank_rec_st_line:contains('line1')",
        },
        {
            content: "'line2' form mounted",
            extra_trigger: "div[name='lines_widget'] td[field='name']:contains('line2')",
            trigger: ".o_bank_rec_selected_st_line:contains('line2')",
        },
        // Keep AML search, and prepared entry (lines_widget) when changing tabs, using breadcrumbs, and view switcher
        {
            content: "AMLs list has both invoices",
            extra_trigger: "div.bank_rec_widget_form_amls_list_anchor table.o_list_table tr:nth-child(3) td[name='move_id']:contains('INV/2019/00001')",
            trigger: "div.bank_rec_widget_form_amls_list_anchor table.o_list_table tr:nth-child(2) td[name='move_id']:contains('INV/2019/00002')",
            run: () => {},
        },
        {
            content: "Search for INV/2019/00001",
            extra_trigger: "a.active[name='amls_tab']",
            trigger: "div.bank_rec_widget_form_amls_list_anchor .o_searchview_input",
            run: "text INV/2019/00001",
        },
        {
            content: "Select the Journal Entry search option from the dropdown",
            trigger: ".o_searchview_autocomplete li:contains(Journal Entry)",
        },
        {
            content: "AMLs list only displays one invoice",
            trigger: "div.bank_rec_widget_form_amls_list_anchor table.o_list_table tr:nth-child(1) td[name='move_id']:contains('INV/2019/00001')",
            run: () => {},
        },
        {
            content: "Select 'manual_operations_tab'",
            trigger: "a[name='manual_operations_tab']",
        },
        {
            content: "Select 'amls_tab'",
            extra_trigger: "a.active[name='manual_operations_tab']",
            trigger: "a[name='amls_tab']",
        },
        {
            content: "AMLs list contains the search facet, and one invoice - select it",
            extra_trigger: "div.bank_rec_widget_form_amls_list_anchor .o_searchview_facet:nth-child(2) .o_facet_value:contains('INV/2019/00001')",
            trigger: "div.bank_rec_widget_form_amls_list_anchor table.o_list_table tr:nth-child(1) td[name='move_id']:contains('INV/2019/00001')",
            run: "click"
        },
        {
            content: "Check INV/2019/00001 is well marked as selected",
            extra_trigger: "div.bank_rec_widget_form_amls_list_anchor table.o_list_table tr.o_rec_widget_list_selected_item td[name='move_id']:contains('INV/2019/00001')",
            trigger: "div.bank_rec_widget_form_amls_list_anchor table.o_list_table tr.o_rec_widget_list_selected_item td[name='move_id']:contains('INV/2019/00001')",
            run: function() {},
        },
        {
            content: "View an invoice",
            trigger: "button.btn-secondary[name='action_open_business_doc']:nth-child(1)",
        },
        {
            content: "Breadcrumb back to Bank Reconciliation from INV/2019/00001",
            trigger: ".breadcrumb-item:contains('Bank Reconciliation')",
            extra_trigger: ".breadcrumb-item:contains('INV/2019/00001')",
        },
        {
            content: "Check INV/2019/00001 is selected and still contains the search facet",
            extra_trigger: "div.bank_rec_widget_form_amls_list_anchor .o_searchview_facet:nth-child(2) .o_facet_value:contains('INV/2019/00001')",
            trigger: "div.bank_rec_widget_form_amls_list_anchor table.o_list_table tr.o_rec_widget_list_selected_item td[name='move_id']:contains('INV/2019/00001')",
            run: () => {},
        },
        // Search should remove some lines, select the first unmatched record, and persist when returning with breadcrumbs
        {
            content: "Search for line2",
            extra_trigger: "a.active[name='amls_tab']",
            trigger: "div.o_kanban_view .o_searchview_input",
            run: "text line2",
        },
        {
            content: "Select the Transaction search option from the dropdown",
            trigger: ".o_searchview_autocomplete li:contains(Transaction)",
        },
        {
            content: "'line2' should be selected",
            trigger: ".o_bank_rec_st_line:last():contains('line2')",
            extra_trigger: "div[name='lines_widget'] td[field='name']:contains('line2')",
            run: () => {}
        },
        {
            content: "Nothing has changed: INV/2019/00001 is selected and still contains the search facet",
            extra_trigger: "div.bank_rec_widget_form_amls_list_anchor .o_searchview_facet:nth-child(2) .o_facet_value:contains('INV/2019/00001')",
            trigger: "div.bank_rec_widget_form_amls_list_anchor table.o_list_table tr.o_rec_widget_list_selected_item td[name='move_id']:contains('INV/2019/00001')",
            run: () => {},
        },
        {
            content: "Switch to list view",
            extra_trigger: ".o_switch_view.o_kanban.active",
            trigger: ".o_switch_view.o_list",
        },
        {
            content: "Switch back to kanban",
            extra_trigger: ".o_switch_view.o_list.active",
            trigger: ".o_switch_view.o_kanban",
        },
        {
            content: "Remove the kanban filter for line2",
            trigger: ".o_kanban_view .o_searchview_facet:nth-child(3) .o_facet_remove",
        },
        {
            content: "Nothing has changed: INV/2019/00001 is still selected and contains the search facet",
            extra_trigger: "div.bank_rec_widget_form_amls_list_anchor table.o_list_table tr:nth-child(1) td[name='move_id']:contains('INV/2019/00001')",
            trigger: "div.bank_rec_widget_form_amls_list_anchor table.o_list_table tr.o_rec_widget_list_selected_item td[name='move_id']:contains('INV/2019/00001')",
            run: () => {},
        },
        // AML Search Facet is removed, and lines_widget reset when changing line
        {
            content: "selecting 'line1' should reset the AML search filter ",
            extra_trigger: ".o_bank_rec_st_line:contains('line3')",
            trigger: ".o_bank_rec_st_line:contains('line1')",
        },
        {
            content: "select 'line2' again",
            extra_trigger: ".o_bank_rec_selected_st_line:contains('line1')",
            trigger: ".o_bank_rec_st_line:contains('line2')",
        },
        {
            content: "Bank Suspense Account is back",
            extra_trigger: "div[name='lines_widget'] td[field='name']:contains('line2')",
            trigger: "div[name='lines_widget'] .o_bank_rec_auto_balance_line",
            run: () => {},
        },
        {
            content: "AML Search Filter has been reset",
            trigger: ".o_list_view .o_facet_value:last-child:contains('Customer/Vendor')",
            run: () => {},
        },
        // Test statement line selection when using the pager
        {
            content: "Click Pager",
            trigger: ".o_pager_value:first()",
        },
        {
            content: "Change pager to display lines 1-2",
            trigger: "input.o_pager_value",
            run: "text 1-2",
        },
        {
            content: "Last St Line is line2",
            extra_trigger: ".o_pager_value:contains('1-2')",
            trigger: ".o_bank_rec_st_line:last():contains('line2')",
            run: () => {},
        },
        {
            content: "Page Next",
            trigger: ".o_pager_next:first()",
        },
        {
            content: "Statement line3 is selected",
            extra_trigger: ".o_pager_value:contains('3-3')",
            trigger: ".o_bank_rec_selected_st_line:contains('line3')",
            run: () => {},
        },
        {
            content: "Page to beginning",
            trigger: ".o_pager_next:first()",
        },
        {
            content: "Statement line1 is selected",
            extra_trigger: "div[name='lines_widget'] td[field='name']:contains('line1')",
            trigger: ".o_bank_rec_selected_st_line:contains('line1')",
            run: () => {},
        },
        // HTML buttons
        {
            content: "Mount an invoice",
            trigger: "div.bank_rec_widget_form_amls_list_anchor table.o_list_table td[name='move_id']:contains('INV/2019/00003')",
        },
        {
            content: "Select the mounted invoice line and check the strikethrough value",
            extra_trigger: "div[name='lines_widget']:has(.text-decoration-line-through:contains('$ 2,000.00'))",
            trigger: ".o_field_bank_rec_widget_form_lines_widget tr.o_data_row:last() td[field='name']:contains('INV/2019/00003')",
        },
        {
            content: "Fully Paid button",
            extra_trigger: "a.active[name='manual_operations_tab']",
            trigger: "button[name='button_form_apply_suggestion']",
        },
        {
            content: "Check the remainder",
            trigger: ".o_field_bank_rec_widget_form_lines_widget tr.o_data_row:contains('Suspense') td[field='debit']:contains('$ 1,000.00')",
            run: () => {},
        },
        {
            content: "Partial Payment",
            extra_trigger: "a.active[name='manual_operations_tab']",
            trigger: "button[name='button_form_apply_suggestion']:contains('partial payment')",
        },
        {
            content: "View Invoice 0003",
            trigger: "button[name='button_form_redirect_to_move_form']"
        },
        {
            content: "Breadcrumb back to Bank Reconciliation from INV/2019/00003",
            trigger: ".breadcrumb-item:contains('Bank Reconciliation')",
            extra_trigger: ".breadcrumb-item:contains('INV/2019/00003')",
        },
        {
            content: "Select the mounted invoice line INV/2019/00003",
            trigger: ".o_field_bank_rec_widget_form_lines_widget tr.o_data_row:last() td[field='name']:contains('INV/2019/00003')",
        },
        // Match Existing entries tab is activated when line is removed
        {
            content: "Remove the invoice",
            extra_trigger: "a.active[name='manual_operations_tab']",
            trigger: ".o_list_record_remove .fa-trash-o",
        },
        {
            content: "amls_tab is activated",
            trigger: "a.active[name='amls_tab']",
            run: () => {},
        },
        {
            content: "Activate Manual Operations to add manual entries",
            trigger: "a[name='manual_operations_tab']",
        },
        {
            content: "add manual entry 1",
            trigger: "input#form_balance",
            run: "text -600.0"
        },
        {
            content: "mount the remaining opening balance line",
            trigger: ".o_field_bank_rec_widget_form_lines_widget tr.o_data_row:contains('Suspense') td[field='credit']:contains('$ 400.00')",
        },
        {
            content: "Remove the manual entry",
            extra_trigger: "input#form_balance:text('-400.00'):focus",
            trigger: ".o_list_record_remove .fa-trash-o",
        },
        {
            content: "amls_tab is activated and auto balancing line is 1000",
            extra_trigger: ".o_field_bank_rec_widget_form_lines_widget tr.o_data_row:contains('Suspense') td[field='credit']:contains('$ 1,000.00')",
            trigger: "a.active[name='amls_tab']",
            run: () => {},
        },
        {
            content: "Mount another invoice",
            trigger: "div.bank_rec_widget_form_amls_list_anchor table.o_list_table td[name='move_id']:contains('INV/2019/00001')",
        },
        // After validating, line1 should disappear & line2 should be selected (due to filters)
        {
            content: "Validate line1",
            extra_trigger: "div.bank_rec_widget_form_amls_list_anchor table.o_list_table tr.o_rec_widget_list_selected_item td[name='move_id']:contains('INV/2019/00001')",
            trigger: "button[name='button_validate']",
        },
        {
            content: "The 'line2' is the first kanban record and is selected",
            extra_trigger: "div[name='lines_widget'] td[field='name']:contains('line2')",
            trigger: ".o_bank_rec_st_line:first():contains('line2')",
            run: () => {},
        },
        // Test Reset, "Matched" badge and double-click
        {
            content: "Remove the kanban filter for 'Not Matched'",
            trigger: ".o_kanban_view .o_searchview_facet:nth-child(2) .o_facet_remove",
        },
        {
            content: "The 'line1' is the first kanban record with line2 selected",
            extra_trigger: "div[name='lines_widget'] td[field='name']:contains('line2')",
            trigger: ".o_bank_rec_st_line:first():contains('line1')",
            run: () => {},
        },
        {
            content: "Mount invoice 2 for line 2",
            trigger: "div.bank_rec_widget_form_amls_list_anchor table.o_list_table td[name='move_id']:contains('INV/2019/00002')",
        },
        {
            content: "Validate line2 with double click",
            extra_trigger: "div.bank_rec_widget_form_amls_list_anchor table.o_list_table tr.o_rec_widget_list_selected_item td[name='move_id']:contains('INV/2019/00002')",
            trigger: "button[name='button_validate']",
            run: "dblclick",
        },
        {
            content: "Click Pager again after line2 is matched",
            extra_trigger: ".o_bank_rec_st_line:contains('line2') .badge.text-bg-success",
            trigger: ".o_pager_value:first()",
        },
        {
            content: "Change pager to display lines 1-3",
            trigger: "input.o_pager_value",
            run: "text 1-3",
        },
        {
            content: "manually select line2 again by clicking it's matched icon",
            extra_trigger: ".o_bank_rec_selected_st_line:contains('line3')",
            trigger: ".badge.text-bg-success:last()",
        },
        {
            content: "Reset line2",
            extra_trigger: "div[name='lines_widget']:not(:has(.fa-trash-o)) td[field='name']:contains('line2')",
            trigger: "button[name='button_reset']",
        },
        {
            content: "amls_tab is activated while still on line2 which doesn't contain a badge",
            extra_trigger: ".o_bank_rec_selected_st_line:contains('line2'):not(:has(div.badge))",
            trigger: "div[name='lines_widget']:has(.fa-trash-o)+.o_notebook a.active[name='amls_tab']",
            run: () => {},
        },
        // Test view_switcher
        {
            content: "Switch to list view",
            extra_trigger: ".o_switch_view.o_kanban.active",
            trigger: ".o_switch_view.o_list",
        },
        {
            content: "Select the first Match Button (line2)",
            extra_trigger: ".btn-secondary:contains('View')",
            trigger: ".btn-secondary:contains('Match')",
        },
        {
            content: "Last St Line is line2",
            extra_trigger: ".o_bank_rec_st_line:last():contains('line2')",
            trigger: ".o_bank_rec_selected_st_line:contains('line2')",
        },
        {
            content: "Button To Check will reconcile since partner is saved on line2",
            trigger: ".btn-secondary:contains('To Check')",
        },
        {
            content: "both badges are visible, trash icon is not, discuss tab is active",
            extra_trigger: ".o_bank_rec_selected_st_line:contains('line2'):has(div.badge:contains('Matched')):has(span.badge:contains('To check'))",
            trigger: "div[name='lines_widget']:not(:has(.fa-trash-o))+.o_notebook a.active[name='discuss_tab']",
            run: () => {},
        },
        {
            content: "Switch to list view",
            extra_trigger: ".o_switch_view.o_kanban.active",
            trigger: ".o_switch_view.o_list",
        },
        {
            content: "Remove the line filter",
            extra_trigger: ".o_switch_view.o_list.active",
            trigger: ".o_searchview_facet:contains('0002') .o_facet_remove",
        },
        {
            content: "Select the first Match Button (line3)",
            extra_trigger: ".o_data_row:contains('line2'):has(.btn-secondary:contains('View'))",
            trigger: ".btn-secondary:contains('Match')",
        },
        // Test Reco Model
        {
            content: "Choose a filter",
            extra_trigger: ".o_bank_rec_st_line:contains('line3')",
            trigger: ".o_filter_menu:first() i",
        },
        {
            content: "Not Matched Filter",
            extra_trigger: ".o-dropdown--menu",
            trigger: ".dropdown-item:contains('Not Matched')",
        },
        {
            content: "reco model dropdown",
            extra_trigger: ".o_switch_view.o_kanban.active",
            trigger: ".bank_rec_reco_model_dropdown i",
        },
        {
            content: "create model",
            extra_trigger: ".o-dropdown--menu",
            trigger: ".dropdown-item:contains('Create model')",
        },
        {
            content: "model name",
            trigger: "input#name",
            run: "text Bank Fees",
        },
        {
            content: "add an account",
            trigger: "a:contains('Add a line')",
        },
        {
            content: "search for bank fees account",
            extra_trigger: "[name='account_id'] input",
            trigger: "[name='account_id'] input",
            run: "text Bank Fees"
        },
        {
            content: "select the bank fees account",
            extra_trigger: ".o-autocomplete--dropdown-menu",
            trigger: ".o-autocomplete--dropdown-item:contains('Bank Fees')",
        },
        {
            content: "Breadcrumb back to Bank Reconciliation from the model",
            extra_trigger: ".breadcrumb-item:contains('New')",
            trigger: ".breadcrumb-item:contains('Bank Reconciliation')",
        },
        {
            content: "Choose Bank Fees Model",
            trigger: ".recon_model_button:contains('Bank Fees')",
        },
        {
            content: "Validate line3",
            extra_trigger: "button[name='button_validate']",
            trigger: "button[name='button_validate']",
            run: "dblclick",
        },
        {
            content: "Rainbow man",
            extra_trigger: ".o_view_nocontent",
            trigger: ".o_reward_rainbow_man",
            run: () => {}
        },
        // Test the next st line is always selected when Not Matched Filter is active
        {
            content: "Remove the kanbans st line filter",
            trigger: ".o_kanban_view .o_searchview_facet:nth-child(2) .o_facet_remove",
        },
        {
            content: "Remove the kanbans 'not matched' filter to reset all lines - use the rainbow man button",
            extra_trigger: ".o_kanban_view .o_searchview:first() .o_searchview_facet:nth-child(2):contains('Not Matched')",
            trigger: "p.btn-primary:contains('All Transactions')",
        },
        {
            content: "Wait for search model change and line3 to appear",
            extra_trigger: ".o_kanban_view .o_searchview:first() .o_searchview_facet:last():contains('Bank')",
            trigger: ".o_bank_rec_st_line:last():contains('line3')",
            run: () => {},
        },
        {
            content: "'line2' should be selected, reset it",
            extra_trigger: ".o_bank_rec_selected_st_line:contains('line2')",
            trigger: "button[name='button_reset']"
        },
        {
            content: "select matched 'line3'",
            trigger: ".o_bank_rec_st_line:contains('line3')",
        },
        {
            content: "'line3' should be selected, reset it",
            extra_trigger: ".o_bank_rec_selected_st_line:contains('line3')",
            trigger: "button[name='button_reset']"
        },
        {
            content: "select matched 'line1'",
            trigger: ".o_bank_rec_st_line:contains('line1')",
        },
        {
            content: "'line1' should be selected, reset it",
            extra_trigger: ".o_bank_rec_selected_st_line:contains('line1')",
            trigger: "button[name='button_reset']"
        },
        {
            content: "Filter Menu",
            extra_trigger: "button[name='button_validate']",
            trigger: ".o_filter_menu:first() i",
        },
        {
            content: "Activate the Not Matched filter",
            extra_trigger: ".o-dropdown--menu",
            trigger: ".dropdown-item:contains('Not Matched')",
        },
        {
            content: "Close the Filter Menu",
            extra_trigger: ".o_searchview_facet:contains('Not Matched')",
            trigger: ".o_filter_menu:first() i",
        },
        {
            content: "select 'line2'",
            extra_trigger: ".o_searchview_facet:contains('Not Matched')",
            trigger: ".o_bank_rec_st_line:contains('line2')",
        },
        {
            content: "Validate 'line2' again",
            extra_trigger: ".o_bank_rec_selected_st_line:contains('line2')",
            trigger: "button[name='button_validate']"
        },
        {
            content: "'line3' should be selected now",
            extra_trigger: ".o_bank_rec_selected_st_line:contains('line3')",
            trigger: ".o_bank_rec_selected_st_line:contains('line3')",
            run: () => {},
        },
        // Test the Balance when changing journal and liquidity line
        stepUtils.toggleHomeMenu(),
        ...stepUtils.goToAppSteps(
            'account_accountant.menu_accounting',
            "Reset back to accounting module"
        ),
        {
            content: "Open the bank reconciliation widget for Bank2",
            extra_trigger: ".breadcrumb",
            trigger: "button.btn-primary[name='action_open_reconcile']:last()",
        },
        {
            content: "Remove the kanbans 'not matched' filter",
            trigger: ".o_kanban_view .o_searchview_facet:nth-child(2) .o_facet_remove",
        },
        {
            content: "Remove the kanban 'journal' filter",
            trigger: ".o_kanban_view .o_searchview_facet:nth-child(1) .o_facet_remove",
        },
        {
            content: "select 'line1' from another journal",
            trigger: ".o_bank_rec_st_line:contains('line1')",
        },
        {
            content: "balance is 3000",
            extra_trigger: ".o_bank_rec_selected_st_line:contains('line1')",
            trigger: ".btn-secondary:contains('$ 3,000.00')",
        },
        {
            content: "Breadcrumb back to Bank Reconciliation from the report",
            trigger: ".breadcrumb-item a:contains('Bank Reconciliation')",
        },
        {
            content: "select 'line4' from this journal",
            trigger: ".o_bank_rec_st_line:contains('line4')",
        },
        {
            content: "balance is $222.22",
            extra_trigger: ".o_bank_rec_selected_st_line:contains('line4')",
            trigger: ".btn-secondary:contains('$ 222.22')",
            run: () => {},
        },
        {
            content: "Select the liquidity line",
            trigger: "tr.o_bank_rec_liquidity_line td[field='debit']",
        },
        {
            content: "Modify the liquidity line amount",
            extra_trigger: "div.tab-pane.active input[id='form_balance']:focus",
            trigger: "div.tab-pane.active input[id='form_balance']",
            run: "text -333.33",
        },
        {
            content: "balance displays $-333.33",
            extra_trigger: ".btn-secondary:contains('$ -333.33')",
            trigger: ".btn-secondary:contains('$ -333.33')",
            run: () => {},
        },
        {
            content: "Modify the label",
            trigger: "div.tab-pane.active input[id='form_name']",
            run: "text Spontaneous Combustion",
        },
        {
            content: "statement line displays combustion and $-333.33",
            extra_trigger: ".o_bank_rec_selected_st_line:contains('Combustion'):contains('$ -333.33')",
            trigger: ".o_bank_rec_selected_st_line:contains('Combustion'):contains('$ -333.33')",
            run: () => {},
        },
        // End
        stepUtils.toggleHomeMenu(),
        ...stepUtils.goToAppSteps(
            'account_accountant.menu_accounting',
            "Reset back to accounting module"
        ),
        {
            content: "check that we're back on the dashboard",
            trigger: 'a:contains("Customer Invoices")',
            run() {},
        }
    ]
});

return __exports;
});
;

/**********************************************************************************
*  Filepath: /account_accountant/static/tests/tours/test_tour_bank_rec_widget.js  *
*  Lines: 188                                                                     *
**********************************************************************************/
odoo.define('@account_accountant/../tests/tours/test_tour_bank_rec_widget', ['@web/core/registry', '@web_tour/js/tour_step_utils'], async function (require) {
'use strict';
let __exports = {};
/** @odoo-module **/

const { registry } = require("@web/core/registry");
const { stepUtils } = require("@web_tour/js/tour_step_utils");


registry.category("web_tour.tours").add('account_accountant_bank_rec_widget',
    {
        test: true,
        url: '/web',
        steps: [
        stepUtils.showAppsMenuItem(),
        ...stepUtils.goToAppSteps('account_accountant.menu_accounting', "Open the accounting module"),

        // Open the widget. The first line should be selected by default.
        {
            content: "Open the bank reconciliation widget",
            extra_trigger: ".breadcrumb",
            trigger: "button.btn-primary[name='action_open_reconcile']",
        },
        {
            content: "The 'line1' should be selected by default",
            extra_trigger: "div[name='lines_widget']",
            trigger: "div[name='lines_widget'] td[field='name']:contains('line1')",
            run: function() {},
        },

        // Test 1: Check the loading of lazy notebook tabs.
        // Check 'amls_tab' (active by default).
        {
            content: "The 'amls_tab' should be active and the inner list view loaded",
            extra_trigger: "div.bank_rec_widget_form_amls_list_anchor table.o_list_table",
            trigger: "a.active[name='amls_tab']",
            run: function() {},
        },
        // Check 'discuss_tab'.
        {
            content: "Click on the 'discuss_tab'",
            extra_trigger: "a.active[name='amls_tab']",
            trigger: "a[name='discuss_tab']",
        },
        {
            content: "The 'discuss_tab' should be active and the chatter loaded",
            extra_trigger: "a.active[name='discuss_tab']",
            trigger: "div.bank_rec_widget_form_discuss_anchor div.o_ChatterContainer",
            run: function() {},
        },
        // Check 'manual_operations_tab'.
        {
            content: "Click on the 'auto_balance' to make the 'manual_operations_tab' visible",
            extra_trigger: "tr.o_bank_rec_auto_balance_line",
            trigger: "tr.o_bank_rec_auto_balance_line td[field='name']",
        },
        {
            content: "The 'manual_operations_tab' should be active",
            trigger: "a.active[name='manual_operations_tab']",
            run: function() {},
        },
        {
            content: "The 'form_name' field should be focus automatically",
            trigger: "div.tab-pane.active input[id='form_name']:focus",
            run: function() {},
        },
        {
            content: "Click on the 'credit' field to change the focus from 'form_name' to 'form_balance'",
            extra_trigger: "tr.o_bank_rec_auto_balance_line",
            trigger: "tr.o_bank_rec_auto_balance_line td[field='credit']",
        },
        {
            content: "Wait to avoid non-deterministic errors on the next step",
            trigger: "tr.o_bank_rec_auto_balance_line td[field='credit']",
            run: function() {},
        },
        {
            content: "The 'form_balance' field should be focus now",
            trigger: "div.tab-pane.active input[id='form_balance']:focus",
            run: function() {},
        },

        // Test 2: Test validation + auto select the next line.
        {
            content: "Click on the 'amls_tab'",
            extra_trigger: "a.active[name='manual_operations_tab']",
            trigger: "a[name='amls_tab']",
        },
        {
            content: "Mount INV/2019/00002",
            extra_trigger: "a.active[name='amls_tab']",
            trigger: "div.bank_rec_widget_form_amls_list_anchor table.o_list_table td[name='move_id']:contains('INV/2019/00002')",
        },
        {
            content: "Check INV/2019/00002 is well marked as selected",
            extra_trigger: "div.bank_rec_widget_form_amls_list_anchor table.o_list_table tr.o_rec_widget_list_selected_item td[name='move_id']:contains('INV/2019/00002')",
            trigger: "div.bank_rec_widget_form_amls_list_anchor table.o_list_table tr.o_rec_widget_list_selected_item td[name='move_id']:contains('INV/2019/00002')",
            run: function() {},
        },
        {
            content: "Remove INV/2019/00002",
            extra_trigger: "div.bank_rec_widget_form_amls_list_anchor table.o_list_table tr.o_rec_widget_list_selected_item td[name='move_id']:contains('INV/2019/00002')",
            trigger: "tr td.o_list_record_remove button",
        },
        {
            content: "Mount INV/2019/00001",
            extra_trigger: "div.bank_rec_widget_form_amls_list_anchor table.o_list_table tr:not(.o_rec_widget_list_selected_item) td[name='move_id']:contains('INV/2019/00002')",
            trigger: "div.bank_rec_widget_form_amls_list_anchor table.o_list_table td[name='move_id']:contains('INV/2019/00001')",
        },
        {
            content: "Validate",
            extra_trigger: "div.bank_rec_widget_form_amls_list_anchor table.o_list_table tr.o_rec_widget_list_selected_item td[name='move_id']:contains('INV/2019/00001')",
            trigger: "button[name='button_validate']",
        },
        {
            content: "The 'line2' is the next not already reconciled line",
            extra_trigger: "div[name='lines_widget'] td[field='name']:contains('line2')",
            trigger: "div[name='lines_widget'] td[field='name']:contains('line2')",
            run: function() {},
        },

        // Test 3: Test manual operations tab.
        {
            content: "Click on 'credit'",
            trigger: "div[name='lines_widget'] td[field='credit']:last",
        },
        {
            content: "The 'manual_operations_tab' should be active now and the auto_balance line mounted in edit",
            trigger: "a.active[name='manual_operations_tab']",
            run: function() {},
        },
        {
            content: "The last line should be selected",
            trigger: "div[name='lines_widget'] tr.o_bank_rec_selected_line",
            run: function() {},
        },
        {
            content: "Search for 'partner_a'",
            trigger: "div[name='form_partner_id'] input",
            run: "text partner_a",
        },
        {
            content: "Select 'partner_a'",
            extra_trigger: ".ui-autocomplete .o_m2o_dropdown_option a:contains('Create')",
            trigger: ".ui-autocomplete:visible li:contains('partner_a')",
        },
        {
            content: "Select the payable account",
            extra_trigger: "tr:not(.o_bank_rec_auto_balance_line) td[field='partner_id']:contains('partner_a')",
            trigger: "button[name='button_form_partner_payable']",
        },
        {
            content: "Enter a tax",
            extra_trigger: "tr:not(.o_bank_rec_auto_balance_line) td[field='account_id']:contains('Payable')",
            trigger: "div[name='form_tax_ids'] input",
            run: "text 15",
        },
        {
            content: "Select 'Tax 15% (Sales)'",
            extra_trigger: ".ui-autocomplete",
            trigger: ".ui-autocomplete:visible li:contains('Sales')",
        },
        {
            content: "Validate",
            extra_trigger: "div[name='lines_widget'] td[field='tax_ids']",
            trigger: "button[name='button_validate']",
        },
        {
            content: "The 'line3' is the next not already reconciled line",
            extra_trigger: "div[name='lines_widget'] td[field='name']:contains('line3')",
            trigger: "div[name='lines_widget'] td[field='name']:contains('line3')",
            run: function() {},
        },
        stepUtils.toggleHomeMenu(),
        ...stepUtils.goToAppSteps(
            'account_accountant.menu_accounting',
            "Reset back to accounting module"
        ),
        {
            content: "check that we're back on the dashboard",
            trigger: 'a:contains("Customer Invoices")',
            run() {}
        }
    ]
});

return __exports;
});
;

/*****************************************************************
*  Filepath: /project/static/tests/tours/personal_stage_tour.js  *
*  Lines: 69                                                     *
*****************************************************************/
odoo.define('@project/../tests/tours/personal_stage_tour', ['@web/core/registry', '@web_tour/js/tour_step_utils'], async function (require) {
'use strict';
let __exports = {};
/** @odoo-module */

const { registry } = require("@web/core/registry");
const { stepUtils } = require("@web_tour/js/tour_step_utils");

registry.category("web_tour.tours").add('personal_stage_tour', {
    test: true,
    url: '/web',
    steps: [stepUtils.showAppsMenuItem(), {
    trigger: '.o_app[data-menu-xmlid="project.menu_main_pm"]',
}, {
    content: "Open Pig Project",
    trigger: '.o_kanban_record:contains("Pig")',
}, {
    // Default is grouped by stage, user should not be able to create/edit a column
    content: "Check that there is no create column",
    trigger: "body:not(.o_column_quick_create)",
    run: function () {},
}, {
    content: "Check that there is no create column",
    trigger: "body:not(.o_column_edit)",
    run: function () {},
}, {
    content: "Check that there is no create column",
    trigger: "body:not(.o_column_delete)",
    run: function () {},
}, {
    content: "Go to my tasks", // My tasks is grouped by personal stage by default
    trigger: 'a[data-menu-xmlid="project.menu_project_management"]',
}, {
    content: "Check that we can create a new stage",
    trigger: '.o_column_quick_create .o_quick_create_folded'
}, {
    content: "Create a new personal stage",
    trigger: 'input.form-control.o_input',
    run: 'text Never',
}, {
    content: "Confirm create",
    trigger: '.o_kanban_add',
}, {
    content: "Check that column exists",
    trigger: '.o_kanban_header:contains("Never")',
    run: function () {},
}, {
    content: 'Open column edit dropdown',
    trigger: '.o_kanban_header:eq(0)',
    run: function () {
        document.querySelector('.o_kanban_config.dropdown .dropdown-toggle').dispatchEvent(new Event('click'));
    },
}, {
    content: "Try editing inbox",
    trigger: ".dropdown-item.o_column_edit",
}, {
    content: "Change title",
    trigger: 'div.o_field_char[name="name"] input',
    run: 'text  (Todo)',
}, {
    content: "Save changes",
    trigger: '.btn-primary:contains("Save")',
}, {
    content: "Check that column was updated",
    trigger: '.o_kanban_header:contains("Todo")',
}]});

return __exports;
});
;

/*************************************************************************
*  Filepath: /project/static/tests/tours/project_burndown_chart_tour.js  *
*  Lines: 85                                                             *
*************************************************************************/
odoo.define('@project/../tests/tours/project_burndown_chart_tour', ['@web/core/registry', '@web_tour/js/tour_step_utils'], async function (require) {
'use strict';
let __exports = {};
/** @odoo-module */

const { registry } = require("@web/core/registry");
const { stepUtils } = require("@web_tour/js/tour_step_utils");

registry.category("web_tour.tours").add('burndown_chart_tour', {
    test: true,
    url: '/web',
    steps: [stepUtils.showAppsMenuItem(), {
    trigger: '.o_app[data-menu-xmlid="project.menu_main_pm"]',
}, {
    content: 'Open "Burndown Chart Test" project menu',
    trigger: '.o_kanban_record:contains("Burndown Chart Test") .o_dropdown_kanban .dropdown-toggle',
}, {
    content: `Open "Burndown Chart Test" project's "Burndown Chart" view`,
    trigger: '.o_kanban_record:contains("Burndown Chart Test") .o_kanban_manage_reporting div[role="menuitem"] a:contains("Burndown Chart")',
}, {
    content: 'The sort buttons are not rendered',
    trigger: '.o_cp_bottom_left:not(:has(.btn-group[role=toolbar][aria-label="Sort graph"]))',
    extra_trigger: '.o_graph_renderer',
}, {
    content: 'Remove the project search "Burndown Chart Test"',
    trigger: '.o_searchview_facet:contains("Burndown Chart Test") .o_facet_remove',
}, {
    content: 'Search Burndown Chart',
    trigger: 'input.o_searchview_input',
    run: `text Burndown`,
}, {
    content: 'Validate search',
    trigger: '.o_searchview_autocomplete .o_menu_item:contains("Project")',
}, {
    content: 'Remove the group by "Date: Month > Stage"',
    trigger: '.o_searchview_facet:contains("Date: Month") .o_facet_remove',
}, {
    content: 'A "The Burndown Chart must be grouped by Date and Stage" notification is shown when trying to remove the group by "Date: Month > Stage"',
    trigger: '.o_notification_manager .o_notification:contains("The Burndown Chart must be grouped by Date and Stage") button.o_notification_close',
}, {
    content: 'Open the group by menu',
    trigger: '.o_group_by_menu button',
}, {
    content: 'The Stage group menu item is invisible',
    trigger: '.o_group_by_menu:not(:has(.o_menu_item:contains("Stage")))',
}, {
    content: 'Open the Date group by sub menu',
    trigger: '.o_group_by_menu button.o_menu_item:contains("Date")',
    run: function () {
        this.$anchor[0].dispatchEvent(new Event('mouseenter'));
    },
}, {
    content: 'Click on the selected Date sub menu',
    trigger: '.o_group_by_menu button.o_menu_item:contains("Date") + * .dropdown-item.selected',
    run: function () {
        this.$anchor[0].dispatchEvent(new Event('click'));
    },
}, {
    content: 'A "The Burndown Chart must be grouped by Date" notification is shown when trying to remove the group by "Date: Month > Stage"',
    trigger: '.o_notification_manager .o_notification:contains("The Burndown Chart must be grouped by Date") button.o_notification_close',
}, {
    content: 'Open the filter menu',
    trigger: '.o_filter_menu button',
}, {
    content: 'Open the Date filter sub menu',
    trigger: '.o_filter_menu button.o_menu_item:contains("Date")',
    run: function () {
        this.$anchor[0].dispatchEvent(new Event('mouseenter'));
    },
}, {
    content: 'Click on the first Date filter sub menu',
    trigger: '.o_filter_menu .o_menu_item:contains("Date") + * .dropdown-item:first-child',
    run: function () {
        this.$anchor[0].dispatchEvent(new Event('click'));
    },
}, {
    content: 'Close the Date filter menu',
    trigger: '.o_graph_renderer',
}, {
    content: 'The comparison menu is not rendered',
    trigger: '.o_search_options:not(:has(.o_comparison_menu))',
}]});

return __exports;
});
;

/******************************************************************
*  Filepath: /project/static/tests/tours/project_sharing_tour.js  *
*  Lines: 122                                                     *
******************************************************************/
odoo.define('@project/../tests/tours/project_sharing_tour', ['@web/core/registry', '@web_tour/js/tour_step_utils'], async function (require) {
'use strict';
let __exports = {};
/** @odoo-module **/

const { registry } = require("@web/core/registry");
const { stepUtils } = require("@web_tour/js/tour_step_utils");

const projectSharingSteps = [...stepUtils.goToAppSteps("project.menu_main_pm", 'Go to the Project App.'), {
    trigger: '.o_kanban_record:contains("Project Sharing") .o_dropdown_kanban .dropdown-toggle',
    content: 'Open the project dropdown.'
}, {
    trigger: '.o_kanban_record:contains("Project Sharing") .dropdown-menu a:contains("Share")',
    content: 'Start editing the project.',
}, {
    trigger: 'div.o_field_radio[name="access_mode"] div.o_radio_item > input[data-value="edit"]',
    content: 'Select "Edit" as Access mode in the "Share Project" wizard.',
}, {
    trigger: '.o_field_many2many_tags_email[name=partner_ids]',
    content: 'Select the user portal as collaborator to the "Project Sharing" project.',
    run: function (actions) {
        actions.text('Georges', this.$anchor.find('input'));
    },
}, {
    trigger: '.ui-autocomplete a.dropdown-item:contains("Georges")',
    in_modal: false,
}, {
    trigger: 'footer > button[name="action_send_mail"]',
    content: 'Confirm the project sharing with this portal user.',
}, {
    trigger: '.o_web_client',
    content: 'Go to project portal view to select the "Project Sharing" project',
    run: function () {
        window.location.href = window.location.origin + '/my/projects';
    },
}, {
    id: 'project_sharing_feature',
    trigger: 'table > tbody > tr a:has(span:contains(Project Sharing))',
    content: 'Select "Project Sharing" project to go to project sharing feature for this project.',
}, {
    trigger: '.o_project_sharing',
    content: 'Wait the project sharing feature be loaded',
    run: function () {},
}, {
    trigger: 'button.o-kanban-button-new',
    content: 'Click "Create" button',
    run: 'click',
}, {
    trigger: '.o_kanban_quick_create .o_field_widget[name="name"] input',
    content: 'Create Task',
    run: 'text Test Create Task',
}, {
    trigger: '.o_kanban_quick_create .o_kanban_edit',
    content: 'Go to the form view of this new task',
}, {
    trigger: 'div[name="stage_id"] div.o_statusbar_status button[aria-checked="false"]:contains(Done)',
    content: 'Change the stage of the task.',
}, {
    trigger: '.o_portal_chatter_composer_input .o_portal_chatter_composer_body textarea',
    content: 'Write a message in the chatter of the task',
    run: 'text I create a new task for testing purpose.',
}, {
    trigger: '.o_portal_chatter_composer_input .o_portal_chatter_composer_body button[name="send_message"]',
    content: 'Send the message',
}, {
    trigger: 'ol.breadcrumb > li.o_back_button > a:contains(Project Sharing)',
    content: 'Go back to the kanban view',
}, {
    trigger: '.o_filter_menu > button',
    content: 'click on filter menu in the search view',
}, {
    trigger: '.o_filter_menu > .dropdown-menu > .dropdown-item:first-child',
    content: 'click on the first item in the filter menu',
}, {
    trigger: '.o_group_by_menu > button',
    content: 'click on group by menu in the search view',
}, {
    trigger: '.o_group_by_menu > .dropdown-menu > .dropdown-item:first-child',
    content: 'click on the first item in the group by menu',
}, {
    trigger: '.o_favorite_menu > button',
    content: 'click on the favorite menu in the search view',
}, {
    trigger: '.o_favorite_menu .o_add_favorite > button',
    content: 'click to "save current search" button in favorite menu',
}, {
    trigger: '.o_filter_menu > button',
    content: 'click on filter menu in the search view',
}, {
    trigger: '.o_filter_menu > .dropdown-menu > .dropdown-item:first-child',
    content: 'click on the first item in the filter menu',
}, {
    trigger: '.o_group_by_menu > button',
    content: 'click on group by menu in the search view',
}, {
    trigger: '.o_group_by_menu > .dropdown-menu > .dropdown-item:first-child',
    content: 'click on the first item in the group by menu',
}, {
    trigger: '.o_favorite_menu > button',
    content: 'click on the favorite menu in the search view',
}, {
    trigger: '.o_favorite_menu .o_add_favorite > button',
    content: 'click to "save current search" button in favorite menu',
}, {
    trigger: 'button.o_switch_view.o_list',
    content: 'Go to the list view',
}];

registry.category("web_tour.tours").add('project_sharing_tour', {
    test: true,
    url: '/web',
    steps: projectSharingSteps });

// The begining of the project sharing feature
const projectSharingStepIndex = projectSharingSteps.findIndex(s => s.id && s.id === 'project_sharing_feature');
registry.category("web_tour.tours").add('portal_project_sharing_tour', {
    test: true,
    url: '/my/projects',
    steps: projectSharingSteps.slice(projectSharingStepIndex, projectSharingSteps.length) });

return __exports;
});
;

/***********************************************************************
*  Filepath: /project/static/tests/tours/project_update_tour_tests.js  *
*  Lines: 186                                                          *
***********************************************************************/
odoo.define('@project/../tests/tours/project_update_tour_tests', ['@web/core/registry', '@web_tour/js/tour_step_utils'], async function (require) {
'use strict';
let __exports = {};
/** @odoo-module **/

const { registry } = require("@web/core/registry");
const { stepUtils } = require("@web_tour/js/tour_step_utils");

function openProjectUpdateAndReturnToTasks(view, viewClass) {
    const legacyViewClass = viewClass.replace("o_", "o_legacy_");
    return [{
            trigger: '.o_project_updates_breadcrumb',
            content: 'Open Project Update from view : ' + view,
            extra_trigger: `.${viewClass}, .${legacyViewClass}`,
        }, {
            trigger: ".o-kanban-button-new",
            content: "Create a new update from project task view : " + view,
            extra_trigger: '.o_project_update_kanban_view',
        }, {
            trigger: "button.o_form_button_cancel",
            content: "Discard project update from project task view : " + view,
        }, {
            trigger: ".o_switch_view.o_list",
            content: "Go to list of project update from view " + view,
        }, {
            trigger: '.o_back_button',
            content: 'Go back to the task view : ' + view,
            // extra_trigger: '.o_list_view', // FIXME: [XBO] uncomment it when the sample data will be displayed after discarding the creation of a project update record.
        },
    ];
}

registry.category("web_tour.tours").add('project_update_tour', {
    test: true,
    url: '/web',
    steps: [stepUtils.showAppsMenuItem(), {
    trigger: '.o_app[data-menu-xmlid="project.menu_main_pm"]',
}, {
    trigger: '.o-kanban-button-new',
    extra_trigger: '.o_project_kanban',
    width: 200,
}, {
    trigger: '.o_project_name input',
    run: 'text New Project'
}, {
    trigger: '.o_open_tasks',
    run: function (actions) {
        actions.auto('.modal:visible .btn.btn-primary');
    },
}, {
    trigger: ".o_kanban_project_tasks .o_column_quick_create .input-group",
    run: function (actions) {
        actions.text("New", this.$anchor.find("input"));
    },
}, {
    trigger: ".o_kanban_project_tasks .o_column_quick_create .o_kanban_add",
    auto: true,
}, {
    trigger: ".o_kanban_project_tasks .o_column_quick_create .input-group",
    extra_trigger: '.o_kanban_group',
    run: function (actions) {
        actions.text("Done", this.$anchor.find("input"));
    },
}, {
    trigger: ".o_kanban_project_tasks .o_column_quick_create .o_kanban_add",
    auto: true,
}, {
    trigger: '.o-kanban-button-new',
    extra_trigger: '.o_kanban_group:eq(0)'
}, {
    trigger: '.o_kanban_quick_create div.o_field_char[name=display_name] input',
    extra_trigger: '.o_kanban_project_tasks',
    run: 'text New task'
}, {
    trigger: '.o_kanban_quick_create .o_kanban_add',
    extra_trigger: '.o_kanban_project_tasks'
}, {
    trigger: '.o-kanban-button-new',
    extra_trigger: '.o_kanban_group:eq(0)'
}, {
    trigger: '.o_kanban_quick_create div.o_field_char[name=display_name] input',
    extra_trigger: '.o_kanban_project_tasks',
    run: 'text Second task'
}, {
    trigger: '.o_kanban_quick_create .o_kanban_add',
    extra_trigger: '.o_kanban_project_tasks'
}, {
    trigger: '.o_kanban_group:nth-child(2) .o_kanban_header',
    run: function () {
        document.querySelector('.o_kanban_group:nth-child(2) .o_kanban_config.dropdown .dropdown-toggle').dispatchEvent(new Event('click'));
    }
}, {
    trigger: ".dropdown-item.o_column_edit",
}, {
    trigger: ".o_field_widget[name=fold] input",
}, {
    trigger: ".modal-footer button",
}, {
    trigger: ".o_kanban_record .oe_kanban_content",
    extra_trigger: '.o_kanban_project_tasks',
    run: "drag_and_drop .o_kanban_group:eq(1) ",
}, {
    trigger: ".o_project_updates_breadcrumb",
    content: 'Open Updates'
}, {
    trigger: ".o_add_milestone a",
    content: "Add a first milestone"
}, {
    trigger: "div.o_field_widget[name=name] input",
    run: 'text New milestone'
}, {
    trigger: "div[name=deadline] .datetimepicker-input",
    run: 'text 12/12/2099'
}, {
    trigger: ".modal-footer .o_form_button_save"
}, {
    trigger: ".o_add_milestone a",
}, {
    trigger: "div.o_field_widget[name=name] input",
    run: 'text Second milestone'
}, {
    trigger: "div[name=deadline] .datetimepicker-input",
    run: 'text 12/12/2022'
}, {
    trigger: ".modal-footer .o_form_button_save"
}, {
    trigger: ".o_rightpanel_milestone:eq(1) .o_milestone_detail",
}, {
    trigger: "div[name=deadline] .datetimepicker-input",
    run: 'text 12/12/2100'
}, {
    trigger: ".modal-footer .o_form_button_save"
}, {
    trigger: ".o-kanban-button-new",
    content: "Create a new update"
}, {
    trigger: "div.o_field_widget[name=name] input",
    run: 'text New update'
}, {
    trigger: ".o_form_button_save"
}, {
    trigger: ".o_field_widget[name='description'] h1:contains('Activities')",
    run: function () {},
}, {
    trigger: ".o_field_widget[name='description'] h3:contains('Milestones')",
    run: function () {},
}, {
    trigger: ".o_field_widget[name='description'] div[name='milestone'] ul li:contains('(12/12/2099 => 12/12/2100)')",
    run: function () {},
}, {
    trigger: ".o_field_widget[name='description'] div[name='milestone'] ul li span:contains('(due 12/12/2022)')",
    run: function () {},
}, {
    trigger: ".o_field_widget[name='description'] div[name='milestone'] ul li span:contains('(due 12/12/2100)')",
    run: function () {},
}, {
    trigger: '.o_back_button',
    content: 'Go back to the kanban view the project',
}, {
    trigger: '.o_switch_view.o_list',
    content: 'Open List View of Project Updates',
}, {
    trigger: '.o_back_button',
    content: 'Go back to the kanban view the project',
    extra_trigger: '.o_list_view',
}, {
    trigger: '.o_switch_view.o_graph',
    content: 'Open Graph View of Tasks',
}, ...openProjectUpdateAndReturnToTasks("Graph", "o_graph_view"), {
    trigger: '.o_switch_view.o_list',
    content: 'Open List View of Tasks',
    extra_trigger: '.o_graph_view',
}, ...openProjectUpdateAndReturnToTasks("List", "o_list_view"), {
    trigger: '.o_switch_view.o_pivot',
    content: 'Open Pivot View of Tasks',
}, ...openProjectUpdateAndReturnToTasks("Pivot", "o_pivot_view"), {
    trigger: '.o_switch_view.o_calendar',
    content: 'Open Calendar View of Tasks',
}, ...openProjectUpdateAndReturnToTasks("Calendar", "o_calendar_view"), {
    trigger: '.o_switch_view.o_activity',
    content: 'Open Activity View of Tasks',
}, ...openProjectUpdateAndReturnToTasks("Activity", "o_activity_view"),
]});

return __exports;
});
;

/******************************************************************
*  Filepath: /web_studio/static/tests/legacy/tours/web_studio.js  *
*  Lines: 1363                                                    *
******************************************************************/
odoo.define('web_studio.tests.tour', function (require) {
"use strict";

const localStorage = require('web.local_storage');
const { registry } = require("@web/core/registry");

const { randomString } = require('web_studio.utils');

let createdAppString = null;
let createdMenuString = null;

registry.category("web_tour.tours").add('web_studio_tests_tour', {
    url: "/web",
    test: true,
    steps: [{
    // open studio
    trigger: '.o_main_navbar .o_web_studio_navbar_item',
    extra_trigger: ".o_home_menu_background",
}, {
    trigger: '.o_web_studio_new_app',
}, {
    // the next steps are here to create a new app
    trigger: '.o_web_studio_app_creator_next',
}, {
    trigger: '.o_web_studio_app_creator_name > input',
    run: 'text ' + (createdAppString = randomString(6)),
}, {
    trigger: '.o_web_studio_app_creator_next.is_ready',
}, {
    trigger: '.o_web_studio_menu_creator > input',
    run: 'text ' + (createdMenuString = randomString(6)),
}, {
    trigger: '.o_web_studio_app_creator_next.is_ready',
}, {
    // disable chatter in model configurator, we'll test adding it on later
    trigger: 'input[name="use_mail"]',
}, {
    // disable company if visible, otherwise it might make the test uncertain
    trigger: 'body',
    run: () => {
        const $input = $('input[name="use_company"]');
        if ($input) {
            $input.click();
        }
    }
}, {
    trigger: '.o_web_studio_model_configurator_next',
}, {
    // toggle the home menu outside of studio and come back in studio
    extra_trigger: '.o_menu_toggle:not(.o_menu_toggle_back)',
    trigger: '.o_web_studio_leave > a.btn',
    timeout: 60000, /* previous step reloads registry, etc. - could take a long time */
}, {
    extra_trigger: `.o_web_client:not(.o_in_studio)`,  /* wait to be out of studio */
    trigger: '.o_menu_toggle:not(.o_menu_toggle_back)',
    timeout: 60000, /* previous step reloads registry, etc. - could take a long time */
}, {
    trigger: '.o_main_navbar .o_web_studio_navbar_item',
    extra_trigger: '.o_home_menu_background',
}, {
    // open the app creator and leave it
    trigger: '.o_web_studio_new_app',
}, {
    extra_trigger: '.o_web_studio_app_creator',
    trigger: '.o_web_studio_leave > a.btn',
}, {
    // go back to the previous app
    trigger: '.o_home_menu',
    run: () => {
        window.dispatchEvent(new KeyboardEvent('keydown', {
            bubbles: true,
            key: 'Escape',
        }));
    },
}, {
    // this should open the previous app outside of studio
    extra_trigger: `.o_web_client:not(.o_in_studio) .o_menu_brand:contains(${createdAppString})`,
    // go back to the home menu
    trigger: '.o_menu_toggle:not(.o_menu_toggle_back)',
}, {
    trigger: 'input.o_search_hidden',
    // Open Command Palette
    run: 'text ' + createdMenuString[0],
}, {
    trigger: '.o_command_palette_search input',
    run: 'text ' + "/" + createdMenuString,
}, {
    // search results should have been updated
    extra_trigger: `.o_command.focused:contains(${createdAppString} / ${createdMenuString})`,
    trigger: '.o_command_palette',
    // Close the Command Palette
    run: () => {
        window.dispatchEvent(new KeyboardEvent('keydown', {
            key: 'Escape',
        }));
    },
}, {
    // enter Studio
    trigger: '.o_main_navbar .o_web_studio_navbar_item',
}, {
    // edit an app
    extra_trigger: '.o_studio_home_menu',
    trigger: `.o_app[data-menu-xmlid*="studio"]:contains(${createdAppString})`,
    run: function () {
        // We can't emulate a hover to display the edit icon
        const editIcon = this.$anchor[0].querySelector('.o_web_studio_edit_icon');
        editIcon.style.visibility = 'visible';
        editIcon.click();
    },
}, {
    // design the icon
    // TODO: we initially tested this (change an app icon) at the end but a
    // long-standing bug (KeyError: ir.ui.menu.display_name, caused by a registry
    // issue with multiple workers) on runbot prevent us from doing it. It thus have
    // been moved at the beginning of this test to avoid the registry to be reloaded
    // before the write on ir.ui.menu.
    trigger: '.o_web_studio_selector:eq(0)',
}, {
    trigger: '.o_web_studio_palette > .o_web_studio_selector:first',
}, {
    trigger: '.modal-footer .btn.btn-primary',
}, {
    // click on the created app
    trigger: `.o_app[data-menu-xmlid*="studio"]:contains(${createdAppString})`,
}, {
    // create a new menu
    trigger: '.o_main_navbar .o_web_edit_menu',
}, {
    trigger: 'footer.modal-footer .js_add_menu',
}, {
    trigger: 'input[name="menuName"]',
    run: 'text ' + (createdMenuString = randomString(6)),
}, {
    trigger: 'div.o_web_studio_menu_creator_model_choice input[value="existing"]',
}, {
    trigger: 'div.o_web_studio_menu_creator_model .o_field_many2one_selection input',
    run: 'text a',
}, {
    trigger: '.o_field_many2one_selection .o-autocomplete--dropdown-menu > li > a:not(:has(.fa-spin))',
}, {
    extra_trigger: ".o_field_many2one_selection :not(.o-autocomplete dropdown-menu)",
    trigger: '.o_web_studio_add_menu_modal button:contains(Confirm):not(".disabled")',
}, {
    extra_trigger: ":not(.o_inactive_modal) .o-web-studio-appmenu-editor",
    trigger: '.o-web-studio-appmenu-editor button:contains(Confirm):not(".disabled")',
}, {
    // check that the Studio menu is still there
    extra_trigger: '.o_web_studio_menu',
    // switch to form view
    trigger: '.o_web_studio_views_icons > a[title="Form"]',
}, {
    // wait for the form editor to be rendered because the sidebar is the same
    extra_trigger: '.o_web_studio_form_view_editor',
    // unfold 'Existing Fieldqs' section
    trigger: '.o_web_studio_existing_fields_header',
}, {
    // add an new field
    trigger: '.o_web_studio_sidebar .o_web_studio_field_type_container:eq(1) .o_web_studio_field_char',
    run: 'drag_and_drop .o_web_studio_form_view_editor .o_inner_group',
}, {
    // click on the field
    trigger: '.o_web_studio_form_view_editor .o_wrap_label:first label',
    // when it's there
    extra_trigger: 'input[data-type="field_name"]',
}, {
    // rename the label
    trigger: '.o_web_studio_sidebar_content.o_display_field input[name="string"]',
    run: 'text My Coucou Field',
}, {
    // verify that the field name has changed and change it
    trigger: 'input[data-type="field_name"][value="my_coucou_field"]',
    run: 'text coucou',
    // the rename operation (/web_studio/rename_field + /web_studio/edit_view)
    // takes a while and sometimes reaches the default 10s timeout
    timeout: 20000,
}, {
    // click on "Add" tab
    trigger: '.o_web_studio_sidebar .o_web_studio_new',
    // the rename operation (/web_studio/rename_field + /web_studio/edit_view)
    // takes a while and sometimes reaches the default 10s timeout
    timeout: 20000,
    async run() {
        // During the rename, the UI is blocked. When the rpc returns, the UI is
        // unblocked and the sidebar is re-rendered. Without this, the step is
        // sometimes executed exactly when the sidebar is about to be replaced,
        // and it doesn't work. We thus here wait for 1s to ensure that the
        // sidebar has been re-rendered, before going further.
        // note1: there's nothing in the DOM that could be used to determine that
        // we're ready to continue (the sidebar is just replaced by itself, same state)
        // note2: ideally, it should work whenever we click, but with the current
        // architecture of studio, it's really hard to fix. Hopefully, when studio
        // will be converted to owl, this should no longer be an issue.
        await new Promise((r) => setTimeout(r, 1000));
        $(".o_web_studio_sidebar .o_web_studio_new").click();
    }
}, {
    // add a new field
    trigger: '.o_web_studio_sidebar .o_web_studio_field_type_container:eq(1) .o_web_studio_field_char',
    run: 'drag_and_drop .o_web_studio_form_view_editor .o_inner_group',
}, {
    // rename the field with the same name
    trigger: 'input[data-type="field_name"]',
    run: 'text coucou',
}, {
    // an alert dialog should be opened
    trigger: '.modal-footer > button:first',
}, {
    // rename the label
    trigger: '.o_web_studio_sidebar_content.o_display_field input[name="string"]',
    run: 'text COUCOU',
}, {
    // verify that the field name has changed (post-fixed by _1)
    extra_trigger: 'input[data-type="field_name"][value="coucou_1"]',
    trigger: '.o_web_studio_sidebar .o_web_studio_new',
    // the rename operation (/web_studio/rename_field + /web_studio/edit_view)
    // takes a while and sometimes reaches the default 10s timeout
    timeout: 20000,
}, {
    // add a monetary field --> create a currency field
    trigger: '.o_web_studio_sidebar .o_web_studio_field_type_container:eq(1) .o_web_studio_field_monetary',
    run: 'drag_and_drop .o_web_studio_form_view_editor .o_inner_group',
}, {
    trigger: '.modal-footer .btn.btn-primary',
}, {
    // verify that the currency field is in the view
    extra_trigger: '.o_web_studio_form_view_editor .o_wrap_label label:contains("Currency")',
    trigger: '.o_web_studio_sidebar .o_web_studio_new',
    async run() {
        // When adding a new field, the UI is blocked. When the rpc returns, the UI is
        // unblocked and the sidebar is re-rendered. Without this, the step is
        // sometimes executed exactly when the sidebar is about to be replaced,
        // and it doesn't work. We thus here wait for 1s to ensure that the
        // sidebar has been re-rendered, before going further.
        // note1: there's nothing in the DOM that could be used to determine that
        // we're ready to continue (the sidebar is just replaced by itself, same state)
        // note2: ideally, it should work whenever we click, but with the current
        // architecture of studio, it's really hard to fix. Hopefully, when studio
        // will be converted to owl, this should no longer be an issue.
        await new Promise((r) => setTimeout(r, 1000));
        $(".o_web_studio_sidebar .o_web_studio_new").click();
    }
}, {
    // add a monetary field
    trigger: '.o_web_studio_sidebar .o_web_studio_field_type_container:eq(1) .o_web_studio_field_monetary',
    run: 'drag_and_drop (.o_web_studio_form_view_editor .o_inner_group:first .o_web_studio_hook:eq(1))',
}, {
    // verify that the monetary field is in the view
    extra_trigger: '.o_web_studio_form_view_editor .o_wrap_label:eq(1) label:contains("New Monetary")',
    // switch the two first fields
    trigger: '.o_web_studio_form_view_editor .o_inner_group:first .o-draggable:eq(1)',
    run: 'drag_and_drop_native .o_inner_group:first .o_web_studio_hook:first',
}, {
    // click on "Add" tab
    trigger: '.o_web_studio_sidebar .o_web_studio_new',
}, {
    // verify that the fields have been switched
    extra_trigger: '.o_web_studio_form_view_editor .o_wrap_label:eq(0) label:contains("New Monetary")',
    // add a m2m field
    trigger: '.o_web_studio_sidebar .o_web_studio_field_type_container:eq(1) .o_web_studio_field_many2many',
    run: 'drag_and_drop .o_inner_group:first .o_web_studio_hook:first',
}, {
    // type something in the modal
    trigger: '.o_field_many2one[name="model"] input',
    run: 'text a',
}, {
    // select the first model
    trigger: '.ui-autocomplete > .ui-menu-item:first > a',
    in_modal: false,
}, {
    trigger: 'button:contains(Confirm)',
}, {
    // select the m2m to set its properties
    trigger: '.o_wrap_input:has(.o_field_many2many)',
    timeout: 15000,  // creating M2M relations can take some time...
}, {
    // change the `widget` attribute
    trigger: '.o_web_studio_sidebar select[name="widget"]',
    run: function () {
        this.$anchor.val('many2many_tags').trigger('change');
    },
}, {
    // use colors on the m2m tags
    trigger: '.o_web_studio_sidebar label[for="option_color_field"]',
}, {
    // add a statusbar
    trigger: '.o_web_studio_statusbar_hook',
}, {
    trigger: '.modal-footer .btn.btn-primary',
}, {
    trigger: '.o_statusbar_status',
}, {
    // verify that a default value has been set for the statusbar
    trigger: '.o_web_studio_sidebar select[name="default_value"]:contains(First Status)',
}, {
    trigger: '.o_web_studio_views_icons a[title=Form]',
}, {
    // verify Chatter can be added after changing view to form
    extra_trigger: '.o_web_studio_add_chatter',
    // edit action
    trigger: '.o_web_studio_menu .o_menu_sections li a:contains(Views)',
}, {
    // edit form view
    trigger: '.o_web_studio_view_category .o_web_studio_view_type[data-type="form"] .o_web_studio_thumbnail',
}, {
    // verify Chatter can be added after changing view to form
    extra_trigger: '.o_web_studio_add_chatter',
    // switch in list view
    trigger: '.o_web_studio_menu .o_web_studio_views_icons a[title="List"]',
}, {
    // wait for the list editor to be rendered because the sidebar is the same
    extra_trigger: '.o_web_studio_list_view_editor',
    // unfold 'Existing Fieldqs' section
    trigger: '.o_web_studio_existing_fields_header',
}, {
    // add an existing field (display_name)
    trigger: '.o_web_studio_sidebar .o_web_studio_field_type_container:eq(1) .o_web_studio_field_char',
    run: 'drag_and_drop .o_web_studio_list_view_editor th.o_web_studio_hook:first',
}, {
    // verify that the field is correctly named
    extra_trigger: '.o_web_studio_list_view_editor th:contains("COUCOU")',
    // leave Studio
    trigger: '.o_web_studio_leave > a.btn',
}, {
    // come back to the home menu to check if the menu data have changed
    extra_trigger: '.o_web_client:not(.o_in_studio)',
    trigger: '.o_menu_toggle:not(.o_menu_toggle_back)',
}, {
    trigger: 'input.o_search_hidden',
    // Open Command Palette
    run: 'text ' + createdMenuString[0],
}, {
    trigger: '.o_command_palette_search input',
    run: 'text ' + "/" + createdMenuString,
}, {
    // search results should have been updated
    extra_trigger: `.o_command.focused:contains(${createdAppString} / ${createdMenuString})`,
    trigger: '.o_command_palette',
    // Close the Command Palette
    run: () => {
        window.dispatchEvent(new KeyboardEvent('keydown', {
            bubbles: true,
            key: 'Escape',
        }));
    },
}, {
    trigger: '.o_home_menu',
    // go back again to the app (using keyboard)
    run: () => {
        window.dispatchEvent(new KeyboardEvent('keydown', {
            bubbles: true,
            key: 'Escape',
        }));
    },
}, {
    // wait to be back in the list view
    extra_trigger: '.o_list_view',
    // re-open studio
    trigger: '.o_web_studio_navbar_item',
}, {
    // modify the list view
    trigger: '.o_web_studio_sidebar .o_web_studio_view'
}, {
    //select field you want to sort and based on that sorting will be applied on List view
    trigger: '.o_web_studio_sidebar .o_web_studio_sidebar_select #sort_field',
    run: function () {
        $('#sort_field option:eq(1)').attr('selected', 'selected');
        $('#sort_field option:eq(1)').change();
    }
}, {
    //change order of sorting, Select order and change it
    trigger: '.o_web_studio_sidebar .o_web_studio_sidebar_select #sort_order',
    run: function () {
        $('#sort_order option:eq(1)').attr('selected', 'selected');
        $('#sort_order option:eq(1)').change();
    }
}, {
    // edit action
    trigger: '.o_web_studio_menu .o_menu_sections li a:contains("Views")',
}, {
    // add a kanban
    trigger: '.o_web_studio_view_category .o_web_studio_view_type.o_web_studio_inactive[data-type="kanban"] .o_web_studio_thumbnail',
}, {
    // add a dropdown
    trigger: '.o_dropdown_kanban.o_web_studio_add_dropdown',
}, {
    trigger: '.modal-footer .btn.btn-primary',
}, {
    // select the dropdown for edition
    trigger: '.o_dropdown_kanban:not(.o_web_studio_add_dropdown)',
}, {
    // enable "Set Cover" feature
    trigger: '.o_web_studio_sidebar input[name=set_cover]',
}, {
    trigger: '.modal-footer .btn.btn-primary',
}, {
    // edit action
    trigger: '.o_web_studio_menu .o_menu_sections li a:contains("Views")',
}, {
    // check that the kanban view is now active
    extra_trigger: '.o_web_studio_view_category .o_web_studio_view_type:not(.o_web_studio_inactive)[data-type="kanban"]',
    // add an activity view
    trigger: '.o_web_studio_view_category .o_web_studio_view_type.o_web_studio_inactive[data-type="activity"] .o_web_studio_thumbnail',
}, {
    extra_trigger: '.o_activity_view',
    // edit action
    trigger: '.o_web_studio_menu .o_menu_sections li a:contains("Views")',
    timeout: 20000, // activating a view takes a while and sometimes reaches the default 10s timeout
}, {
    // add a graph view
    trigger: '.o_web_studio_view_category .o_web_studio_view_type.o_web_studio_inactive[data-type="graph"] .o_web_studio_thumbnail',
}, {
    extra_trigger: '.o_graph_renderer',
    trigger: '.o_web_studio_menu .o_menu_sections li a:contains("Views")',
}, {
    extra_trigger: '.o_web_studio_views',
    // edit the search view
    trigger: '.o_web_studio_view_category .o_web_studio_view_type[data-type="search"] .o_web_studio_thumbnail',
}, {
    extra_trigger: '.o_web_studio_search_view_editor',
    trigger: '.o_menu_toggle:not(.o_menu_toggle_back)',
}, {
    trigger: '.o_web_studio_home_studio_menu .dropdown-toggle',
}, {
    // export all modifications
    trigger: '.o_web_studio_export',
}, {
    // click on the created app
    trigger: '.o_app[data-menu-xmlid*="studio"]:last',
}, {
    // switch to form view
    trigger: '.o_web_studio_views_icons > a[title="Form"]',
}, {
    extra_trigger: '.o_web_studio_form_view_editor',
    // click on the view tab
    trigger: '.o_web_studio_view',
}, {
    // click on the restore default view button
    trigger: '.o_web_studio_restore',
}, {
    // click on the ok button
    trigger: '.modal-footer .btn.btn-primary',
}, {
    // checks that the field doesn't exist anymore
    extra_trigger: 'label.o_form_label:not(:contains("COUCOU"))',
    trigger: '.o_web_studio_leave > a.btn'
}]});

registry.category("web_tour.tours").add('web_studio_hide_fields_tour', {
    url: "/web#action=studio&mode=home_menu",
    test: true,
    steps: [{
    trigger: '.o_web_studio_new_app',
}, {
    trigger: '.o_web_studio_app_creator_next',
}, {
    trigger: `
        .o_web_studio_app_creator_name
        > input`,
    run: `text ${randomString(6)}`,
}, {
    // make another interaction to show "next" button
    trigger: `
        .o_web_studio_selectors
        .o_web_studio_selector:eq(2)`,
}, {
    trigger: '.o_web_studio_app_creator_next',
}, {
    trigger: `
        .o_web_studio_menu_creator
        > input`,
    run: `text ${randomString(6)}`,
}, {
    trigger: '.o_web_studio_app_creator_next',
}, {
    trigger: '.o_web_studio_model_configurator_next',
}, {
    // check that the Studio menu is still there
    extra_trigger: '.o_web_studio_menu',
    trigger: '.o_web_studio_leave > a.btn',
    timeout: 60000, /* previous step reloads registry, etc. - could take a long time */
}, {
    trigger: '.oe_title input',
    run: 'text Test',
}, {
    trigger: '.o_form_button_save',
}, {
    trigger: '.o_web_studio_navbar_item',
}, {
    extra_trigger: '.o_web_studio_menu',
    trigger: `
        .o_web_studio_views_icons
        > a[title="List"]`,
}, {
    // wait for the list editor to be rendered because the sidebar is the same
    extra_trigger: '.o_web_studio_list_view_editor',
    trigger: '.o_web_studio_existing_fields_icon',
}, {
    trigger: `
        .o_web_studio_sidebar
        .o_web_studio_existing_fields
        .o_web_studio_component:has(.o_web_studio_component_description:contains(display_name))`,
    run: 'drag_and_drop .o_web_studio_list_view_editor .o_web_studio_hook',
}, {
    trigger: `
        .o_list_table
        th[data-name="display_name"]`,
}, {
    trigger: `
        .o_web_studio_sidebar
        select[name="optional"]`,
    run: "text Hide by default",
}, {
    extra_trigger: '.o_list_table:not(:has(th[data-name="display_name"]))',
    trigger: `
        .o_web_studio_sidebar_header
        .o_web_studio_view`,
}, {
    trigger: `
        .o_web_studio_sidebar_checkbox
        input#show_invisible`,
}, {
    extra_trigger: `
        .o_list_table
        th[data-name="display_name"].o_web_studio_show_invisible`,
    trigger: '.o_web_studio_leave > a.btn',
}]});

registry.category("web_tour.tours").add('web_studio_model_option_value_tour', {
    url: "/web?debug=tests#action=studio&mode=home_menu",
    test: true,
    steps: [{
    trigger: '.o_web_studio_new_app',
}, {
    trigger: '.o_web_studio_app_creator_next',
}, {
    trigger: `
        .o_web_studio_app_creator_name
        > input`,
    run: `text ${randomString(6)}`,
}, {
    trigger: `
        .o_web_studio_selectors
        .o_web_studio_selector:eq(2)`,
}, {
    trigger: '.o_web_studio_app_creator_next',
}, {
    trigger: `
        .o_web_studio_menu_creator
        > input`,
    run: `text ${randomString(6)}`,
}, {
    trigger: '.o_web_studio_app_creator_next',
}, {
    // check monetary value in model configurator
    trigger: 'input[name="use_value"]',
}, {
    // check lines value in model configurator
    trigger: 'input[name="lines"]',
}, {
    trigger: '.o_web_studio_model_configurator_next',
}, {
    trigger: '.o_web_studio_menu .o_web_studio_views_icons > a[title="Graph"]',
    timeout: 60000, /* previous step reloads registry, etc. - could take a long time */
}, {
    // wait for the graph editor to be rendered and also check for sample data
    extra_trigger: '.o_view_sample_data .o_graph_renderer',
    trigger: '.o_web_studio_menu .o_web_studio_views_icons a[title="Pivot"]',
}, {
    // wait for the pivot editor to be rendered and also check for sample data
    extra_trigger: '.o_pivot_view .o_view_sample_data .o_view_nocontent_empty_folder',
    trigger: '.o_web_studio_leave > a.btn',
}]});

registry.category("web_tour.tours").add('web_studio_new_report_tour', {
    url: "/web",
    test: true,
    steps: [{
    // open studio
    trigger: '.o_main_navbar .o_web_studio_navbar_item',
    extra_trigger: ".o_home_menu_background",
}, {
    // click on the created app
    trigger: '.o_app[data-menu-xmlid*="studio"]:first',
    extra_trigger: 'body.o_in_studio',
}, {
    // edit reports
    trigger: '.o_web_studio_menu li a:contains(Reports)',
}, {
    // create a new report
    trigger: '.o_control_panel .o-kanban-button-new',
}, {
    // select external layout
    trigger: '.o_web_studio_report_layout_dialog div[data-layout="web.external_layout"]',
}, {
    // sidebar should display add tab
    extra_trigger: '.o_web_studio_report_editor_manager .o_web_studio_sidebar_header div.active[name="new"]',
    // switch to 'Report' tab
    trigger: '.o_web_studio_report_editor_manager .o_web_studio_sidebar_header div[name="report"]',
}, {
    // edit report name
    trigger: '.o_web_studio_sidebar input[name="name"]',
    run: 'text My Awesome Report',
}, {
    // switch to 'Add' in Sidebar
    trigger: '.o_web_studio_sidebar div[name="new"]',
}, {
    // wait for the iframe to be loaded
    extra_trigger: '.o_web_studio_report_editor iframe #wrapwrap',
    // add a 'title' building block
    trigger: '.o_web_studio_sidebar .o_web_studio_component:contains(Title Block)',
    run: 'drag_and_drop .o_web_studio_report_editor iframe .article > .page',
    auto: true,
}, {
    // click on the newly added field
    trigger: '.o_web_studio_report_editor iframe .h2 > span:contains(New Title)',
}, {
    // change the text of the H2 to 'test'
    trigger: '.o_web_studio_sidebar .o_web_studio_text .note-editable',
    run: function () {
        this.$anchor.focusIn();
        this.$anchor[0].firstChild.textContent = 'Test';
        this.$anchor.keydown();
        this.$anchor.blur();
    }
}, {
    // click outside to blur the field
    trigger: '.o_web_studio_report_editor',
    extra_trigger: '.o_web_studio_sidebar .o_web_studio_text .note-editable:contains(Test)',
}, {
    extra_trigger: '.o_web_studio_report_editor iframe .h2:contains(Test)',
    // add a new group on the node
    trigger: '.o_web_studio_sidebar .o_field_many2manytags[name="groups"] input',
    run: function () {
        this.$anchor.click();
    },
}, {
    trigger: '.ui-autocomplete:visible li:contains(Access Rights)',
}, {
    // wait for the group to appear
    extra_trigger: '.o_web_studio_sidebar .o_field_many2manytags[name="groups"] .o_badge_text:contains(Access Rights)',
    // switch to 'Add' in Sidebar
    trigger: '.o_web_studio_sidebar div[name="new"]',
}, {
    // add a 'title' building block Data Table
    trigger: '.o_web_studio_sidebar .o_web_studio_component:contains(Data table)',
    run: 'drag_and_drop .o_web_studio_report_editor iframe .article > .page',
}, {
    // expand the model selector in the popup
    trigger: 'div.o_field_selector_value',
    run: function () {
        $('div.o_field_selector_value').focusin();
    }
}, {
    // select the second element of the model (followers)
    trigger: '.o_field_selector_popover_body > ul > li:contains(Followers)'
}, {
    trigger:'.modal-content button>span:contains(Confirm)', // button
    extra_trigger:'.o_field_selector_chain_part:contains(Followers)',//content of the field is set
}, {
    // select the content of the first field of the newly added table
    trigger: '.o_web_studio_report_editor iframe span[t-field="table_line.display_name"]'
}, {
    // change the bound field
    trigger: '.o_web_studio_sidebar .card:last() div.o_field_selector_value',
    run: function () {
        $('.o_web_studio_sidebar .card:last() div.o_field_selector_value').focusin();
    }
}, {
    trigger: 'ul.o_field_selector_page li:contains(ID)'
}, {
    // update the title of the column
    extra_trigger: '.o_web_studio_report_editor iframe span[t-field="table_line.id"]',
    trigger: '.o_web_studio_report_editor iframe table thead span:contains(Name) ', // the name title
    //extra_trigger: '.o_web_studio_report_editor iframe span[t-field="table_line.display_name"]:not(:contains(YourCompany, Administrator))', // the id has been updated in the iframe
}, {
    // update column title 'name' into another title
    trigger: '.o_web_studio_sidebar .o_web_studio_text .note-editable',
        run: function () {
        this.$anchor.focusIn();
        this.$anchor[0].firstChild.textContent = 'new column title';
        this.$anchor.keydown();
        this.$anchor.blur();
    }
}, {
    // click outside to blur the field
    trigger: '.o_web_studio_report_editor',
    extra_trigger: '.o_web_studio_sidebar .o_web_studio_text .note-editable:contains(new column title)',
}, {
    // wait to be sure the modification has been correctly applied
    extra_trigger: '.o_web_studio_report_editor iframe table thead span:contains(new column title) ',
    // leave the report
    trigger: '.o_web_studio_breadcrumb .o_back_button:contains(Reports)',
}, {
    // a invisible element cannot be used as a trigger so this small hack is
    // mandatory for the next step
    run: function () {
        $('.o_kanban_record:contains(My Awesome Report) .dropdown-toggle').css('visibility', 'visible');
    },
    trigger: '.o_kanban_view',
}, {
    // open the dropdown
    trigger: '.o_kanban_record:contains(My Awesome Report) .dropdown-toggle',
}, {
    // duplicate the report
    trigger: '.o_kanban_record:contains(My Awesome Report) .dropdown-menu a:contains(Duplicate)',
}, {
    // open the duplicate report
    trigger: '.o_kanban_record:contains(My Awesome Report copy(1))',
}, {
    // switch to 'Report' tab
    trigger: '.o_web_studio_report_editor_manager .o_web_studio_sidebar_header div[name="report"]',
}, {
    // wait for the duplicated report to be correctly loaded
    extra_trigger: '.o_web_studio_sidebar input[name="name"][value="My Awesome Report copy(1)"]',
    // leave Studio
    trigger: '.o_web_studio_leave > a.btn',
}]});

registry.category("web_tour.tours").add('web_studio_new_report_basic_layout_tour', {
    url: "/web",
    test: true,
    steps: [{
    // open studio
    trigger: '.o_main_navbar .o_web_studio_navbar_item',
    extra_trigger: ".o_home_menu_background",
}, {
    // click on the created app
    trigger: '.o_app[data-menu-xmlid*="studio"]:first',
    extra_trigger: 'body.o_in_studio',
}, {
    // edit reports
    trigger: '.o_web_studio_menu li a:contains(Reports)',
}, {
    // create a new report
    trigger: '.o_control_panel .o-kanban-button-new',
}, {
    // select basic layout
    trigger: '.o_web_studio_report_layout_dialog div[data-layout="web.basic_layout"]',
}, {
    // sidebar should display add tab
    extra_trigger: '.o_web_studio_report_editor_manager .o_web_studio_sidebar_header div.active[name="new"]',
    // switch to 'Report' tab
    trigger: '.o_web_studio_report_editor_manager .o_web_studio_sidebar_header div[name="report"]',
}, {
    // edit report name
    trigger: '.o_web_studio_sidebar input[name="name"]',
    run: 'text My Awesome basic layout Report',
}, {
    // switch to 'Add' in Sidebar
    trigger: '.o_web_studio_sidebar div[name="new"]',
}, {
    // wait for the iframe to be loaded
    extra_trigger: '.o_web_studio_report_editor iframe #wrapwrap',
    // add a 'title' building block
    trigger: '.o_web_studio_sidebar .o_web_studio_component:contains(Title Block)',
    run: 'drag_and_drop .o_web_studio_report_editor iframe .article > .page',
    auto: true,
}, {
    // click on the newly added field
    trigger: '.o_web_studio_report_editor iframe .h2 > span:contains(New Title)',
}, {
    // change the text of the H2 to 'test'
    trigger: '.o_web_studio_sidebar .o_web_studio_text .note-editable',
    run: function () {
        this.$anchor.focusIn();
        this.$anchor[0].firstChild.textContent = 'Test';
        this.$anchor.keydown();
        this.$anchor.blur();
    }
}, {
    // click outside to blur the field
    trigger: '.o_web_studio_report_editor',
    extra_trigger: '.o_web_studio_sidebar .o_web_studio_text .note-editable:contains(Test)',
}, {
    extra_trigger: '.o_web_studio_report_editor iframe .h2:contains(Test)',
    // add a new group on the node
    trigger: '.o_web_studio_sidebar .o_field_many2manytags[name="groups"] input',
    run: function () {
        this.$anchor.click();
    },
}, {
    trigger: '.ui-autocomplete:visible li:contains(Access Rights)',
}, {
    // wait for the group to appear
    extra_trigger: '.o_web_studio_sidebar .o_field_many2manytags[name="groups"] .o_badge_text:contains(Access Rights)',
    // switch to 'Add' in Sidebar
    trigger: '.o_web_studio_sidebar div[name="new"]',
}, {
    // add a 'title' building block Data Table
    trigger: '.o_web_studio_sidebar .o_web_studio_component:contains(Data table)',
    run: 'drag_and_drop .o_web_studio_report_editor iframe .article > .page',
}, {
    // expand the model selector in the popup
    trigger: 'div.o_field_selector_value',
    run: function () {
        $('div.o_field_selector_value').focusin();
    }
}, {
    // select the second element of the model (followers)
    trigger: '.o_field_selector_popover_body > ul > li:contains(Followers)'
}, {
    trigger:'.modal-content button>span:contains(Confirm)', // button
    extra_trigger:'.o_field_selector_chain_part:contains(Followers)', //content of the field is set
}, {
    // select the content of the first field of the newly added table
    trigger: '.o_web_studio_report_editor iframe span[t-field="table_line.display_name"]'
}, {
    // change the bound field
    trigger: '.o_web_studio_sidebar .card:last() div.o_field_selector_value',
    run: function () {
        $('.o_web_studio_sidebar .card:last() div.o_field_selector_value').focusin();
    }
}, {
    trigger: 'ul.o_field_selector_page li:contains(ID)'
}, {
    // update the title of the column
    trigger: '.o_web_studio_report_editor iframe table thead span:contains(Name) ', // the name title
    //extra_trigger: '.o_web_studio_report_editor iframe span[t-field="table_line.display_name"]:not(:contains(YourCompany, Administrator))', // the id has been updated in the iframe
}, {
    // update column title 'name' into another title
    trigger: '.o_web_studio_sidebar .o_web_studio_text .note-editable',
    run: function () {
        this.$anchor.focusIn();
        this.$anchor[0].firstChild.textContent = 'new column title';
        this.$anchor.keydown();
        this.$anchor.blur();
    }
}, {
    // click outside to blur the field
    trigger: '.o_web_studio_report_editor',
    extra_trigger: '.o_web_studio_sidebar .o_web_studio_text .note-editable:contains(new column title)',
}, {
    // wait to be sure the modification has been correctly applied
    extra_trigger: '.o_web_studio_report_editor iframe table thead span:contains(new column title) ',
    // leave the report
    trigger: '.o_web_studio_breadcrumb .o_back_button:contains(Reports)',
}, {
    // a invisible element cannot be used as a trigger so this small hack is
    // mandatory for the next step
    run: function () {
        $('.o_kanban_record:contains(My Awesome basic layout Report) .dropdown-toggle').css('visibility', 'visible');
    },
    trigger: '.o_kanban_view',
}, {
    // open the dropdown
    trigger: '.o_kanban_record:contains(My Awesome basic layout Report) .dropdown-toggle',
}, {
    // duplicate the report
    trigger: '.o_kanban_record:contains(My Awesome basic layout Report) .dropdown-menu a:contains(Duplicate)',
}, {
    // open the duplicate report
    trigger: '.o_kanban_record:contains(My Awesome basic layout Report copy(1))',
}, {
    // switch to 'Report' tab
    trigger: '.o_web_studio_report_editor_manager .o_web_studio_sidebar_header div[name="report"]',
}, {
    // wait for the duplicated report to be correctly loaded
    extra_trigger: '.o_web_studio_sidebar input[name="name"][value="My Awesome basic layout Report copy(1)"]',
    // leave Studio
    trigger: '.o_web_studio_leave > a.btn',
}]});

registry.category("web_tour.tours").add('web_studio_approval_tour', {
    url: "/web",
    test: true,
    steps: [{
    // go to Apps menu
    trigger: '.o_app[data-menu-xmlid="base.menu_management"]',
}, {
    // open studio
    trigger: '.o_main_navbar .o_web_studio_navbar_item',
    extra_trigger: '.o_cp_switch_buttons',
}, {
    // switch to form view editor
    trigger: '.o_web_studio_views_icons > a[title="Form"]',
}, {
    // click on first button it finds that has a node id
    trigger: '.o_web_studio_form_view_editor button.o-web-studio-editor--element-clickable',
}, {
    // enable approvals for the button
    trigger: '.o_web_studio_sidebar label[for="studio_approval"]',
}, {
    // set approval message
    trigger: '.o_web_studio_sidebar_approval input[name*="approval_message"]',
    run: 'text nope',
}, {
    // add approval rule
    trigger: '.o_web_studio_sidebar_approval .o_approval_new',
    extra_trigger: '.o_web_studio_snackbar .fa-check',
}, {
    // set domain on first rule
    trigger: '.o_web_studio_sidebar_approval .o_approval_domain',
    extra_trigger: '.o_studio_sidebar_approval_rule:eq(1)',
}, {
    // set stupid domain that is always truthy
    trigger: '.o_domain_debug_container textarea',
    run: function () {
        this.$anchor.focusIn();
        this.$anchor.val('[["id", "!=", False]]');
        this.$anchor.change();
    }
}, {
    // save domain and close modal
    trigger:' .modal-footer .btn-primary',
}, {
    // add second approval rule when the first is set
    trigger: '.o_web_studio_sidebar_approval .o_approval_new',
    extra_trigger: '.o_web_studio_snackbar .fa-check',
}, {
    // enable 'force different users' for one rule (doesn't matter which)
    trigger: '.o_web_studio_sidebar label[for*="exclusive_user"]',
    extra_trigger: '.o_web_studio_snackbar .fa-check',
}, {
    // leave studio
    trigger: '.o_web_studio_leave > a.btn',
    extra_trigger: '.o_web_studio_snackbar .fa-check',
}, {
    // go back to kanban
    trigger: '.o_menu_brand',
    extra_trigger: '.o_web_client:not(.o_in_studio)'
}, {
    // open first record (should be the one that was used, so the button should be there)
    trigger: '.o_kanban_view .o_kanban_record .o_dropdown_kanban .dropdown-toggle',
}, {
    trigger: '.o_kanban_view .o_kanban_record .o-dropdown--menu .dropdown-item',
},{
    // try to do the action
    trigger: 'button[studio_approval]',
}, {
    // there should be a warning
    trigger: '.o_notification.border-warning'
}, {
    trigger: '.breadcrumb .o_back_button'
}]});

registry.category("web_tour.tours").add('web_studio_custom_field_tour', {
    url: "/web",
    test: true,
    steps: [{
    // go to Apps menu
    trigger: '.o_app[data-menu-xmlid="base.menu_management"]',
}, {
    // click on the list view
    trigger: '.o_switch_view.o_list',
}, {
    // click on optional column dropdown
    trigger: '.o_optional_columns_dropdown_toggle'
}, {
    // click on add custom field
    trigger: '.dropdown-item-studio'
}, {
    // go to home menu
    trigger: '.o_menu_toggle',
    extra_trigger: '.o_web_client.o_in_studio'
}, {
    //leave studio
    trigger: '.o_web_studio_leave > a.btn'
}, {
    // studio left.
    trigger: '.o_app[data-menu-xmlid="base.menu_management"]',
    extra_trigger: '.o_web_client:not(.o_in_studio)',
}]});

registry.category("web_tour.tours").add('web_studio_local_storage_tour', {
    url: "/web",
    test: true,
    steps: [{
    trigger: '.o_app[data-menu-xmlid="base.menu_management"]',
    run: function () {
        localStorage.setItem('openStudioOnReload', "main");
        window.location.reload();
    },
}, {
    // should be directly in studio mode
    trigger: '.o_app[data-menu-xmlid="base.menu_management"]',
    extra_trigger: '.o_web_client.o_in_studio'
}, {
    trigger: '.o_menu_toggle',
}, {
    trigger: '.o_web_studio_leave > a.btn',
}, {
    // studio left.
    trigger: '.o_app[data-menu-xmlid="base.menu_management"]',
    extra_trigger: '.o_web_client:not(.o_in_studio)',
    run: function () {
        window.location.reload();
    },
}, {
    // studio left after refresh.
    trigger: '.o_app[data-menu-xmlid="base.menu_management"]',
    extra_trigger: '.o_web_client:not(.o_in_studio)'
}]});

registry.category("web_tour.tours").add('web_studio_custom_background_tour', {
    url: "/web",
    test: true,
    steps: [{
    content: 'class for custom background must be enabled (outside studio)',
    trigger: '.o_home_menu_background_custom.o_home_menu_background:not(.o_in_studio)',
    run: () => null,
}, {
    content: 'opening studio',
    trigger: '.o_main_navbar .o_web_studio_navbar_item',
}, {
    content: 'class for custom background must be enabled (in studio)',
    trigger: '.o_home_menu_background_custom.o_home_menu_background.o_in_studio',
    run: () => null,
}, {
    content: 'click on Customizations button',
    trigger: '.o_web_studio_home_studio_menu button',
}, {
    content: 'reset the background',
    trigger: '.o_web_studio_reset_default_background',
}, {
    content: 'validate the reset of the background',
    trigger: '.modal-dialog .btn-primary',
}, {
    content: 'class for custom background must be disabled (inside studio)',
    trigger: '.o_home_menu_background.o_in_studio:not(.o_home_menu_background_custom)',
    run: () => null,
}, {
    content: 'leaving studio',
    trigger: '.o_web_studio_leave a',
}, {
    content: 'class for custom background must be disabled (outside studio)',
    trigger: '.o_home_menu_background:not(.o_in_studio.o_home_menu_background_custom)',
    run: () => null,
}]});

registry.category("web_tour.tours").add("web_studio_create_app_with_pipeline_and_user_assignment", {
    test: true,
    steps: [{
    // open studio
    trigger: '.o_main_navbar .o_web_studio_navbar_item',
    extra_trigger: ".o_home_menu_background",
}, {
    trigger: '.o_web_studio_new_app',
}, {
    // the next steps are here to create a new app
    trigger: '.o_web_studio_app_creator_next',
}, {
    trigger: '.o_web_studio_app_creator_name > input',
    run: 'text ' + (createdAppString = randomString(6)),
}, {
    trigger: '.o_web_studio_app_creator_next.is_ready',
}, {
    trigger: '.o_web_studio_menu_creator > input',
    run: 'text ' + (createdMenuString = randomString(6)),
}, {
    trigger: '.o_web_studio_app_creator_next.is_ready',
}, {
    trigger: "input#use_stages"
}, {
    trigger: "input#use_responsible"
}, {
    trigger: '.o_web_studio_model_configurator_next',
}, {
    trigger: ".o_web_studio_editor .o_menu_sections a:contains(Views)"
}, {
    trigger: ".o_web_studio_view_type[data-type='kanban'] .o_web_studio_thumbnail"
}, {
    extra_trigger: ".o_web_studio_kanban_view_editor",
    trigger: "img.oe_kanban_avatar",
    run() {
        const avatarImg = document.querySelector("img.oe_kanban_avatar");
        if (!avatarImg.getAttribute("title") === "Unassigned") {
            throw new Error("The title of the new avatar should be set, even if there are no record");
        }
    }
}]});

registry.category("web_tour.tours").add('web_studio_alter_field_existing_in_multiple_views_tour', {
    test: true,
    steps: [{
    // open studio
    trigger: '.o_main_navbar .o_web_studio_navbar_item a',
    extra_trigger: ".o_home_menu_background",
}, {
    trigger: '.o_web_studio_new_app',
}, {
    // the next steps are here to create a new app
    trigger: '.o_web_studio_app_creator_next',
}, {
    trigger: '.o_web_studio_app_creator_name > input',
    run: 'text ' + (createdAppString = randomString(6)),
}, {
    trigger: '.o_web_studio_app_creator_next.is_ready',
}, {
    trigger: '.o_web_studio_menu_creator > input',
    run: `text ${createdAppString}`,
}, {
    trigger: '.o_web_studio_app_creator_next.is_ready',
}, {
    trigger: '.o_web_studio_model_configurator_next',
}, {
    extra_trigger: '.o_web_studio_sidebar',
    // unfold 'Existing Fieldqs' section
    trigger: '.o_web_studio_existing_fields_header',
    timeout: 60000,
},{
    // add an existing field (the one we created)
    trigger: '.o_web_studio_sidebar .o_web_studio_field_type_container:eq(2) .o_web_studio_field_many2many[title="Followers (Partners)"]',
    run: 'drag_and_drop .o_inner_group:first .o_web_studio_hook:first',
}, {
    trigger: '.o_web_studio_new ',
}, {
    trigger: '.o_web_studio_sidebar .o_web_studio_field_type_container:eq(1) .o_web_studio_field_many2many',
    run: 'drag_and_drop div.o_web_studio_hook:last',
}, {
    extra_trigger: '.modal-body',
    trigger: '.o_field_many2one[name="model"] input',
    run: `text ${createdAppString}`,
}, {
    // select the first model
    trigger: '.ui-autocomplete > .ui-menu-item:first > a',
    in_modal: false,
}, {
    trigger: 'button:contains(Confirm)',
}, {
    // edit list view
    trigger: '.o_web_studio_editX2Many',
}, {
    // wait for list view to be loaded
    extra_trigger: '.o_web_studio_list_view_editor',
    // go to view
    trigger: '.o_web_studio_view ',
}, {
    // show invisible elements
    trigger: 'label[for="show_invisible"]',
}, {
    trigger: '.o_web_studio_new ',
}, {
    // unfold 'Existing Fieldqs' section
    trigger: '.o_web_studio_existing_fields_header',
},{
    // add an existing field (the one we created)
    trigger: '.o_web_studio_sidebar .o_web_studio_field_type_container:eq(1) .o_web_studio_field_many2many[title="Followers (Partners)"]',
    run: 'drag_and_drop .o_web_studio_list_view_editor th.o_web_studio_hook:first',
}, {
    // select field
    trigger: "th[data-name='message_partner_ids']",
    run: "click",
}, {
    // make it invisible
    trigger: "#invisible",
    run: "click",
}, {
    extra_trigger: ".o_web_studio_snackbar_icon.show.fa.fa-check",
    // check if the invisible option is checked
    trigger: "#invisible:checked",
}]});

registry.category("web_tour.tours").add(
    "web_studio_test_create_one2many_lines_then_edit_name", {
        test: true,
        sequence: 260,
        steps: [
            {
                trigger: "a[data-menu-xmlid='web_studio.studio_test_partner_menu']"
            },
            {
                extra_trigger: ".o_form_view",
                trigger: ".o_web_studio_navbar_item a"
            },
            {
                trigger: ".o_web_studio_sidebar .o_web_studio_new_fields .o_web_studio_field_lines",
                run: "drag_and_drop (.o_web_studio_hook:eq(0))"
            },
            {
                trigger: ".o_form_label",
                extra_trigger: ".o_field_x2many_list",
                timeout: 20000,
            },
            {
                extra_trigger: ".o_web_studio_sidebar .o_web_studio_properties.active",
                trigger: "input[name='string']",
                run: "text new name",
            },
            {
                trigger: ".o_web_studio_leave",
                timeout: 20000,
            }
        ]
    }
);

registry.category("web_tour.tours").add("web_studio_test_address_view_id_no_edit", {
    test: true,
    sequence: 260,
    steps: [
        {
            trigger: "a[data-menu-xmlid='web_studio.studio_test_partner_menu']"
        },
        {
            extra_trigger: ".o_form_view",
            trigger: ".o_address_format",
            run: function() {
                if (this.$anchor.find('[name=lang]').length || !this.$anchor.find('[name=street]').length) {
                    throw new Error("The address view id set on the company country should be displayed");
                };
            }
        },
        {
            trigger: ".o_web_studio_navbar_item a"
        },
        {
            extra_trigger: ".o_web_studio_view_renderer",
            trigger: ".o_address_format",
            run: function() {
                if (this.$anchor.find('[name=street]').length || !this.$anchor.find('[name=lang]').length) {
                    throw new Error("The address view id set on the company country shouldn't be editable");
                };
            }
        },
        {
            trigger: ".o_web_studio_leave"
        },
    ]
});

registry.category("web_tour.tours").add(
    "web_studio_test_create_new_model_from_existing_view",
    {
        test: true,
        sequence: 260,
        steps: [
            {
                trigger: "a[data-menu-xmlid='web_studio.studio_test_partner_menu']"
            },
            {
                extra_trigger: ".o_kanban_view",
                trigger: ".o_web_studio_navbar_item a"
            },
            {
                trigger: ".o_web_create_new_model"
            },
            {
                extra_trigger: ".modal-dialog",
                trigger: "input[name='model_name']",
                run: "text new model",
            },
            {
                trigger: ".confirm_button",
            },
            {
                trigger: ".o_web_studio_model_configurator_next"
            },
            {
                trigger: ".o_form_view",
            }
        ]
    }
);

registry.category("web_tour.tours").add(
    "web_studio_test_create_model_with_clickable_stages",
    {
        test: true,
        sequence: 260,
        steps: [
            {
                trigger: "a[data-menu-xmlid='web_studio.studio_test_partner_menu']"
            },
            {
                extra_trigger: ".o_form_view",
                trigger: ".o_web_studio_navbar_item a"
            },
            {
                trigger: ".o_web_create_new_model"
            },
            {
                extra_trigger: ".modal-dialog",
                trigger: "input[name='model_name']",
                run: "text new model",
            },
            {
                trigger: ".confirm_button",
            },
            {
                trigger: "#use_stages"
            },
            {
                trigger: ".o_web_studio_model_configurator_next"
            },
            {
                trigger: ".o_web_studio_leave"
            },
            {
                extra_trigger: ".o_form_view",
                trigger: "input#x_name",
                run: "text new record",
            },
            {
                trigger: ".o_arrow_button:contains(In Progress)"
            },
            {
                trigger: ".o_arrow_button_current:contains(In Progress)"
            },
            {
                trigger: ".o_form_button_save"
            },
            {
                trigger: ".o_back_button"
            },
            {
                trigger: ".o_kanban_group:contains(In Progress) .o_kanban_record_details:contains(new record)"
            }
        ]
    }
);

registry.category("web_tour.tours").add('web_studio_test_hide_page_of_notebook', {
    test: true,
    steps:[{
        // open studio
        trigger: '.o_main_navbar .o_web_studio_navbar_item a',
        extra_trigger: ".o_home_menu_background",
    }, {
        trigger: '.o_web_studio_new_app',
    }, {
        // the next steps are here to create a new app
        trigger: '.o_web_studio_app_creator_next',
    }, {
        trigger: '.o_web_studio_app_creator_name > input',
        run: 'text ' + (createdAppString = randomString(6)),
    }, {
        trigger: '.o_web_studio_app_creator_next.is_ready',
    }, {
        trigger: '.o_web_studio_menu_creator > input',
        run: `text ${createdAppString}`,
    }, {
        trigger: '.o_web_studio_app_creator_next.is_ready',
    }, {
        trigger: 'input[name="lines"]'
    }, {
        trigger: '.o_web_studio_model_configurator_next',
    }, {
        // wait for studio to be loaded
        extra_trigger: '.o_web_studio_sidebar',
        // go to view
        trigger: '.o_web_studio_view ',
        timeout: 60000,
    }, {
        // show invisible elements
        trigger: 'label[for="show_invisible"]',
    }, {
        // select the first page of the notebook
        trigger: 'a[name="lines"]',
    }, {
        // make it invisible
        trigger: "#invisible",
        run: "click",
    }, {
        extra_trigger: ".o_web_studio_snackbar_icon.show.fa.fa-check",
        // click again on the page to refresh the sidebar
        trigger: 'a[name="lines"]',
    }, {
        // invisible checkbox must be checked
        trigger: "#invisible:checked",
    }]
});

});
;

/*************************************************************************************
*  Filepath: /web_studio/static/tests/legacy/tours/web_studio_test_ui_unit_tours.js  *
*  Lines: 582                                                                        *
*************************************************************************************/
odoo.define('@web_studio/../tests/legacy/tours/web_studio_test_ui_unit_tours', ['@web/core/registry'], async function (require) {
'use strict';
let __exports = {};
/** @odoo-module */
const { registry } = require("@web/core/registry");

registry.category("web_tour.tours").add(
    "web_studio_test_form_view_not_altered_by_studio_xml_edition",
    {
        test: true,
        url: "/web",
        sequence: 260,
        steps: [
        {
            trigger: "a[data-menu-xmlid='web_studio.studio_test_partner_menu']"
        },
        {
            trigger: ".o_form_view .o_form_editable"
        },
        {
            trigger: ".o_web_studio_navbar_item a"
        },
        {
            trigger: ".o_web_studio_sidebar .o_web_studio_view"
        },
        {
            trigger: ".o_web_studio_xml_editor"
        },
        {
            extra_trigger: ".o_ace_view_editor",
            trigger: ".o_web_studio_leave"
        },
        {
            trigger: ".o_form_view .o_form_editable"
        }
    ]
});

/* global ace */
registry.category("web_tour.tours").add(
    "web_studio_test_edit_with_xml_editor",
    {
        test: true,
        url: "/web",
        sequence: 260,
        steps: [
        {
            trigger: "a[data-menu-xmlid='web_studio.studio_test_partner_menu']"
        },
        {
            extra_trigger: ".someDiv",
            trigger: ".o_web_studio_navbar_item a"
        },
        {
            trigger: ".o_web_studio_sidebar .o_web_studio_view"
        },
        {
            trigger: ".o_web_studio_xml_editor"
        },
        {
            extra_trigger: ".o_ace_view_editor",
            trigger: ".select2-container:not(.d-none)",
            run() {
                const aceViewList = document.querySelector("#ace-view-list");
                const studioViewItem = Array.from(aceViewList.querySelectorAll("option")).filter(
                    (el) => {
                        return el.textContent.includes("Odoo Studio");
                    }
                )[0];

                if (!studioViewItem) {
                    throw new Error("There is no studio view");
                }

                const select2 = $(aceViewList).select2();
                select2.val(studioViewItem.value).trigger("change");
            }
        },
        {
            trigger: ".ace_content",
            run() {
                ace.edit("ace-view-editor").setValue("<data/>");
            }
        },
        {
            trigger: ".o_ace_view_editor .o_button_section [data-action='save']"
        },
        {
            trigger: ".o_web_studio_snackbar_icon:not('.fa-spin')"
        },
        {
            trigger: ".o_form_view",
            run() {
                if (document.querySelector(".someDiv")) {
                    throw new Error("The edition of the view's arch via the xml editor failed");
                }
            }
        }
    ]
});

registry.category("web_tour.tours").add(
    "web_studio_enter_x2many_edition_and_add_field",
    {
        test: true,
        sequence: 260,
        steps: [
        {
            trigger: "a[data-menu-xmlid='web_studio.studio_test_partner_menu']"
        },
        {
            trigger: ".o_form_view .o_form_editable"
        },
        {
            trigger: ".o_web_studio_navbar_item a"
        },
        {
            trigger: ".o_web_studio_form_view_editor .o_field_widget[name='user_ids']",
        },
        {
            extra_trigger: ".o-web-studio-edit-x2manys-buttons",
            trigger: ".o_web_studio_editX2Many[data-type='form']"
        },
        {
            extra_trigger: ".o_web_studio_breadcrumb .breadcrumb-item:contains('Subview Form')",
            trigger: ".o_web_studio_sidebar .o_web_studio_existing_fields_header"
        },
        {
            extra_trigger: ".o_web_studio_existing_fields_section:not(.d-none)",
            trigger: ".o_web_studio_sidebar .o_web_studio_existing_fields_section .o_web_studio_component[title='User log entries']",
            run() {
                $(".o_web_studio_sidebar .o_web_studio_existing_fields_section .o_web_studio_component[title='User log entries']")[0].scrollIntoView();
            }
        },
        {
            trigger: ".o_web_studio_sidebar .o_web_studio_existing_fields_section .o_web_studio_component[title='User log entries']",
            run: "drag_and_drop (.o_web_studio_form_view_editor .o_web_studio_hook:eq(1))",
        },
        {
            trigger: ".o_web_studio_form_view_editor .o_field_widget[name='log_ids']",
            run() {
                const countFields = document.querySelectorAll(".o_web_studio_form_view_editor .o_field_widget").length;
                if (!countFields === 2) {
                    throw new Error("There should be 2 fields in the form view")
                }
            }
        }
    ]
});

registry.category("web_tour.tours").add(
    "web_studio_enter_x2many_auto_inlined_subview",
    {
        test: true,
        sequence: 260,
        steps: [
        {
            trigger: "a[data-menu-xmlid='web_studio.studio_test_partner_menu']"
        },
        {
            trigger: ".o_form_view .o_form_editable"
        },
        {
            trigger: ".o_web_studio_navbar_item a"
        },
        {
            trigger: ".o_web_studio_form_view_editor .o_field_widget[name='user_ids'] .o_field_x2many_list",
        },
        {
            extra_trigger: ".o-web-studio-edit-x2manys-buttons",
            trigger: ".o_web_studio_editX2Many[data-type='list']"
        },
        {
            extra_trigger: ".o_web_studio_breadcrumb .breadcrumb-item:contains('Subview List')",
            trigger: ".o_web_studio_sidebar .o_web_studio_existing_fields_header"
        },
        {
            extra_trigger: ".o_web_studio_existing_fields_section:not(.d-none)",
            trigger: ".o_web_studio_sidebar .o_web_studio_existing_fields_section .o_web_studio_component[title='User log entries']",
            run() {
                $(".o_web_studio_sidebar .o_web_studio_existing_fields_section .o_web_studio_component[title='User log entries']")[0].scrollIntoView();
            }
        },
        {
            trigger: ".o_web_studio_sidebar .o_web_studio_existing_fields_section .o_web_studio_component[title='User log entries']",
            run: "drag_and_drop (.o_web_studio_list_view_editor .o_web_studio_hook:eq(1))",
        },
        {
            trigger: ".o_web_studio_list_view_editor th[data-name='log_ids']",
            run() {
                const countFields = document.querySelectorAll(".o_web_studio_form_view_editor th[data-name]").length;
                if (!countFields === 2) {
                    throw new Error("There should be 2 fields in the form view")
                }
            }
        }
    ]
});

registry.category("web_tour.tours").add(
    "web_studio_enter_x2many_auto_inlined_subview_with_multiple_field_matching",
    {
        test: true,
        sequence: 260,
        steps: [
            {
                trigger: "a[data-menu-xmlid='web_studio.studio_test_partner_menu']"
            },
            {
                trigger: ".o_form_view .o_form_editable"
            },
            {
                trigger: ".o_web_studio_navbar_item a"
            },
            {
                trigger: ".o_web_studio_form_view_editor .o_field_widget[name='user_ids']:eq(1) .o_field_x2many_list",
            },
            {
                extra_trigger: ".o-web-studio-edit-x2manys-buttons",
                trigger: ".o_web_studio_editX2Many[data-type='list']"
            },
            {
                extra_trigger: ".o_web_studio_breadcrumb .breadcrumb-item:contains('Subview List')",
                trigger: ".o_web_studio_sidebar .o_web_studio_existing_fields_header"
            },
            {
                extra_trigger: ".o_web_studio_existing_fields_section:not(.d-none)",
                trigger: ".o_web_studio_sidebar .o_web_studio_existing_fields_section .o_web_studio_component[title='User log entries']",
                run() {
                    $(".o_web_studio_sidebar .o_web_studio_existing_fields_section .o_web_studio_component[title='User log entries']")[0].scrollIntoView();
                }
            },
            {
                trigger: ".o_web_studio_sidebar .o_web_studio_existing_fields_section .o_web_studio_component[title='User log entries']",
                run: "drag_and_drop (.o_web_studio_list_view_editor .o_web_studio_hook:eq(1))",
            },
            {
                trigger: ".o_web_studio_list_view_editor th[data-name='log_ids']",
                run() {
                    const countFields = document.querySelectorAll(".o_web_studio_form_view_editor th[data-name]").length;
                    if (!countFields === 2) {
                        throw new Error("There should be 2 fields in the form view");
                    }
                }
            }
        ]
    }
);

registry.category("web_tour.tours").add(
    "web_studio_field_with_group",
    {
        test: true,
        sequence: 260,
        steps: [
        {
            trigger: "a[data-menu-xmlid='web_studio.studio_test_partner_menu']"
        },
        {
            trigger: ".o_list_view"
        },
        {
            trigger: ".o_web_studio_navbar_item a"
        },
        {
            trigger: ".o_web_studio_list_view_editor th[data-name='function']",
            run() {}
        },
        {
            trigger: ".o_web_studio_sidebar .o_web_studio_existing_fields_header"
        },
        {
            extra_trigger: ".o_web_studio_existing_fields_section:not(.d-none)",
            trigger: ".o_web_studio_sidebar .o_web_studio_existing_fields_section .o_web_studio_component[title='Website Link']",
            run() {
                $(".o_web_studio_sidebar .o_web_studio_existing_fields_section .o_web_studio_component[title='Website Link']")[0].scrollIntoView();
            }
        },
        {
            trigger: ".o_web_studio_sidebar .o_web_studio_existing_fields_section .o_web_studio_component[title='Website Link']",
            run: "drag_and_drop (.o_web_studio_list_view_editor th.o_web_studio_hook:eq(2))",
        },
        {
            extra_trigger: ".o_web_studio_list_view_editor th.o_web_studio_hook:not(.o_web_studio_nearest_hook)",
            trigger: ".o_web_studio_list_view_editor th[data-name='website']",
            run() {
                const countFields = document.querySelectorAll(".o_web_studio_list_view_editor th[data-name]").length;
                if (!countFields === 3) {
                    throw new Error("There should be 3 fields in the form view")
                }
            }
        }
    ]
});

registry.category("web_tour.tours").add(
    "web_studio_elements_with_groups_form",
    {
        test: true,
        sequence: 260,
        steps: [
        {
            trigger: "a[data-menu-xmlid='web_studio.studio_test_partner_menu']"
        },
        {
            trigger: ".o_form_view"
        },
        {
            trigger: ".o_web_studio_navbar_item a"
        },
        {
            trigger: ".o_web_studio_form_view_editor",
            run() {}
        },
        {
            trigger: ".o_web_studio_sidebar .o_web_studio_existing_fields_header"
        },
        {
            extra_trigger: ".o_web_studio_existing_fields_section:not(.d-none)",
            trigger: ".o_web_studio_sidebar .o_web_studio_existing_fields_section .o_web_studio_component[title='Website Link']",
            run() {
                $(".o_web_studio_sidebar .o_web_studio_existing_fields_section .o_web_studio_component[title='Website Link']")[0].scrollIntoView();
            }
        },
        {
            trigger: ".o_web_studio_sidebar .o_web_studio_existing_fields_section .o_web_studio_component[title='Website Link']",
            run: "drag_and_drop (.o_web_studio_form_view_editor .o_inner_group .o_web_studio_hook:eq(1))",
        },
        {
            extra_trigger: ".o_web_studio_form_view_editor .o_web_studio_hook:not(.o_web_studio_nearest_hook)",
            trigger: ".o_web_studio_form_view_editor .o_field_widget[name='website']",
            run() {
                const countFields = document.querySelectorAll(".o_web_studio_form_view_editor .o_field_widget[name]").length;
                if (!countFields === 2) {
                    throw new Error("There should be 2 fields in the form view")
                }
            }
        }
    ]
});

registry.category("web_tour.tours").add(
    "test_element_group_in_sidebar",
    {
        test: true,
        sequence: 260,
        steps: [
        {
            trigger: "a[data-menu-xmlid='web_studio.studio_test_partner_menu']",
        },
        {
            trigger: ".o_form_view .o_form_editable",
        },
        {
            trigger: ".o_web_studio_navbar_item a",
        },
        {
            extra_trigger: ".o_web_studio_form_view_editor .o_field_widget[name='display_name']",
            trigger: ".o_web_studio_form_view_editor .o_field_widget[name='display_name']",
        },
        {
            trigger: ".o_field_many2manytags[name='groups'] .badge",
            run() {
                const tag = document.querySelector(".o_field_many2manytags[name='groups'] .badge");
                if (!tag || !tag.textContent.includes("Test Group")) {
                    throw new Error("The groups should be displayed in the sidebar");
                }
            },
        },
    ]
});

registry.category("web_tour.tours").add(
    "web_studio_custom_selection_field_edit_values",
    {
        test: true,
        sequence: 260,
        steps: [
            {
                trigger: "a[data-menu-xmlid='web_studio.studio_test_partner_menu']"
            },
            {
                extra_trigger: ".o_form_view",
                trigger: ".o_web_studio_navbar_item a"
            },
            {
                trigger: ".o_web_studio_sidebar .o_web_studio_new_fields .o_web_studio_field_selection",
                run: "drag_and_drop (.o_web_studio_hook:eq(0))"
            },
            {
                trigger: ".o_web_studio_selection_new_value input",
                run: "text some value",
            },
            {
                trigger: ".modal-footer .btn-primary"
            },
            {
                trigger: ".o_web_studio_leave"
            },
            {
                extra_trigger: ".o_form_view",
                trigger: ".o_web_studio_navbar_item a"
            },
            {
                trigger: ".o_web_studio_form_view_editor .o_field_selection"
            },
            {
                trigger: ".o_web_studio_edit_selection_values"
            },
            {
                trigger: ".o_web_studio_selection_new_value input:last",
                run: "text another value"
            },
            {
                trigger: ".modal-footer .btn-primary"
            },
            {
                trigger: ".o_web_studio_leave"
            },
        ]
    }
);


registry.category("web_tour.tours").add(
    "web_studio_test_enter_x2many_edition_with_multiple_subviews",
    {
        test: true,
        sequence: 260,
        steps: [
            {
                trigger: "a[data-menu-xmlid='web_studio.studio_test_partner_menu']"
            },
            {
                extra_trigger: ".o_form_view span:contains('Address Type')",
                trigger: ".o_web_studio_navbar_item a"
            },
            {
                trigger: ".o_web_studio_form_view_editor .o_field_widget[name='child_ids'] .o_field_x2many_list",
                extra_trigger: ".o_list_renderer span:contains('Address Type')"
            },
            {
                extra_trigger: ".o-web-studio-edit-x2manys-buttons",
                trigger: ".o_web_studio_editX2Many[data-type='list']"
            },
            {
                trigger: ".o_content > .o_list_renderer span:contains('Address Type')"
            }
        ]
    }
);

registry.category("web_tour.tours").add("web_studio_test_enter_x2many_edition_with_multiple_subviews_correct_xpath",
    {
        test: true,
        sequence: 260,
        steps: [
            {
                trigger: "a[data-menu-xmlid='web_studio.studio_test_partner_menu']"
            },
            {
                extra_trigger: ".o_form_view",
                trigger: ".o_web_studio_navbar_item a"
            },
            {
                trigger: ".o_web_studio_form_view_editor .o_field_widget[name='child_ids'] .o_field_x2many_list",
            },
            {
                extra_trigger: ".o-web-studio-edit-x2manys-buttons",
                trigger: ".o_web_studio_editX2Many[data-type='list']"
            },
            {
                extra_trigger: ".o_web_studio_breadcrumb .breadcrumb-item:contains('Subview List')",
                trigger: ".o_web_studio_sidebar .o_web_studio_existing_fields_header"
            },
            {
                trigger: ".o_web_studio_sidebar .o_web_studio_existing_fields_section .o_web_studio_component[title='Active']",
                run: "drag_and_drop (.o_web_studio_hook:eq(0))"
            },
            {
                content: "Check that the active field has been added",
                trigger: ".o_web_studio_view_renderer .o_list_view thead th[data-name='active']"
            }
        ]
    }
);

registry.category("web_tour.tours").add("web_studio_test_studio_view_is_last", {
    test: true,
    steps: [
        {
            trigger: "a[data-menu-xmlid='web_studio.studio_test_partner_menu']",
        },
        {
            extra_trigger: ".o_form_view",
            trigger: ".o_web_studio_navbar_item a",
        },
        {
            trigger: ".o_web_studio_sidebar .o_web_studio_existing_fields_header",
        },
        {
            extra_trigger: ".o_web_studio_existing_fields_section:not(.d-none)",
            trigger:
                ".o_web_studio_sidebar .o_web_studio_existing_fields_section .o_web_studio_component:contains(Website Link)",
            run() {
                $(
                    ".o_web_studio_sidebar .o_web_studio_existing_fields_section .o_web_studio_component:contains(Website Link)"
                )[0].scrollIntoView();
            },
        },
        {
            trigger:
                ".o_web_studio_sidebar .o_web_studio_existing_fields_section .o_web_studio_component:contains(Website Link)",
            run: "drag_and_drop_native (.o_web_studio_form_view_editor .o_inner_group .o_web_studio_hook:last)",
        },
        {
            trigger: ".o_web_studio_form_view_editor .o_field_widget[name='website']",
            allowInvisible: true,
            run() {},
        },
    ],
});

registry.category("web_tour.tours").add("web_studio_test_edit_form_subview_attributes", {
    test: true,
    steps: [
        {
            trigger: "a[data-menu-xmlid='web_studio.studio_test_partner_menu']",
        },
        {
            extra_trigger: ".o_form_view",
            trigger: ".o_web_studio_navbar_item a",
        },
        {
            trigger:
                ".o_web_studio_form_view_editor .o_field_widget[name='child_ids'] .o_field_x2many_list",
        },
        {
            extra_trigger: ".o-web-studio-edit-x2manys-buttons",
            trigger: ".o_web_studio_editX2Many[data-type='form']",
        },
        {
            extra_trigger: ".o_web_studio_breadcrumb .breadcrumb-item:contains(Subview Form)",
            trigger: ".o_web_studio_sidebar .o_web_studio_view",
        },
        {
            trigger: ".o_web_studio_sidebar input[name='create']:checked",
        },
        {
            trigger: ".o_web_studio_sidebar input[name='create']:not(:checked)",
            run() {},
        },
    ],
});

registry.category("web_tour.tours").add("web_studio_test_move_similar_field", {
    test: true,
    steps: [
        {
            trigger: "a[data-menu-xmlid='web_studio.studio_test_partner_menu']",
        },
        {
            extra_trigger: ".o_form_view",
            trigger: ".o_web_studio_navbar_item a",
        },
        {
            extra_trigger: ".o_web_studio_form_view_editor",
            trigger: ".o_notebook_headers .nav-item:eq(1) a",
        },
        {
            trigger: ".tab-pane.active [data-field-name=display_name]",
            run: "drag_and_drop_native (.o_web_studio_form_view_editor .o_web_studio_hook:eq(1))",
        },
        {
            trigger: ".o_web_studio_leave",
            run() {},
        },
    ]
});

return __exports;
});
;

/*********************************************************
*  Filepath: /hr/static/tests/tours/hr_employee_flow.js  *
*  Lines: 36                                             *
*********************************************************/
odoo.define('@hr/../tests/tours/hr_employee_flow', ['@web/core/registry', '@web_tour/js/tour_step_utils'], async function (require) {
'use strict';
let __exports = {};
/** @odoo-module **/

const { registry } = require("@web/core/registry");
const { stepUtils } = require("@web_tour/js/tour_step_utils");

registry.category("web_tour.tours").add('hr_employee_tour', {
    test: true,
    url: '/web',
    steps: [
    stepUtils.showAppsMenuItem(),
    {
        content: "Open Employees app",
        trigger: ".o_app[data-menu-xmlid='hr.menu_hr_root']",
        run: 'click',
    },
    {
        content: "Open an Employee Profile",
        trigger: ".o_kanban_record_title:contains('Johnny H.')",
        run: 'click',
    },
    {
        content: "Open user account menu",
        trigger: ".o_user_menu .oe_topbar_name",
        run: 'click',
    }, {
        content: "Open My Profile",
        trigger: "[data-menu=settings]",
        run: 'click',
    },
]});

return __exports;
});
;

/*********************************************************************
*  Filepath: /hr/static/tests/tours/user_modify_own_profile_tour.js  *
*  Lines: 26                                                         *
*********************************************************************/
odoo.define('@hr/../tests/tours/user_modify_own_profile_tour', ['@web_tour/js/tour_step_utils', '@web/core/registry'], async function (require) {
'use strict';
let __exports = {};
/** @odoo-module **/

const { stepUtils } = require("@web_tour/js/tour_step_utils");
const { registry } = require("@web/core/registry");

/**
 * As 'hr' changes the flow a bit and displays the user preferences form in a full view instead of
 * a modal, we adapt the steps of the original tour accordingly.
 */
registry.category("web_tour.tours").get('mail/static/tests/tours/user_modify_own_profile_tour.js').steps = [{
    content: 'Open user account menu',
    trigger: '.o_user_menu button',
}, {
    content: "Open preferences / profile screen",
    trigger: '[data-menu=settings]',
}, {
    content: "Update the email address",
    trigger: 'div[name="email"] input',
    run: 'text updatedemail@example.com',
}, ...stepUtils.saveForm()];

return __exports;
});
;

/***************************************************************************************
*  Filepath: /knowledge/static/tests/tours/commands/knowledge_article_command_tour.js  *
*  Lines: 60                                                                           *
***************************************************************************************/
odoo.define('@knowledge/../tests/tours/commands/knowledge_article_command_tour', ['@web/core/registry', '@knowledge/../tests/tours/knowledge_tour_utils', '@web_tour/js/tour_step_utils'], async function (require) {
'use strict';
let __exports = {};
/** @odoo-module */

const { registry } = require("@web/core/registry");
const { appendArticleLink, endKnowledgeTour } = require("@knowledge/../tests/tours/knowledge_tour_utils");
const { stepUtils } = require("@web_tour/js/tour_step_utils");


registry.category("web_tour.tours").add('knowledge_article_command_tour', {
    url: '/web',
    test: true,
    steps: [stepUtils.showAppsMenuItem(), {
    // open the Knowledge App
    trigger: '.o_app[data-menu-xmlid="knowledge.knowledge_menu_root"]',
}, ...appendArticleLink('[name="body"]', "EditorCommandsArticle"),
{ // wait for the block to appear in the editor
    trigger: '.o_knowledge_behavior_type_article:contains("EditorCommandsArticle")',
    run: 'click',
}, { // check that the view switched to the corresponding article while keeping the breadcrumbs history
    trigger: '.o_knowledge_header:has(.o_breadcrumb_article_name_container:contains("EditorCommandsArticle")):has(.breadcrumb-item > a:contains("EditorCommandsArticle"))'
}, ...endKnowledgeTour()
]});

const composeBody = '.modal-dialog:contains(Compose Email) [name="body"]';
registry.category("web_tour.tours").add('knowledge_article_command_dialog_tour', {
    url: '/web',
    test: true,
    steps: [stepUtils.showAppsMenuItem(), {
    // open the Knowledge App
    trigger: '.o_app[data-menu-xmlid="knowledge.knowledge_menu_root"]',
}, { // open the chatter
    trigger: '.btn-chatter',
}, { // open the message editor
    trigger: '.o_ChatterTopbar_buttonSendMessage:not([disabled=""])',
}, { // open the full composer
    trigger: '.o_ComposerView_buttonFullComposer',
}, ...appendArticleLink(`${composeBody}`, 'EditorCommandsArticle'), { // wait for the block to appear in the editor
    trigger: `${composeBody} .o_knowledge_behavior_type_article:contains("EditorCommandsArticle")`,
    run: () => {},
}, ...appendArticleLink(`${composeBody}`, 'LinkedArticle', 1), { // wait for the block to appear in the editor, after the previous one
    trigger: `${composeBody} .odoo-editor-editable > p > a:nth-child(2).o_knowledge_behavior_type_article:contains("LinkedArticle")[contenteditable="false"]`,
    run: () => {},
}, { // verify that the first block is still there and contenteditable=false
    trigger: `${composeBody} .odoo-editor-editable > p > a:nth-child(1).o_knowledge_behavior_type_article:contains("EditorCommandsArticle")[contenteditable="false"]`,
    run: () => {},
}, { // send the message
    trigger: '.o_mail_send',
}, {
    trigger: '.o_MessageListView .o_MessageView .o_MessageView_prettyBody > p > a:nth-child(1).o_knowledge_behavior_type_article:contains("EditorCommandsArticle")',
    run: () => {},
}, {
    trigger: '.o_MessageListView .o_MessageView .o_MessageView_prettyBody > p > a:nth-child(2).o_knowledge_behavior_type_article:contains("LinkedArticle")',
    run: () => {},
}, ...endKnowledgeTour()
]});

return __exports;
});
;

/************************************************************************************
*  Filepath: /knowledge/static/tests/tours/commands/knowledge_file_command_tour.js  *
*  Lines: 36                                                                        *
************************************************************************************/
odoo.define('@knowledge/../tests/tours/commands/knowledge_file_command_tour', ['@web/core/registry', '@knowledge/../tests/tours/knowledge_tour_utils', '@web_tour/js/tour_step_utils'], async function (require) {
'use strict';
let __exports = {};
/** @odoo-module */

const { registry } = require("@web/core/registry");
const { endKnowledgeTour, openCommandBar } = require("@knowledge/../tests/tours/knowledge_tour_utils");
const { stepUtils } = require("@web_tour/js/tour_step_utils");


registry.category("web_tour.tours").add('knowledge_file_command_tour', {
    url: '/web',
    test: true,
    steps: [stepUtils.showAppsMenuItem(), {
    // open the Knowledge App
    trigger: '.o_app[data-menu-xmlid="knowledge.knowledge_menu_root"]',
}, { // open the command bar
    trigger: '.odoo-editor-editable > p',
    run: function () {
        openCommandBar(this.$anchor[0]);
    },
}, { // click on the /file command
    trigger: '.oe-powerbox-commandName:contains("File")',
    run: 'click',
}, { // wait for the media dialog to open
    trigger: '.o_select_media_dialog',
}, { // click on the first item of the modal
    trigger: '.o_existing_attachment_cell:first-child',
    run: 'click'
}, { // wait for the block to appear in the editor
    trigger: '.o_knowledge_behavior_type_file',
}, ...endKnowledgeTour()
]});

return __exports;
});
;

/*************************************************************************************
*  Filepath: /knowledge/static/tests/tours/commands/knowledge_index_command_tour.js  *
*  Lines: 37                                                                         *
*************************************************************************************/
odoo.define('@knowledge/../tests/tours/commands/knowledge_index_command_tour', ['@web/core/registry', '@knowledge/../tests/tours/knowledge_tour_utils', '@web_tour/js/tour_step_utils'], async function (require) {
'use strict';
let __exports = {};
/** @odoo-module */

const { registry } = require("@web/core/registry");
const { endKnowledgeTour, openCommandBar } = require("@knowledge/../tests/tours/knowledge_tour_utils");
const { stepUtils } = require("@web_tour/js/tour_step_utils");


registry.category("web_tour.tours").add('knowledge_index_command_tour', {
    url: '/web',
    test: true,
    steps: [stepUtils.showAppsMenuItem(), {
    // open the Knowledge App
    trigger: '.o_app[data-menu-xmlid="knowledge.knowledge_menu_root"]',
}, { // open the command bar
    trigger: '.odoo-editor-editable > p',
    run: function () {
        openCommandBar(this.$anchor[0]);
    },
}, { // click on the /index command
    trigger: '.oe-powerbox-commandName:contains("Index")',
    run: 'click',
}, { // wait for the block to appear in the editor
    trigger: '.o_knowledge_behavior_type_articles_structure',
}, { // click on the refresh button
    trigger: '.o_knowledge_behavior_type_articles_structure button[title="Update"]',
    run: 'click',
}, { // click on the switch mode button
    trigger: '.o_knowledge_behavior_type_articles_structure button[title="Switch Mode"]',
    run: 'click',
}, ...endKnowledgeTour()
]});

return __exports;
});
;

/**************************************************************************************
*  Filepath: /knowledge/static/tests/tours/commands/knowledge_kanban_command_tour.js  *
*  Lines: 127                                                                         *
**************************************************************************************/
odoo.define('@knowledge/../tests/tours/commands/knowledge_kanban_command_tour', ['@web/core/registry', '@knowledge/../tests/tours/knowledge_tour_utils', '@web_tour/js/tour_step_utils'], async function (require) {
'use strict';
let __exports = {};
/** @odoo-module */

const { registry } = require("@web/core/registry");
const { endKnowledgeTour, openCommandBar } = require("@knowledge/../tests/tours/knowledge_tour_utils");
const { stepUtils } = require("@web_tour/js/tour_step_utils");


registry.category("web_tour.tours").add('knowledge_kanban_command_tour', {
    url: '/web',
    test: true,
    steps: [stepUtils.showAppsMenuItem(), { // open the Knowledge App
    trigger: '.o_app[data-menu-xmlid="knowledge.knowledge_menu_root"]',
}, { // open the command bar
    trigger: '.odoo-editor-editable > p',
    run: function () {
        openCommandBar(this.$anchor[0]);
    },
}, { // click on the /kanban command
    trigger: '.oe-powerbox-commandName:contains("Item Kanban")',
    run: 'click',
}, { // choose a name for the embedded view
    trigger: '.modal-footer button.btn-primary',
    run: 'click',
}, { // scroll to the embedded view to load it
    trigger: '.o_knowledge_behavior_type_embedded_view',
    run: function () {
        this.$anchor[0].scrollIntoView();
    },
}, { // wait for the kanban view to be mounted
    trigger: '.o_knowledge_behavior_type_embedded_view .o_kanban_renderer',
    run: () => {
        const helpField = document.querySelector('.o_knowledge_content[data-prop-name="action_help"]');
        if (!helpField) {
            throw new Error('Help field was not rendered in the DOM');
        }
        // allow further modifications of the help field for testing
        helpField.classList.remove('d-none');
    },
}, { // modify the help message in the dom
    trigger: '.o_knowledge_content[data-prop-name="action_help"] > p',
    run: function () {
        this.$anchor[0].textContent = "Test help message";
    }
}, { // create an article to switch to
    trigger: '.o_section_header:contains(Workspace) .o_section_create',
    run: 'click'
}, { // check that the article is correctly created
    trigger: '.odoo-editor-editable > h1',
    run: () => {},
}, { // switch back to the first article
    trigger: '.o_knowledge_tree .o_article_name:contains("EditorCommandsArticle")',
    run: 'click',
}, { // scroll to load
    trigger: '.o_knowledge_behavior_type_embedded_view',
    run: function () {
        this.$anchor[0].scrollIntoView();
    }
}, { // wait for the kanban view to be mounted
    trigger: '.o_knowledge_behavior_type_embedded_view .o_kanban_renderer',
    run: () => {}
}, { // open the view
    trigger: '.o_knowledge_toolbar button[title="Open"]',
    run: 'click'
}, { // verify that the help message is displayed
    trigger: '.o_action_manager > .o_view_controller.o_kanban_view .o_nocontent_help:contains("Test help message")',
    run: () => {}
}, { // go back to the first view
    trigger: '.breadcrumb a:contains("EditorCommandsArticle")',
    run: 'click',
}, { // scroll to the embedded view to load it
    trigger: '.o_knowledge_behavior_type_embedded_view',
    run: function () {
        this.$anchor[0].scrollIntoView();
    },
}, { // wait for the kanban view to be mounted
    trigger: '.odoo-editor-editable',
    extra_trigger: '.o_knowledge_behavior_type_embedded_view .o_kanban_renderer',
    run: function () {
        const helpField = document.querySelector('.o_knowledge_content[data-prop-name="action_help"]');
        if (!helpField) {
            throw new Error('Help field was not rendered in the DOM');
        }
        // focus the body otherwise change will not be saved
        this.$anchor[0].focus();
        // remove the help field from the dom for testing
        helpField.remove();
    },
}, { // switch back to the first article
    trigger: '.o_knowledge_tree .o_article_name:contains("Untitled")',
    run: 'click',
}, { // check that the article is loaded
    trigger: '.odoo-editor-editable > h1',
    run: () => {},
}, { // reswitch to the other article
    trigger: '.o_knowledge_tree .o_article_name:contains("EditorCommandsArticle")',
    run: 'click',
}, { // scroll to the embedded view to load it
    trigger: '.o_knowledge_behavior_type_embedded_view',
    run: function () {
        this.$anchor[0].scrollIntoView();
    },
}, { // wait for the kanban view to be mounted
    trigger: '.o_knowledge_behavior_type_embedded_view .o_kanban_renderer',
    run: () => {},
}, { // open the view
    trigger: '.o_knowledge_toolbar button[title="Open"]',
    run: 'click'
}, { // verify that the default help message is displayed
    trigger: '.o_action_manager > .o_view_controller.o_kanban_view .o_nocontent_help:contains("No data to display")',
    run: () => {}
}, { // go back to the first view
    trigger: '.breadcrumb a:contains("EditorCommandsArticle")',
    run: 'click',
}, { // create an article item
    trigger: '.o_knowledge_behavior_type_embedded_view .o-kanban-button-new',
    run: 'click',
}, { // verify that the view switched to the article item
    trigger: '.o_knowledge_header:has(input[id="name"]:placeholder-shown):has(.breadcrumb-item > a:contains("EditorCommandsArticle"))',
    run: () => {},
}, ...endKnowledgeTour()
]});

return __exports;
});
;

/************************************************************************************
*  Filepath: /knowledge/static/tests/tours/commands/knowledge_list_command_tour.js  *
*  Lines: 73                                                                        *
************************************************************************************/
odoo.define('@knowledge/../tests/tours/commands/knowledge_list_command_tour', ['@web/core/registry', '@knowledge/../tests/tours/knowledge_tour_utils', '@knowledge/js/knowledge_utils', '@web_tour/js/tour_step_utils'], async function (require) {
'use strict';
let __exports = {};
/** @odoo-module */

const { registry } = require("@web/core/registry");
const { endKnowledgeTour, openCommandBar } = require("@knowledge/../tests/tours/knowledge_tour_utils");
const { decodeDataBehaviorProps } = require("@knowledge/js/knowledge_utils");
const { stepUtils } = require("@web_tour/js/tour_step_utils");

const testName = "*()!'<>~";
let behaviorProps;

registry.category("web_tour.tours").add('knowledge_list_command_tour', {
    url: '/web',
    test: true,
    steps: [stepUtils.showAppsMenuItem(), { // open the Knowledge App
    trigger: '.o_app[data-menu-xmlid="knowledge.knowledge_menu_root"]',
}, { // open the command bar
    trigger: '.odoo-editor-editable > p',
    run: function () {
        openCommandBar(this.$anchor[0]);
    },
}, { // click on the /list command
    trigger: '.oe-powerbox-commandName:contains("Item List")',
    run: 'click',
}, { // input a test name for the view
    trigger: '.modal-dialog #label',
    run: `text ${testName}`,
}, { // choose a name for the embedded view
    trigger: '.modal-footer button.btn-primary',
    run: 'click'
}, { // scroll to the embedded view to load it
    trigger: '.o_knowledge_behavior_type_embedded_view',
    run: function () {
        this.$anchor[0].scrollIntoView();
    },
}, { // wait for the list view to be mounted
    trigger: '.o_knowledge_behavior_type_embedded_view .o_list_renderer',
    run: () => {},
}, { // verify that the view has the correct name and store data-behavior-props
    trigger: '.o_knowledge_embedded_view .o_control_panel .breadcrumb-item.active:contains("*()!\'<>~")',
    run: () => {
        const embeddedViewElement = document.querySelector('.o_knowledge_behavior_type_embedded_view');
        behaviorProps = decodeDataBehaviorProps(embeddedViewElement.dataset.behaviorProps);
    }
}, { // click on rename button
    trigger: '.o_knowledge_toolbar button[title="Rename"]',
    run: 'click',
}, { // click to validate the modal
    trigger: '.modal-footer button.btn-primary',
    run: 'click'
}, { // check that the name is the correct one and compare previous data-behavior-props and the new one (should be equivalent)
    trigger: '.o_knowledge_embedded_view .o_control_panel .breadcrumb-item.active:contains("*()!\'<>~")',
    run: () => {
        const embeddedViewElement = document.querySelector('.o_knowledge_behavior_type_embedded_view');
        const newBehaviorProps = decodeDataBehaviorProps(embeddedViewElement.dataset.behaviorProps);
        if (JSON.stringify(newBehaviorProps) !== JSON.stringify(behaviorProps)) {
            // check that knowledge.article render_embedded_view urllib.parse.quote did
            // produce an equivalent data-behavior-props as knowledge_utils encodeDataBehaviorProps encodeURIComponent
            throw new Error('data-behavior-props should be semantically the same as before');
        }
    }
}, {
    // reload the article to make sure that the article is saved for readonly tour
    trigger: 'a[data-menu-xmlid="knowledge.knowledge_menu_home"]',
}, { // wait for embed to be visible
    trigger: '.o_knowledge_behavior_type_embedded_view',
}, ...endKnowledgeTour()
]});

return __exports;
});
;

/***************************************************************************************
*  Filepath: /knowledge/static/tests/tours/commands/knowledge_outline_command_tour.js  *
*  Lines: 34                                                                           *
***************************************************************************************/
odoo.define('@knowledge/../tests/tours/commands/knowledge_outline_command_tour', ['@web/core/registry', '@knowledge/../tests/tours/knowledge_tour_utils', '@web_tour/js/tour_step_utils'], async function (require) {
'use strict';
let __exports = {};
/** @odoo-module */

const { registry } = require("@web/core/registry");
const { endKnowledgeTour, openCommandBar } = require("@knowledge/../tests/tours/knowledge_tour_utils");
const { stepUtils } = require("@web_tour/js/tour_step_utils");


registry.category("web_tour.tours").add('knowledge_outline_command_tour', {
    url: '/web',
    test: true,
    steps: [stepUtils.showAppsMenuItem(), {
    // open the Knowledge App
    trigger: '.o_app[data-menu-xmlid="knowledge.knowledge_menu_root"]',
}, { // open the command bar
    trigger: '.odoo-editor-editable > p',
    run: function () {
        openCommandBar(this.$anchor[0]);
    },
}, { // click on the /outline command
    trigger: '.oe-powerbox-commandName:contains("Index")',
    run: 'click',
}, { // wait for the block to appear in the editor
    trigger: '.o_knowledge_behavior_type_articles_structure',
}, { // click on the refresh button
    trigger: '.o_knowledge_behavior_type_articles_structure button[title="Update"]',
    run: 'click',
}, ...endKnowledgeTour()
]});

return __exports;
});
;

/************************************************************************************************
*  Filepath: /knowledge/static/tests/tours/commands/knowledge_table_of_content_command_tour.js  *
*  Lines: 73                                                                                    *
************************************************************************************************/
odoo.define('@knowledge/../tests/tours/commands/knowledge_table_of_content_command_tour', ['@web/core/registry', '@knowledge/../tests/tours/knowledge_tour_utils', '@web_tour/js/tour_step_utils'], async function (require) {
'use strict';
let __exports = {};
/** @odoo-module */

const { registry } = require("@web/core/registry");
const { endKnowledgeTour, openCommandBar } = require("@knowledge/../tests/tours/knowledge_tour_utils");
const { stepUtils } = require("@web_tour/js/tour_step_utils");


registry.category("web_tour.tours").add('knowledge_table_of_content_command_tour', {
    url: '/web',
    test: true,
    steps: [stepUtils.showAppsMenuItem(), {
    // open the Knowledge App
    trigger: '.o_app[data-menu-xmlid="knowledge.knowledge_menu_root"]',
}, { // open the command bar
    trigger: '.odoo-editor-editable > p',
    run: function () {
        openCommandBar(this.$anchor[0]);
    },
}, { // click on the /toc command
    trigger: '.oe-powerbox-commandName:contains("Table Of Content")',
    run: 'click',
}, { // wait for the block to appear in the editor
    trigger: '.o_knowledge_behavior_type_toc',
}, { // insert a few titles in the editor
    trigger: '.odoo-editor-editable > p',
    run: function () {
        const $anchor = $(this.$anchor[0]);
        $anchor.append([
            $('<h1>Title 1</h1>'),
            $('<h2>Title 1.1</h2>'),
            $('<h3>Title 1.1.1</h3>'),
            $('<h2>Title 1.2</h2>'),
        ]);
    },
}, { // click on the h1 anchor link generated by the toc
    trigger: '.o_knowledge_toc_link_depth_0',
    run: 'click',
}, { // open the tools panel
    trigger: '#dropdown_tools_panel',
    run: 'click',
}, { // switch to locked (readonly) mode
    trigger: '.o_knowledge_more_options_panel .btn-lock',
    run: 'click',
}, { // check that we are in readonly mode
    trigger: '.o_field_html .o_readonly',
    run: () => {},
}, { // check that the content of the toc is not duplicated
    trigger: '.o_knowledge_behavior_type_toc',
    run: function () {
        if (this.$anchor[0].querySelectorAll('.o_knowledge_toc_content').length !== 1) {
            throw new Error('The table of content group of links should be present exactly once (not duplicated)');
        }
    },
}, { // click on the h1 anchor link generated by the toc
    trigger: '.o_knowledge_toc_link_depth_0',
    run: 'click',
}, { // open the tools panel
    trigger: '#dropdown_tools_panel',
    run: 'click',
}, { // unlock the article
    trigger: '.o_knowledge_more_options_panel.show .btn-lock',
    run: 'click',
}, { // check that we are in edit mode
    trigger: '.o_field_html .odoo-editor-editable',
    run: () => {},
}, ...endKnowledgeTour()
]});

return __exports;
});
;

/****************************************************************************************
*  Filepath: /knowledge/static/tests/tours/commands/knowledge_template_command_tour.js  *
*  Lines: 71                                                                            *
****************************************************************************************/
odoo.define('@knowledge/../tests/tours/commands/knowledge_template_command_tour', ['@web/core/registry', '@knowledge/../tests/tours/knowledge_tour_utils', '@web_tour/js/tour_step_utils'], async function (require) {
'use strict';
let __exports = {};
/** @odoo-module */

const { registry } = require("@web/core/registry");
const { endKnowledgeTour, openCommandBar } = require("@knowledge/../tests/tours/knowledge_tour_utils");
const { stepUtils } = require("@web_tour/js/tour_step_utils");


registry.category("web_tour.tours").add('knowledge_template_command_tour', {
    url: '/web',
    test: true,
    steps: [stepUtils.showAppsMenuItem(), {
    // open the Knowledge App
    trigger: '.o_app[data-menu-xmlid="knowledge.knowledge_menu_root"]',
}, { // go to the custom article
    trigger: '.o_article .o_article_name:contains("EditorCommandsArticle")',
}, { // wait for article to be correctly loaded
    trigger: '.o_breadcrumb_article_name_container:contains("EditorCommandsArticle")',
    run: () => {},
}, { // open the command bar
    trigger: '.odoo-editor-editable > p',
    run: function () {
        openCommandBar(this.$anchor[0]);
    },
}, { // click on the /template command
    trigger: '.oe-powerbox-commandName:contains("Template")',
    run: 'click',
}, { // wait for the block to appear in the editor
    trigger: '.o_knowledge_behavior_type_template',
}, { // enter text into the mail template
    trigger: '.o_knowledge_content > p',
    run: 'text Hello world'
}, { // verify that the text was correctly inserted
    trigger: '.o_knowledge_content > p:contains(Hello world)',
}, { // open the chatter
    trigger: '.btn-chatter',
    run: 'click',
}, {
    trigger: '.o_MessageListView',
    run: () => {},
}, { // open the follower list of the article
    trigger: '.o_FollowerListMenuView_buttonFollowers',
    run: 'click',
}, { // open the contact record of the follower
    trigger: '.o_FollowerView_details:contains(HelloWorldPartner)',
    run: 'click',
}, { // verify that the partner form view is fully loaded
    trigger: '.breadcrumb > .breadcrumb-item.active:contains(HelloWorldPartner)',
    run: () => {},
}, { // search an article to open it from the contact record
    trigger: 'button[title="Search Knowledge Articles"]',
    run: 'click',
}, { // open the article
    trigger: '.o_command_default:contains(EditorCommandsArticle)',
    run: 'click',
}, { // wait for article to be correctly loaded
    trigger: '.o_breadcrumb_article_name_container:contains("EditorCommandsArticle")',
    run: () => {},
}, { // use the template as description for the contact record
    trigger: '.o_knowledge_behavior_type_template button[title="Use as Description"]',
    run: 'click',
}, { // check that the content of the template was inserted as description
    trigger: '.o_form_sheet .o_field_html .odoo-editor-editable p:first-child:contains("Hello world")',
    run: () => {},
}, ...endKnowledgeTour()
]});

return __exports;
});
;

/**********************************************************************
*  Filepath: /knowledge/static/tests/tours/knowledge_cover_picker.js  *
*  Lines: 191                                                         *
**********************************************************************/
odoo.define('@knowledge/../tests/tours/knowledge_cover_picker', ['@knowledge/../tests/tours/knowledge_tour_utils', '@web/core/registry', '@web_tour/js/tour_step_utils'], async function (require) {
'use strict';
let __exports = {};
/** @odoo-module */

const { endKnowledgeTour, makeVisible } = require("@knowledge/../tests/tours/knowledge_tour_utils");
const { registry } = require("@web/core/registry");
const { stepUtils } = require("@web_tour/js/tour_step_utils");

function moveCover(position) {
    const cover = document.querySelector('.o_knowledge_cover img');
    cover.dispatchEvent(new PointerEvent('pointerdown'));
    document.dispatchEvent(new PointerEvent('pointermove', {clientY: position}));
    document.dispatchEvent(new PointerEvent('pointerup'));
}

/**
 * Tests the cover picker feature when unsplash credentials are unset. In this
 * case, the "Add Cover" button should always open the cover selector.
 */
registry.category("web_tour.tours").add('knowledge_cover_selector_tour', {
    test: true,
    url: '/web',
    steps: [stepUtils.showAppsMenuItem(), {
    // Open Knowledge App
    trigger: '.o_app[data-menu-xmlid="knowledge.knowledge_menu_root"]',
}, {
    // Click on the "Create" button
    trigger: '.o_knowledge_header .btn-create',
}, {
    // Set the name of the article
    trigger: '.o_breadcrumb_article_name > input',
    extra_trigger: '.o_article_active:contains("Untitled")',
    run: 'text Birds',
}, {
    // Make the add cover button visible (only visible on hover)
    trigger: '.o_article_active:contains("Birds")',
    run: () => makeVisible('.o_knowledge_add_cover'),
}, {
    // Click on add cover button
    trigger: '.o_knowledge_add_cover',
}, {
    // Check that the cover selector has been opened and that it shows
    // the form allowing to enter unsplash credentials, and click on the
    // add url button
    trigger: '.o_upload_media_url_button',
    extra_trigger: '.modal-body .unsplash_error',
    run: () => {},
}, {
    // Change the search query to find odoo_logo file
    trigger: '.modal-body input.o_we_search',
    extra_trigger: '.modal-body .o_nocontent_help',
    run: 'text odoo_logo',
}, {
    // Choose the odoo_logo cover
    trigger: '.o_existing_attachment_cell img[title*="odoo_logo"]',
    run: 'click',
}, {
    // Check cover has been added to the article and is initially centered and
    // make the reposition cover button visible
    trigger: '.o_knowledge_cover img[style="object-position: 50% 50%;"]',
    run: () => makeVisible('.o_knowledge_reposition_cover'),
}, {
    // Click on the reposition cover button
    trigger: '.o_knowledge_reposition_cover',
}, {
    // Move the cover down and click on the "Cancel" button
    trigger: '.o_reposition_hint',
    run: () => {
        moveCover(1000);
        const undoButton = document.querySelector('.o_knowledge_undo_cover_move');
        // Timeout to make sure the event is fired after that the cover has moved
        setTimeout(() => undoButton.dispatchEvent(new PointerEvent('pointerdown', {bubbles: true})), 0);
    },
}, {
    // Check that the undo button works as expected (cover should be centered)
    trigger: '.o_knowledge_cover img[style="object-position: 50% 50%;"]',
    extra_trigger: '.o_knowledge_cover:not(:has(.o_reposition_hint))',
    run: () => makeVisible('.o_knowledge_reposition_cover'),
}, {
    // Move cover again but use the "save" button this time
    trigger: '.o_knowledge_reposition_cover',
}, {
    trigger: '.o_reposition_hint',
    run: () => {
        moveCover(1000);
        const saveButton = document.querySelector('.o_knowledge_save_cover_move');
        // Timeout to make sure the event is fired after that the cover has moved
        setTimeout(() => saveButton.dispatchEvent(new PointerEvent('pointerdown', {bubbles: true})), 0);
    }
}, {
    // Check that the cover is positioned at the top
    trigger: '.o_knowledge_cover img[style="object-position: 50% 0.01%;"]',
    extra_trigger: '.o_knowledge_cover:not(:has(.o_reposition_hint))',
}, {
    // Create another article
    trigger: '.o_knowledge_header .btn-create',
}, {
    // Change the name of the article
    trigger: '.o_breadcrumb_article_name > input',
    extra_trigger: '.o_article_active:contains("Untitled")',
    run: 'text odoo',
}, {
    // Go back to previous article
    trigger: '.o_knowledge_aside .o_article_name:contains("Birds")',
    extra_trigger: '.o_article_active:contains("odoo")',
}, {
    // Check that the cover is still positioned at the top and make the replace
    // cover visible
    trigger: '.o_knowledge_cover img[style="object-position: 50% 0.01%;"]',
    extra_trigger: '.o_article_active:contains("Birds")',
    run: () => makeVisible('.o_knowledge_replace_cover'),
}, {
    // Click on replace cover button
    trigger: '.o_knowledge_replace_cover',
}, {
    // Check that the cover selector has been opened, that no image is shown
    // since the search query (birds) do not match the name of the existing
    // cover, and close the cover selector
    trigger: '.modal-footer .btn-secondary',
    extra_trigger: '.modal-body .o_nocontent_help',
}, {
    // Make the remove cover button visible
    trigger: '.o_knowledge_edit_cover_buttons',
    run: () => makeVisible('.o_knowledge_remove_cover'),
}, {
    // Click on remove cover button
    trigger: '.o_knowledge_remove_cover',
}, {
    // Check cover has been removed from the article and open other article
    trigger: '.o_knowledge_aside .o_article_name:contains("odoo")',
    extra_trigger: '.o_widget_knowledge_cover:not(:has(.o_knowledge_cover))',
}, {
    // Make the add cover button visible
    trigger: '.o_article_active:contains("odoo")',
    run: () => makeVisible('.o_knowledge_add_cover'),
}, {
    // Click on add cover button
    trigger: '.o_knowledge_add_cover',
}, {
    // Check that odoo logo previously uploaded is shown in the selector as the
    // search query, which is the article name, is "odoo" which is also in the
    // cover attachment's name, and that clicking on it sets it as cover of the
    // current article
    trigger: '.modal-body .o_existing_attachment_cell img[title="odoo_logo.png"]',
}, {
    // Check cover has been set, and open previous article again
    trigger: '.o_knowledge_aside .o_article_name:contains("Birds")',
    extra_trigger: '.o_knowledge_cover',
}, {
    // Make the add cover button visible
    trigger: '.o_knowledge_edit_cover_buttons',
    run: () => makeVisible('.o_knowledge_add_cover'),
}, {
    // Click on add cover button
    trigger: '.o_knowledge_add_cover',
}, {
    // Check odoo logo is not shown as the search query does not match its name
    // and remove search query
    trigger: '.modal-body input.o_we_search',
    extra_trigger: '.modal-body .o_nocontent_help',
    run: 'remove_text',
}, {
    // Check that odoo logo is now shown in the cover selector, and make the trash
    // button visible
    trigger: '.modal-body .o_existing_attachment_cell img[title="odoo_logo.png"]',
    run: () => makeVisible('.modal-body .o_existing_attachment_cell .o_existing_attachment_remove')
}, {
    // Click on delete cover button
    trigger: '.modal-body .o_existing_attachment_cell:has(img[title="odoo_logo.png"]) .o_existing_attachment_remove',
}, {
    // Confirm deletion of cover (should ask for confirmation)
    trigger: '.modal-footer .btn-primary',
    extra_trigger: '.modal-title:contains("Confirmation")'
}, {
    // Check that no cover is shown anymore in the cover selector, and close it
    trigger: '.modal-footer .btn-secondary',
    extra_trigger: '.modal-body .o_we_existing_attachments:not(:has(.o_existing_attachment_cell))',
}, {
    // Open other article to check that its cover has been removed since it has
    // been deleted
    trigger: '.o_knowledge_aside .o_article_name:contains("odoo")',
}, {
    trigger: '.o_widget_knowledge_cover:not(:has(.o_knowledge_cover))',
    extra_trigger: '.o_article_active:contains("odoo")',
    allowInvisible: true,
}, ...endKnowledgeTour()
]});

return __exports;
});
;

/******************************************************************************
*  Filepath: /knowledge/static/tests/tours/knowledge_cover_random_unplash.js  *
*  Lines: 78                                                                  *
******************************************************************************/
odoo.define('@knowledge/../tests/tours/knowledge_cover_random_unplash', ['@knowledge/../tests/tours/knowledge_tour_utils', '@web/core/registry', '@web_tour/js/tour_step_utils'], async function (require) {
'use strict';
let __exports = {};
/** @odoo-module */

const { endKnowledgeTour, makeVisible } = require("@knowledge/../tests/tours/knowledge_tour_utils");
const { registry } = require("@web/core/registry");
const { stepUtils } = require("@web_tour/js/tour_step_utils");

/**
 * Tests the cover picker feature when unsplash credentials are set. In this
 * case, the "Add Cover" button should either add a random picture from a 
 * selected unsplash collection if no name is set on the article, either
 * add a random image using the article name as query word.
 */
registry.category("web_tour.tours").add('knowledge_random_cover_tour', {
    test: true,
    url: '/web',
    steps: [stepUtils.showAppsMenuItem(), {
    // Open Knowledge App
    trigger: '.o_app[data-menu-xmlid="knowledge.knowledge_menu_root"]',
}, {
    // Click on the "Create" action
    trigger: '.o_knowledge_header .btn-create',
}, {
    // Make the add cover button visible (only visible on hover)
    trigger: '.o_article_active:contains("Untitled")',
    run: () => makeVisible('.o_knowledge_add_cover'),
}, {
    // Click on add cover button
    trigger: '.o_knowledge_add_cover',
}, {
    // Check that a cover has been added, and make the change cover button visible
    trigger: '.o_knowledge_cover .o_knowledge_cover_image',
    run: () => makeVisible('.o_knowledge_replace_cover'),
}, {
    // Click on change cover button
    trigger: '.o_knowledge_replace_cover',
}, {
    // Check that the cover selector has been opened, that no unsplash images can be
    // loaded as the article has no name and close the cover selector
    trigger: '.modal-footer .btn-secondary',
    extra_trigger: '.modal-body .o_load_done_msg',
}, {
    // Make the remove cover button visible
    trigger: '.o_knowledge_edit_cover_buttons',
    run: () => makeVisible('.o_knowledge_remove_cover'),
}, {
    // Remove the cover of the article
    trigger: '.o_knowledge_remove_cover',
}, {
    // Set the name of the article
    trigger: '.o_breadcrumb_article_name > input',
    run: 'text Birds',
}, {
    // Make the add cover button visible
    trigger: '.o_article_active:contains("Birds")',
    run: () => makeVisible('.o_knowledge_add_cover'),
}, {
    // Click on add cover button
    trigger: '.o_knowledge_add_cover',
}, {
    // Check that a cover has been added and make the change cover button visible
    trigger: '.o_knowledge_cover .o_knowledge_cover_image',
    run: () => makeVisible('.o_knowledge_replace_cover'),
}, {
    // Click on change cover button
    trigger: '.o_knowledge_replace_cover',
}, {
    // Check that the cover selector has been opened, that other unsplash
    // images can be loaded and close the cover selector
    trigger: '.modal-footer .btn-secondary',
    extra_trigger: '.modal-body .o_load_more',
}, ...endKnowledgeTour()
]});

return __exports;
});
;

/*****************************************************************************
*  Filepath: /knowledge/static/tests/tours/knowledge_embedded_views_tour.js  *
*  Lines: 60                                                                 *
*****************************************************************************/
odoo.define('@knowledge/../tests/tours/knowledge_embedded_views_tour', ['web_tour.tour', '@web_tour/js/tour_step_utils', '@knowledge/../tests/tours/knowledge_tour_utils'], async function (require) {
'use strict';
let __exports = {};
/** @odoo-module */

const tour = require('web_tour.tour');
const { stepUtils } = require("@web_tour/js/tour_step_utils");
const { endKnowledgeTour, openCommandBar } = require("@knowledge/../tests/tours/knowledge_tour_utils");

tour.register('knowledge_embedded_view_filters_tour', {
    test: true,
    url: '/web',
}, [stepUtils.showAppsMenuItem(), {
    // open Knowledge App
    trigger: '.o_app[data-menu-xmlid="knowledge.knowledge_menu_root"]',
}, { // open the command bar
    trigger: '.odoo-editor-editable > p',
    run: function () {
        openCommandBar(this.$anchor[0]);
    },
}, { // add embedded list view of article items
    trigger: '.oe-powerbox-commandName:contains("Item List")'
}, {
    trigger: '.btn-primary'
}, { // Check that we have 2 elements in the embedded view
    trigger: 'tbody tr.o_data_row:nth-child(2)',
    run: () => {}
}, { // add a simple filter
    trigger: '.o_searchview_input_container input',
    run: 'text 1'
}, {
    trigger: 'li#1'
}, { // Check that the filter is effective
    trigger: 'tbody:not(tr.o_data_row:nth-child(2))',
    run: () => {}
}, { // Open the filtered article
    trigger: 'tbody > tr > td[name="display_name"]'
}, { // Wait for the article to be open
    trigger: '.o_breadcrumb_article_name_container > span:contains("Child 1")',
    run: () => {}
}, { // Open parent via the sidebar
    trigger: '.o_article_name:contains("EditorCommandsArticle")'
}, { // Check that there is no filter in the searchBar
    trigger: '.o_searchview_input_container:not( > div)',
    run: () => {}
}, { // Check that we have 2 elements in the embedded view
    trigger: 'tbody tr.o_data_row:nth-child(2)',
    run: () => {}
}, { // Go back via the breadcrumb
    trigger: '.o_back_button'
}, { // Check that there is the filter in the searchBar
    trigger: '.o_searchview_input_container > div',
    run: () => {}
}, { // Check that the filter is effective
    trigger: 'tbody:not(tr.o_data_row:nth-child(2))',
    run: () => {}
}, ...endKnowledgeTour()]);

return __exports;
});
;

/************************************************************************
*  Filepath: /knowledge/static/tests/tours/knowledge_load_more_tour.js  *
*  Lines: 295                                                           *
************************************************************************/
odoo.define('@knowledge/../tests/tours/knowledge_load_more_tour', ['web_tour.tour', '@web_tour/js/tour_step_utils'], async function (require) {
'use strict';
let __exports = {};
/** @odoo-module */

const tour = require('web_tour.tour');
const { stepUtils } = require("@web_tour/js/tour_step_utils");

/**
 * Returns the jQuery selector to find the nth element in the specified depth.
 * e.g: The 50th element of depth 1 would be "Child Article 49".
 * 
 * @param {integer} n 
 * @param {String} depth 
 */
const getNthArticleSelector = (n, depth) => {
    let articleBaseName;
    if (depth === 0) {
        articleBaseName = 'Root Article';
    } else if (depth === 1) {
        articleBaseName = 'Child Article';
    } else {
        articleBaseName = 'Grand-Child Article';
    }

    // articles are index based so we subtract 1
    return `li.o_article:contains("${articleBaseName} ${n-1}")`;
};

/**
 * Helper to fetch an article item in the tree view.
 * We need to use "xpath" as a simple "querySelector" does not support finding
 * elements by their contained text.
 * 
 * @param {String} name 
 * @returns 
 */
const findArticleNodeNyName = (name) => {
    return document.evaluate(
        `//li[contains(@class, "o_article")][contains(., "${name}")]`,
        document
    ).iterateNext();
};

/**
 * Simple use case:
 * 
 * No specific "active article".
 * Check that on the root sub-tree, we only show 50 articles.
 * Then load more and verify we now have 100.
 * Etc. until everything is displayed.
 */
const LOAD_MORE_SIMPLE_STEPS = [{
    // open Knowledge App
    trigger: '.o_app[data-menu-xmlid="knowledge.knowledge_menu_root"]',
}, {
    // check first article is displayed
    trigger: getNthArticleSelector(1, 0),
    run: () => {},
}, {
    // check 50th article is displayed
    trigger: getNthArticleSelector(50, 0),
    run: () => {},
}, {
    // check that the 51th article is NOT displayed, a bit tricky
    trigger: 'section[data-section="workspace"]',
    run: () => {
        const article51 = findArticleNodeNyName("Root Article 50");
        if (!article51) {
            document.querySelector('section[data-section="workspace"]').classList.add(
                'knowledge_load_more_tour_step_root_51_success');
        }
    }
}, {
    // check our previous step succeeded
    trigger: 'section[data-section="workspace"].knowledge_load_more_tour_step_root_51_success',
    run: () => {},
}, {
    // click to load more articles
    trigger: 'section[data-section="workspace"] > ul .o_knowledge_article_load_more',
}, {
    // check 51th article is displayed
    trigger: getNthArticleSelector(51, 0),
    run: () => {},
}, {
    // check 100th article is displayed
    trigger: getNthArticleSelector(100, 0),
    run: () => {},
}, {
    // check that the 101th article is NOT displayed, a bit tricky
    trigger: 'section[data-section="workspace"]',
    run: () => {
        const article101 = findArticleNodeNyName("Root Article 100");
        if (!article101) {
            document.querySelector('section[data-section="workspace"]').classList.add(
                'knowledge_load_more_tour_step_root_101_success');
        }
    }
}, {
    // check our previous step succeeded
    trigger: 'section[data-section="workspace"].knowledge_load_more_tour_step_root_101_success',
    run: () => {},
}, {
    // check that there is only a single "load more" button
    trigger: 'section[data-section="workspace"]',
    run: () => {
        const loadMoreButtons = document.querySelectorAll(
            'section[data-section="workspace"] > ul .o_knowledge_article_load_more');
        if (loadMoreButtons.length === 1) {
            document.querySelector('section[data-section="workspace"]').classList.add(
                'knowledge_load_more_tour_step_single_button_success');
        }
    }
}, {
    // check our previous step succeeded
    trigger: 'section[data-section="workspace"].knowledge_load_more_tour_step_single_button_success',
    run: () => {},
}, {
    // click to load more articles
    trigger: 'section[data-section="workspace"] > ul .o_knowledge_article_load_more',
}, {
    // check 101th article is displayed
    trigger: getNthArticleSelector(101, 0),
    run: () => {},
}, {
    // check 150th article is displayed
    trigger: getNthArticleSelector(150, 0),
    run: () => {},
}, {
    // click to load more articles
    trigger: 'section[data-section="workspace"] > ul .o_knowledge_article_load_more',
}, {
    // check 153th article is displayed (last article of this sub-tree)
    trigger: getNthArticleSelector(153, 0),
    run: () => {},
}, {
    // check that we hide "load more" as we loaded everything in that sub-tree
    trigger: 'section[data-section="workspace"]',
    run: () => {
        const loadMoreButtons = document.querySelectorAll(
            'section[data-section="workspace"] > ul .o_knowledge_article_load_more');
        if (loadMoreButtons.length === 0) {
            document.querySelector('section[data-section="workspace"]').classList.add(
                'knowledge_load_more_tour_step_no_button_success');
        }
    }
}, {
    // check our previous step succeeded
    trigger: 'section[data-section="workspace"].knowledge_load_more_tour_step_no_button_success',
    run: () => {},
}];

/**
 * Advanced use case:
 *
 * The active article is within a hierarchy where itself is not within the 50 first articles
 * of its sub-tree but its ancestors are ALSO not within the 50 first articles of their own sub-tree.
 * 
 * Check that everything is correctly displayed, notably the fact that we "force" the display
 * of the active article and its ancestors.
 * 
 * The use case is as follows:
 * - 153 root articles
 * - 254 children, all of which are children of "Root Article 103" (the 104th root article)
 * - 344 grand-children, all of which are children of "Child Article 203" (the 204th child article)
 * 
 * When opening the tree, "Root Article 103", "Child Article 203" and "Grand-Child Article 218"
 * should all be forcefully displayed, even though outside of 50 first articles of their respective
 * sub-tree.
 */
const LOAD_MORE_ADVANCED_STEPS = [{
    trigger: 'a[data-menu-xmlid="knowledge.knowledge_menu_article"]',
}, {
    trigger: 'input.o_searchview_input',
    run: 'text Grand-Child Article 218',
}, {
    trigger: 'input.o_searchview_input',
    run: () => {
        document.querySelector('input.o_searchview_input')
            .dispatchEvent(new KeyboardEvent('keydown', {key: 'Enter', which: 13, bubbles: true}));
    },
}, {
    trigger: 'tr.o_data_row td[name="display_name"]',
    run: 'click',
}, {
    // check first article is displayed
    trigger: getNthArticleSelector(1, 0),
    run: () => {},
}, {
    // check first article ancestor is displayed (even though outside of 50 first)
    // it should be placed after the 50th article and after the load more
    trigger: `${getNthArticleSelector(50, 0)}+.o_knowledge_article_load_more+${getNthArticleSelector(104, 0)}`,
    run: () => {},
}, {
    // check second article ancestor is displayed (even though outside of 50 first)
    // it should be placed after the 50th child article and after the load more
    trigger: `${getNthArticleSelector(50, 1)}+.o_knowledge_article_load_more+${getNthArticleSelector(204, 1)}`,
    run: () => {},
}, {
    // check the active article is displayed (even though outside of 50 first)
    // it should be placed after the 50th grand-child article and after the load more
    trigger: `${getNthArticleSelector(50, 2)}+.o_knowledge_article_load_more+${getNthArticleSelector(219, 2)}`,
    run: () => {},
}, {
    // click on load more for the root articles
    trigger: `${getNthArticleSelector(50, 0)}+.o_knowledge_article_load_more`,
}, {
    // check first article ancestor is displayed (even though outside of 100 first)
    // it should be placed after 100th root article and after the load more
    trigger: `${getNthArticleSelector(100, 0)}+.o_knowledge_article_load_more+${getNthArticleSelector(104, 0)}`,
    run: () => {},
}, {
    // click on load more for the root articles
    trigger: `${getNthArticleSelector(100, 0)}+.o_knowledge_article_load_more`,
}, {
    // check first article ancestor is displayed at its correct spot
    trigger: `${getNthArticleSelector(103, 0)}+${getNthArticleSelector(104, 0)}`,
    run: () => {},
}, {
    // click on load more for the children articles
    trigger: `${getNthArticleSelector(50, 1)}+.o_knowledge_article_load_more`,
}, {
    // check second article ancestor is displayed (even though outside of 100 first)
    // it should be placed after the 100th child article and after the load more
    trigger: `${getNthArticleSelector(100, 1)}+.o_knowledge_article_load_more+${getNthArticleSelector(204, 1)}`,
    run: () => {},
}, {
    // click on load more for the children articles
    trigger: `${getNthArticleSelector(100, 1)}+.o_knowledge_article_load_more`,
}, {
    // check second article ancestor is displayed (even though outside of 100 first)
    // it should be placed after the 150th child article and after the load more
    trigger: `${getNthArticleSelector(150, 1)}+.o_knowledge_article_load_more+${getNthArticleSelector(204, 1)}`,
    run: () => {},
}, {
    // click on load more for the children articles
    trigger: `${getNthArticleSelector(150, 1)}+.o_knowledge_article_load_more`,
}, {
    // check second article ancestor is displayed (even though outside of 100 first)
    // it should be placed after the 200th child article and after the load more
    trigger: `${getNthArticleSelector(200, 1)}+.o_knowledge_article_load_more+${getNthArticleSelector(204, 1)}`,
    run: () => {},
}, {
    // click on load more for the children articles
    trigger: `${getNthArticleSelector(200, 1)}+.o_knowledge_article_load_more`,
}, {
    // check second article ancestor is displayed (even though outside of 100 first)
    // it should be placed at its correct spot after 203
    trigger: `${getNthArticleSelector(203, 1)}+${getNthArticleSelector(204, 1)}`,
    run: () => {},
}, {
    // click on load more for the grand-children articles
    trigger: `${getNthArticleSelector(50, 2)}+.o_knowledge_article_load_more`,
}, {
    // check active article is displayed (even though outside of 100 first)
    // it should be placed after the 100th grand-child article and after the load more
    trigger: `${getNthArticleSelector(100, 2)}+.o_knowledge_article_load_more+${getNthArticleSelector(219, 2)}`,
    run: () => {},
}, {
    // click on load more for the grand-children articles
    trigger: `${getNthArticleSelector(100, 2)}+.o_knowledge_article_load_more`,
}, {
    // check active article is displayed (even though outside of 100 first)
    // it should be placed after the 150th grand-child article and after the load more
    trigger: `${getNthArticleSelector(150, 2)}+.o_knowledge_article_load_more+${getNthArticleSelector(219, 2)}`,
    run: () => {},
}, {
    // click on load more for the grand-children articles
    trigger: `${getNthArticleSelector(150, 2)}+.o_knowledge_article_load_more`,
}, {
    // check active article is displayed (even though outside of 100 first)
    // it should be placed after the 200th grand-child article and after the load more
    trigger: `${getNthArticleSelector(200, 2)}+.o_knowledge_article_load_more+${getNthArticleSelector(219, 2)}`,
    run: () => {},
}, {
    // click on load more for the grand-children articles
    trigger: `${getNthArticleSelector(200, 2)}+.o_knowledge_article_load_more`,
}, {
    // check active article is displayed (even though outside of 100 first)
    // it should be placed at its correct spot after 218
    trigger: `${getNthArticleSelector(218, 2)}+${getNthArticleSelector(219, 2)}`,
    run: () => {},
}];

tour.register('knowledge_load_more_tour', {
    test: true,
    url: '/web',
}, [
    stepUtils.showAppsMenuItem(),
    ...LOAD_MORE_SIMPLE_STEPS,
    ...LOAD_MORE_ADVANCED_STEPS,
]);

return __exports;
});
;

/************************************************************************
*  Filepath: /knowledge/static/tests/tours/knowledge_main_flow_tour.js  *
*  Lines: 257                                                           *
************************************************************************/
odoo.define('@knowledge/../tests/tours/knowledge_main_flow_tour', ['@knowledge/../tests/tours/knowledge_tour_utils', '@web/core/registry', '@web_tour/js/tour_step_utils'], async function (require) {
'use strict';
let __exports = {};
/** @odoo-module */

/**
 * Global Knowledge flow tour.
 * Features tested:
 * - Create an article
 * - Change its title / content
 * - Share an article with a created partner
 * - Create 2 children articles and invert their order
 * - Favorite 2 different articles and invert their order in the favorite section
 */

const { endKnowledgeTour } = require('@knowledge/../tests/tours/knowledge_tour_utils');
const { registry } = require("@web/core/registry");
const { stepUtils } = require("@web_tour/js/tour_step_utils");

const moveArticle = __exports.moveArticle = ($element, $target) => {
    const elementCenter = $element.offset();
    elementCenter.left += $element.outerWidth() / 2;
    elementCenter.top += $element.outerHeight() / 2;
    const targetCenter = $target.offset();
    targetCenter.left += $target.outerWidth() / 2;
    targetCenter.top += $target.outerHeight() / 2;
    const sign = Math.sign(targetCenter.top - elementCenter.top);
    // The mouse needs to be above (or below) the target depending on element
    // position (below (or above)) to consistently trigger the correct move.
    const offsetY = sign * $target.outerHeight() / 2;

    $element.trigger($.Event("mouseenter"));
    $element.trigger($.Event("mousedown", {
        which: 1,
        pageX: elementCenter.left,
        pageY: elementCenter.top,
    }));

    // The initial movement distance should be greater than the minimal movement
    // distance before the drag event starts on the (nested)sortable element
    $element.trigger($.Event("mousemove", {
        which: 1,
        pageX: elementCenter.left,
        pageY: elementCenter.top + sign * 11,
    }));

    // The timeout should be greater than the value of the delay before
    // the drag event starts on the (nested)sortable element
    setTimeout(() => {
        $element.trigger($.Event("mousemove", {
            which: 1,
            pageX: targetCenter.left,
            pageY: targetCenter.top + offsetY,
        }));

        $element.trigger($.Event("mouseup", {
            which: 1,
            pageX: targetCenter.left,
            pageY: targetCenter.top + offsetY,
        }));
    }, 151);
};

registry.category("web_tour.tours").add('knowledge_main_flow_tour', {
    test: true,
    url: '/web',
    steps: [stepUtils.showAppsMenuItem(), {
    // open Knowledge App
    trigger: '.o_app[data-menu-xmlid="knowledge.knowledge_menu_root"]',
}, {
    // click on the main "New" action
    trigger: '.o_knowledge_header .btn:contains("New")',
}, {
    trigger: 'section[data-section="private"] .o_article .o_article_name:contains("Untitled")',
    run: () => {},  // check that the article is correctly created (private section)
}, {
    trigger: '.note-editable.odoo-editor-editable h1',
    run: 'text My Private Article',  // modify the article content
}, {
    trigger: 'section[data-section="workspace"]',
    run: () => {
        // force the create button to be visible (it's only visible on hover)
        $('section[data-section="workspace"] .o_section_create').css('visibility', 'visible');
    },
}, {
    // create an article in the "Workspace" section
    trigger: 'section[data-section="workspace"] .o_section_create',
}, {
    // check that the article is correctly created (workspace section), and that the previous
    // article has been renamed using its title (first h1 in body).
    trigger: 'section[data-section="workspace"] .o_article .o_article_name:contains("Untitled")',
    extra_trigger: 'section[data-section="private"] .o_article .o_article_name:contains("My Private Article")',
    run: () => {},
}, {
    trigger: '.o_breadcrumb_article_name > input',
    run: 'text My Workspace Article',  // modify the article name
}, {
    trigger: '.note-editable.odoo-editor-editable',
    run: 'text Content of My Workspace Article',  // modify the article content
}, {
    trigger: '.o_article:contains("My Workspace Article")',
    run: () => {
        // force the create button to be visible (it's only visible on hover)
        $('.o_article:contains("My Workspace Article") button.o_article_create').css('visibility', 'visible');
    },
}, {
    // create child article
    trigger: '.o_article:contains("My Workspace Article") button.o_article_create',
}, {
    trigger: 'section[data-section="workspace"] .o_article .o_article_name:contains("Untitled")',
    run: () => {},  // check that the article is correctly created (workspace section)
}, {
    trigger: '.o_breadcrumb_article_name > input',
    run: 'text Child Article 1',  // modify the article name
}, {
    trigger: '.o_article:contains("My Workspace Article")',
    run: () => {
        // force the create button to be visible (it's only visible on hover)
        $('.o_article:contains("My Workspace Article") button.o_article_create').css('visibility', 'visible');
    },
}, {
    // create child article (2)
    trigger: '.o_article:contains("My Workspace Article") button.o_article_create',
}, {
    trigger: 'section[data-section="workspace"] .o_article .o_article_name:contains("Untitled")',
    run: () => {},  // check that the article is correctly created (workspace section)
}, {
    trigger: '.o_breadcrumb_article_name > input',
    run: 'text Child Article 2',  // modify the article name
}, {
    // move child article 2 above child article 1
    trigger: '.o_article_handle:contains("Child Article 2")',
    run: () => {
        moveArticle(
            $('.o_article_handle:contains("Child Article 2")'),
            $('.o_article_handle:contains("Child Article 1")'),
        );
    },
}, {
    // verify that the move was done
    trigger: '.o_article:has(.o_article_name:contains("My Workspace Article")) ul > :eq(0):contains("Child Article 2")',
    run: () => {},
}, {
    // go back to main workspace article
    trigger: 'section[data-section="workspace"] .o_article .o_article_name:contains("My Workspace Article")',
}, {
    trigger: '.o_knowledge_editor:contains("Content of My Workspace Article")',
    run: () => {},  // wait for article to be correctly loaded
}, {
    // open the share dropdown
    trigger: '.o_knowledge_header .btn:contains("Share")',
}, {
    // click on 'Invite'
    trigger: '.o_knowledge_share_panel .btn:contains("Invite")',
}, {
    // Type the invited person's name
    trigger: '.o_field_many2many_tags_email[name=partner_ids] input',
    run: 'text micheline@knowledge.com',
}, {
    // Create the partner
    trigger: '.ui-autocomplete.dropdown-menu a:contains("micheline@knowledge.com")',
    in_modal: false,
}, {
    // Submit the invite wizard
    trigger: 'button:contains("Invite")',
    extra_trigger: '.o_field_tags span.o_badge_text',
}, {
    // add to favorite
    trigger: '.o_toggle_favorite',
}, {
    // check article was correctly added into favorites
    trigger: 'section.o_favorite_container .o_article .o_article_name:contains("My Workspace Article")',
    run: () => {},
}, {
    // open the share dropdown
    trigger: '.o_knowledge_header .btn:contains("Share")',
}, {
    // open the share dropdown
    trigger: '.o_member_email:contains("micheline@knowledge.com")',
    in_modal: false,
    run: () => {},
}, {
    // go back to main workspace article
    trigger: 'section[data-section="private"] .o_article .o_article_name:contains("My Private Article")',
}, {
    trigger: '.o_knowledge_editor:contains("My Private Article")',
    run: () => {},  // wait for article to be correctly loaded
}, {
    // add to favorite
    trigger: '.o_toggle_favorite',
}, {
    // wait for the article to be registered as favorited
    trigger: '.o_toggle_favorite .fa-star',
    run: () => {},
}, {
    // move private article above workspace article in the favorite section
    trigger: 'section.o_favorite_container .o_article_handle:contains("My Private Article")',
    run: () => {
        moveArticle(
            $('section.o_favorite_container .o_article_handle:contains("My Private Article")'),
            $('section.o_favorite_container .o_article_handle:contains("My Workspace Article")'),
        );
    },
}, {
    // verify that the move was done
    trigger: 'section.o_favorite_container ul > :eq(0):contains("My Private Article")',
    run: () => {},
}, {
    // go back to main workspace article
    trigger: 'section[data-section="workspace"] .o_article .o_article_name:contains("My Workspace Article")',
}, {
    trigger: ':contains("Content of My Workspace Article")',
    run() {},
}, {
    // click on the main "New" action
    trigger: '.o_knowledge_header .btn:contains("New")',
}, {
    trigger: 'section[data-section="private"] .o_article .o_article_name:contains("Untitled")',
    run: () => {}, // check that the article is correctly created (private section)
}, {
    trigger: '.o_breadcrumb_article_name > input',
    run: 'text Article to be moved',  // modify the article name
}, {
    trigger: 'a#dropdown_tools_panel',
    run: 'click'
}, {
    trigger: '.btn-move',
    run: 'click',
}, {
    trigger: '.select2-chosen',
    in_modal: false
}, {
    trigger: '.select2-results-dept-1 > .select2-result-label:contains("Article 3")',
    run: 'click',
    in_modal: false
}, {
    trigger: '.select2-chosen:contains("Article 3")',
    run: () => {},
}, {
    trigger: '.modal-content .btn-primary:contains("Move Article")',
    run: 'click',
}, {
    trigger: 'section[data-section="workspace"] .o_article .o_article_name:contains("Article to be moved")',
    run: 'click'
}, {
    // open the trash
    trigger: '.o_knowledge_management_tools button',
}, {
    // verify that the trash list has been opened correctly and that items are correctly ordered
    trigger: '.o_data_row:first .o_data_cell[name="display_name"]:contains("Article 2")',
    extra_trigger: '.breadcrumb-item.active:contains("Trash")',
    run: () => {},
}, ...endKnowledgeTour()
]});

return __exports;
});
;

/*************************************************************************
*  Filepath: /knowledge/static/tests/tours/knowledge_pick_emoji_tour.js  *
*  Lines: 57                                                             *
*************************************************************************/
odoo.define('@knowledge/../tests/tours/knowledge_pick_emoji_tour', ['@knowledge/../tests/tours/knowledge_tour_utils', '@web/core/registry', '@web_tour/js/tour_step_utils'], async function (require) {
'use strict';
let __exports = {};
/** @odoo-module */

const { endKnowledgeTour } = require('@knowledge/../tests/tours/knowledge_tour_utils');
const { registry } = require("@web/core/registry");
const { stepUtils } = require("@web_tour/js/tour_step_utils");

registry.category("web_tour.tours").add('knowledge_pick_emoji_tour', {
    test: true,
    url: '/web',
    steps: [stepUtils.showAppsMenuItem(), {
    // open Knowledge App
    trigger: '.o_app[data-menu-xmlid="knowledge.knowledge_menu_root"]',
}, {
    // click on the main "New" action
    trigger: '.o_knowledge_header .btn:contains("New")',
}, {
    trigger: 'section[data-section="private"] .o_article .o_article_name:contains("Untitled")',
    run: () => {}, // check that the article is correctly created (private section)
}, {
    trigger: '.o_knowledge_add_buttons',
    run: () => {
        // force the cover buttons to be visible (it's only visible on hover)
        $('.o_knowledge_add_icon, .o_knowledge_add_cover').css({
            opacity: 1,
            visibility: 'visible'
        });
    },
}, {
    // add a random emoji
    trigger: '.o_knowledge_add_icon',
    run: 'click',
}, {
    trigger: '.o_knowledge_body .o_article_emoji',
    run: 'click',
}, {
    trigger: '.o_EmojiView[data-codepoints="😃"]',
    run: 'click',
}, {
    // check that the emoji has been properly changed in the article body
    trigger: '.o_knowledge_body .o_article_emoji:contains(😃)',
    run: () => {},
}, {
    // check that the emoji has been properly changed in the header
    trigger: '.o_knowledge_header .o_article_emoji:contains(😃)',
    run: () => {},
}, {
    // check that the emoji has been properly changed in the aside block
    trigger: '.o_knowledge_aside .o_article_emoji_active:contains(😃)',
    run: () => {}
}, ...endKnowledgeTour()
]});

return __exports;
});
;

/****************************************************************************
*  Filepath: /knowledge/static/tests/tours/knowledge_portal_search_tour.js  *
*  Lines: 74                                                                *
****************************************************************************/
odoo.define('@knowledge/../tests/tours/knowledge_portal_search_tour', ['web_tour.tour'], async function (require) {
'use strict';
let __exports = {};
/** @odoo-module */

/**
 * Portal Search Knowledge flow tour.
 * Features tested:
 * - Check that tree contains all articles
 * - Write search term in search bar
 * - Check that search tree renders the correct matching articles
 * - Set active article as favorite
 * - Clean search bar
 * - Check that the active article was correctly added to the favorite tree
 */

const tour = require('web_tour.tour');

tour.register('knowledge_portal_search_tour', {
    test: true,
}, [{ // Check that section tree contains all articles
    content: "Check that search tree contains 'My Article'",
    trigger: '.o_article_name:contains("My Article")',
    run() {},
}, {
    content: "Unfold 'My Article'", // Unfold because 'My Article' wasn't added to the unfolded articles
    trigger: '.o_article_active .o_article_caret',
}, {
    content: "Check that search tree contains 'Child Article'",
    trigger: '.o_article_name:contains("Child Article")',
    run() {},
}, {
    content: "Check that search tree contains 'Sibling Article'",
    trigger: '.o_article_name:contains("Sibling Article")',
    run() {},
}, { // Write search term in search bar
    content: "Write 'M' in the search bar",
    trigger: '.knowledge_search_bar',
    run: 'text My'
}, {
    content: "Trigger keyup event to start the search",
    trigger: '.knowledge_search_bar',
    run() {
        $('.knowledge_search_bar').trigger($.Event("keyup", { keyCode: 13 }));
    },
}, { // Check tree rendering with matching articles
    content: "Check that search tree contains 'My Article'",
    trigger: '.o_article_name:contains("My Article")',
    run() {},
}, {
    content: "Check that search tree doesn't contain 'Child Article'",
    trigger: '.o_knowledge_tree:not(:has(.o_article_name:contains("Child Article")))',
    run() {},
}, {
    content: "Check that search tree doesn't contain 'Sibling Article'",
    trigger: '.o_knowledge_tree:not(:has(.o_article_name:contains("Sibling Article")))',
    run() {},
}, { // Set active article as favorite
    content: 'Set active article (My Article) as favorite',
    trigger: '.o_favorites_toggle_button',
}, { // Clean search bar
    content: "Clean search bar",
    trigger: '.knowledge_search_bar',
    run: function (action) {
        action.remove_text("", ".knowledge_search_bar");
    },
}, { // Check that article was correctly added to the favorite tree
    content: "Check that 'My Article' was correctly added to the favorite tree",
    trigger: '.o_favorite_container .o_article .o_article_name:contains("My Article")',
    run() {},
}]);

return __exports;
});
;

/*************************************************************************
*  Filepath: /knowledge/static/tests/tours/knowledge_properties_tour.js  *
*  Lines: 61                                                             *
*************************************************************************/
odoo.define('@knowledge/../tests/tours/knowledge_properties_tour', ['@knowledge/../tests/tours/knowledge_tour_utils', '@web/core/registry', '@web_tour/js/tour_step_utils', '@knowledge/../tests/tours/knowledge_main_flow_tour'], async function (require) {
'use strict';
let __exports = {};
/** @odoo-module */

const { endKnowledgeTour } = require("@knowledge/../tests/tours/knowledge_tour_utils");
const { registry } = require("@web/core/registry");
const { stepUtils } = require("@web_tour/js/tour_step_utils");
const { moveArticle } = require("@knowledge/../tests/tours/knowledge_main_flow_tour");

registry.category("web_tour.tours").add('knowledge_properties_tour', {
    test: true,
    url: '/web',
    steps: [stepUtils.showAppsMenuItem(), {
    // open Knowledge App
    trigger: '.o_app[data-menu-xmlid="knowledge.knowledge_menu_root"]',
}, { // ensure display of ParentArticle child articles
    trigger: '.o_article_handle:contains("ParentArticle") .o_article_caret',
    run: function (actions) {
        const button = this.$anchor[0];
        if (button.querySelector('i.fa-caret-right')) {
            actions.click(this.$anchor);
        }
    }
}, { // go to ChildArticle
    trigger: '.o_article .o_article_name:contains("ChildArticle")',
    run: 'click',
}, { // wait ChildArticle loading
    trigger: '.breadcrumb-item.active:contains("ChildArticle")',
    run: () => {},
}, { // click on add properties
    trigger: 'button.o_knowledge_add_properties',
    run: 'click',
}, { // modify property name
    trigger: '.o_field_property_definition_header input',
    run: 'text myproperty',
}, { // finish property edition
    trigger: '.o_knowledge_editor .odoo-editor-editable',
    run: 'click',
}, { // verify property
    trigger: '.o_field_property_label:contains("myproperty")',
    run: () => {},
}, { // go to InheritPropertiesArticle
    trigger: '.o_article .o_article_name:contains("InheritPropertiesArticle")',
    run: 'click',
}, { // wait InheritPropertiesArticle loading and move InheritPropertiesArticle under ParentArticle
    trigger: '.breadcrumb-item.active:contains("InheritPropertiesArticle")',
    run: () => {
        moveArticle(
            $('.o_article_handle:contains("InheritPropertiesArticle")'),
            $('.o_article_handle:contains("ChildArticle")'),
        );
    },
}, { // verify property
    trigger: '.o_knowledge_properties .o_field_property_label:contains("myproperty")',
    run: () => {},
}, ...endKnowledgeTour()
]});

return __exports;
});
;

/********************************************************************************
*  Filepath: /knowledge/static/tests/tours/knowledge_readonly_favorite_tour.js  *
*  Lines: 48                                                                    *
********************************************************************************/
odoo.define('@knowledge/../tests/tours/knowledge_readonly_favorite_tour', ['@knowledge/../tests/tours/knowledge_main_flow_tour', '@knowledge/../tests/tours/knowledge_tour_utils', 'web_tour.tour'], async function (require) {
'use strict';
let __exports = {};
/** @odoo-module */

const { moveArticle } = require("@knowledge/../tests/tours/knowledge_main_flow_tour");
const { endKnowledgeTour } = require("@knowledge/../tests/tours/knowledge_tour_utils");
const tour = require('web_tour.tour');

// Checks that one can add an readonly article to its favorites

tour.register('knowledge_readonly_favorite_tour', {
    test: true,
}, [{
    // Make sure we are on the readonly article 1, that is not favorited, and
    // click on the toggle favorite button.
    trigger: 'a.o_toggle_favorite:has(.fa-star-o)',
    extra_trigger: '.o_article_active:contains("Readonly Article 1")',
}, {
    // Check that the article has been added to the favorites
    trigger: 'section.o_favorite_container:contains("Readonly Article 1")',
    extra_trigger: 'a.o_toggle_favorite:has(.fa-star)',
    run: () => {},
}, {
    // Open the other readonly article
    trigger: '.o_knowledge_aside .o_article_name:contains("Readonly Article 2")',
}, {
    // Make sure we are on the readonly article 1, that is not favorited, and
    // click on the toggle favorite button.
    trigger: 'a.o_toggle_favorite:has(.fa-star-o)',
    extra_trigger: '.o_article_active:contains("Readonly Article 2")',
}, {
    // Check that the article has been added to the favorites under the other
    // one and try to resquence the favorite articles
    trigger: 'section.o_favorite_container li:last:contains("Readonly Article 2")',
    run: () => moveArticle(
        $('section.o_favorite_container li:last .o_article_handle'),
        $('section.o_favorite_container li:first .o_article_handle')
    ),
}, {
    // Check that articles have been reordered correctly
    trigger: 'section.o_favorite_container li:last:contains("Readonly Article 1")',
    extra_trigger: 'section.o_favorite_container li:first:contains("Readonly Article 2")',
    run: () => {},
}, ...endKnowledgeTour()]);

return __exports;
});
;

/***********************************************************************************
*  Filepath: /knowledge/static/tests/tours/knowledge_readonly_item_kanban_tour.js  *
*  Lines: 33                                                                       *
***********************************************************************************/
odoo.define('@knowledge/../tests/tours/knowledge_readonly_item_kanban_tour', ['@knowledge/../tests/tours/knowledge_tour_utils', '@web/core/registry', '@web_tour/js/tour_step_utils'], async function (require) {
'use strict';
let __exports = {};
/** @odoo-module */

const { endKnowledgeTour } = require("@knowledge/../tests/tours/knowledge_tour_utils");
const { registry } = require("@web/core/registry");
const { stepUtils } = require("@web_tour/js/tour_step_utils");
/**
 * This tour checks that a user that has readonly access on an article cannot
 * create items from the item kanban.
 */
registry.category("web_tour.tours").add('knowledge_readonly_item_kanban_tour', {
    url: '/web',
    test: true,
    steps: [stepUtils.showAppsMenuItem(), { // open the Knowledge App
    trigger: '.o_app[data-menu-xmlid="knowledge.knowledge_menu_root"]',
}, { // scroll to the embedded view to load it
    trigger: '.o_knowledge_behavior_type_embedded_view',
    run: function () {
        this.$anchor[0].scrollIntoView();
    },
}, { // wait for the kanban view to be mounted
    trigger: '.o_knowledge_behavior_type_embedded_view .o_kanban_renderer',
    run: () => {},
}, { // check that the "new" button is not shown
    trigger: '.o_cp_buttons:not(:has(.o-kanban-button-new))',
    run: () => {},
}, ...endKnowledgeTour()
]});

return __exports;
});
;

/*********************************************************************************
*  Filepath: /knowledge/static/tests/tours/knowledge_readonly_item_list_tour.js  *
*  Lines: 34                                                                     *
*********************************************************************************/
odoo.define('@knowledge/../tests/tours/knowledge_readonly_item_list_tour', ['@knowledge/../tests/tours/knowledge_tour_utils', '@web/core/registry', '@web_tour/js/tour_step_utils'], async function (require) {
'use strict';
let __exports = {};
/** @odoo-module */

const { endKnowledgeTour } = require("@knowledge/../tests/tours/knowledge_tour_utils");
const { registry } = require("@web/core/registry");
const { stepUtils } = require("@web_tour/js/tour_step_utils");

/**
 * This tour checks that a user that has readonly access on an article cannot
 * create items from the item list.
 */
registry.category("web_tour.tours").add('knowledge_readonly_item_list_tour', {
    url: '/web',
    test: true,
    steps: [stepUtils.showAppsMenuItem(), { // open the Knowledge App
    trigger: '.o_app[data-menu-xmlid="knowledge.knowledge_menu_root"]',
}, { // scroll to the embedded view to load it
    trigger: '.o_knowledge_behavior_type_embedded_view',
    run: function () {
        this.$anchor[0].scrollIntoView();
    },
}, { // wait for the list view to be mounted
    trigger: '.o_knowledge_behavior_type_embedded_view .o_list_renderer',
    run: () => {},
}, { // check that the "new" button is not shown
    trigger: '.o_cp_buttons:not(:has(.o_list_button_add))',
    run: () => {},
}, ...endKnowledgeTour()
]});

return __exports;
});
;

/********************************************************************
*  Filepath: /knowledge/static/tests/tours/knowledge_tour_utils.js  *
*  Lines: 95                                                        *
********************************************************************/
odoo.define('@knowledge/../tests/tours/knowledge_tour_utils', ['@web_tour/js/tour_step_utils'], async function (require) {
'use strict';
let __exports = {};
/** @odoo-module */

const { stepUtils } = require("@web_tour/js/tour_step_utils");

/**
 * Steps to insert an articleLink for the given article, in the first editable
 * html_field found in the given container selector (should have a paragraph
 * as its last element, and the link will be inserted at the position at index
 * offset in the paragraph).
 *
 * @param {string} htmlFieldContainerSelector jquery selector for the container
 * @param {string} articleName name of the article to insert a link for
 * @param {integer} offset position of the command call in the paragraph
 * @returns {Array} tour steps
 */
__exports.appendArticleLink = appendArticleLink; function appendArticleLink(htmlFieldContainerSelector, articleName, offset=0) {
    return [{ // open the command bar
        trigger: `${htmlFieldContainerSelector} .odoo-editor-editable > p:last-child`,
        run: function () {
            openCommandBar(this.$anchor[0], offset);
        },
    }, { // click on the /article command
        trigger: '.oe-powerbox-commandName:contains(Article)',
        run: 'click',
        in_modal: false,
    }, { // select an article in the list
        trigger: `.select2-results > .select2-result:contains(${articleName})`,
        run: 'click',
        in_modal: false,
    }, { // wait for the choice to be registered
        trigger: `.select2-chosen:contains(${articleName})`,
        run: () => {},
    }, { // click on the "Insert Link" button
        trigger: '.modal-dialog:contains(Link an Article) .modal-footer button.btn-primary',
        run: 'click'
    }];
}

/**
 * Ensure that the tour does not end on the Knowledge form view by returning to
 * the home menu.
 */
__exports.endKnowledgeTour = endKnowledgeTour; function endKnowledgeTour() {
    return [
        stepUtils.toggleHomeMenu(), {
            trigger: '.o_app[data-menu-xmlid="knowledge.knowledge_menu_root"]',
            run: () => {},
        }
    ];
}

__exports.makeVisible = makeVisible; function makeVisible(selector) {
    const el = document.querySelector(selector);
    if (el) {
        el.style.setProperty('visibility', 'visible', 'important');
        el.style.setProperty('opacity', '1', 'important');
    }
}

/**
 * Opens the power box of the editor
 * @param {HTMLElement} paragraph
 * @param {integer} offset position of the command call in the paragraph
 */
__exports.openCommandBar = openCommandBar; function openCommandBar(paragraph, offset=0) {
    const sel = document.getSelection();
    sel.removeAllRanges();
    const range = document.createRange();
    range.setStart(paragraph, offset);
    range.setEnd(paragraph, offset);
    sel.addRange(range);
    paragraph.dispatchEvent(new KeyboardEvent('keydown', {
        key: '/',
    }));
    const slash = document.createTextNode('/');
    paragraph.prepend(slash);
    sel.removeAllRanges();
    range.setStart(slash, 1);
    range.setEnd(slash, 1);
    sel.addRange(range);
    paragraph.dispatchEvent(new InputEvent('input', {
        inputType: 'insertText',
        data: '/',
        bubbles: true,
    }));
    paragraph.dispatchEvent(new KeyboardEvent('keyup', {
        key: '/',
    }));
}

return __exports;
});
;

/*******************************************************************
*  Filepath: /sign/static/tests/tours/sign_request_shared_tour.js  *
*  Lines: 82                                                       *
*******************************************************************/
odoo.define('shared_sign_request_tour', function (require) {
    'use strict';

    const { registry } = require("@web/core/registry");

    registry.category("web_tour.tours").add('shared_sign_request_tour', {
        test: true,
        url: '/web',
        steps: [
        {
            content: 'Open Sign APP',
            trigger: '.o_app[data-menu-xmlid="sign.menu_document"]',
            run: 'click',
        },
        {
            content: 'Remove My Favorites filter',
            trigger: '.o_cp_searchview .o_facet_remove',
            run: 'click',
        },
        {
            content: 'Search template "template_1_role"',
            trigger: '.o_cp_searchview input',
            run: 'text template_1_role',
        },
        {
            content: 'Search Document Name',
            trigger: '.o_searchview_autocomplete .o_menu_item:first',
            run: 'click',
        },
        {
            content: 'Share the template',
            trigger: '.o_kanban_record_bottom:first button:contains("Share"):first',
            extra_trigger: '.oe_kanban_main:first span:contains("template_1_role")',
            run: 'click',
        },
        {
            content: "Go on signing page",
            trigger: '.o_field_CopyClipboardChar',
            run: function () {
                const share_link = this.$anchor.contents()[0].firstChild.textContent;
                // Retrieve the link without the origin to avoid
                // mismatch between localhost:8069 and 127.0.0.1:8069
                // when running the tour with chrome headless
                const regex = '/sign/document/mail/.*';
                const url = share_link.match(regex)[0];
                window.location.href = window.location.origin + url;
            },
        },
        {
            content: 'Fill the sign item',
            trigger: 'iframe input.o_sign_sign_item',
            run: 'text Mitchell Admin',
        },
        {
            content: 'Validate & Send Completed Document',
            trigger: '.o_validate_button',
            run: 'click',
        },
        {
            content: 'Fill name',
            trigger: '#o_sign_public_signer_name_input',
            extra_trigger: '.modal-title:contains("Final Validation")',
            run: 'text Mitchell Admin',
        },
        {
            content: 'Fill email',
            trigger: '#o_sign_public_signer_mail_input',
            run: 'text mitchell.admin@public.com',
        },
        {
            content: 'Validate & Send',
            trigger: '.modal-footer button:contains("Validate & Send")',
            run: 'click',
        },
        {
            content: 'Close',
            trigger: '.modal-footer button:contains("Close")',
            extra_trigger: '.modal-title:contains("Thank you!")',
            run(){},
        },
    ]})
})
;

/************************************************************
*  Filepath: /sign/static/tests/tours/sign_widgets_tour.js  *
*  Lines: 83                                                *
************************************************************/
odoo.define('sign_widgets_tour', function (require) {
    "use strict";

    var core = require('web.core');
    const { registry } = require("@web/core/registry");
    const { stepUtils } = require('@web_tour/js/tour_step_utils');
    require("web.legacy_tranlations_loaded");

    var _t = core._t;

    registry.category("web_tour.tours").add('sign_widgets_tour', {
        test: true,
        url: "/web",
        steps: [stepUtils.showAppsMenuItem(),
            {
                content: "Settings",
                trigger: 'a[data-menu-xmlid="base.menu_administration"]',
                run: 'click',
            },
            {
                content: "Users",
                trigger: 'div#invite_users button.o_web_settings_access_rights',
                run: 'click',
            },
            {
                content: "Mitchel",
                trigger: 'table.o_list_table td.o_data_cell:contains(Admin)',
                run: 'click',
            },

            {
                content: "Preference tab",
                trigger: 'a.nav-link:contains("' + _t("Preferences") + '")',
                run: 'click',
            },
            {
                content: "Editor loaded",
                trigger: '.note-editable',
            },
            {
                content: "Click on widget sign",
                trigger: '.o_signature:first',
                run: 'click',
            },
            {
                content: "Click on auto button",
                trigger: '.o_web_sign_auto_button',
                run: 'click',
            },
            {
                content: "Click on style button",
                trigger: '.o_web_sign_auto_select_style > button',
                run: 'click',
            },
            {
                content: "Select a style",
                trigger: '.o_web_sign_auto_select_style .dropdown-item:nth-child(3)',
                run: 'click',
            },
            {
                content: "Click on style button",
                trigger: '.o_web_sign_auto_select_style > button',
                run: 'click',
            },
            {
                content: "Select a style",
                trigger: '.o_web_sign_auto_select_style .dropdown-item:nth-child(2)',
                run: 'click',
            },
            {
                content: "Sign",
                trigger: 'button.btn-primary:contains("Adopt & Sign")',
                extra_trigger: 'canvas.jSignature',
                run: function () {
                    setTimeout(() => {
                        this.$anchor.click();
                    }, 1000);
                },
            },
            ...stepUtils.saveForm(),
        ]
    });
});
;

/*****************************************************************
*  Filepath: /sign/static/tests/tours/test_report_modal_tour.js  *
*  Lines: 52                                                     *
*****************************************************************/
odoo.define('@sign/../tests/tours/test_report_modal_tour', ['@web/core/registry', '@web_tour/js/tour_step_utils'], async function (require) {
'use strict';
let __exports = {};
/** @odoo-module **/

const { registry } = require("@web/core/registry");
const { stepUtils } = require("@web_tour/js/tour_step_utils");

registry.category("web_tour.tours").add("sign_report_modal_tour", {
    test: true,
    url: "/web",
    steps: [
        stepUtils.showAppsMenuItem(),
        {
            content: "Open Sign app",
            trigger: '.o_app[data-menu-xmlid="sign.menu_document"]',
            run: "click",
        },
        {
            content: "Open Reports menu",
            trigger: '.o_main_navbar button[data-menu-xmlid="sign.sign_reports"]',
            run: "click",
        },
        {
            content: "Open Green Savings Report",
            trigger: '.dropdown-item[data-menu-xmlid="sign.sign_report_green_savings"]',
            run: "click",
        },
        {
            content: "Open the modal",
            extra_trigger: 'iframe .green-savings-page a[data-bs-target=".modal_green_savings"]',
            trigger: 'iframe a:contains("How are these results calculated?")',
            run: "click",
        },
        {
            // DOM mutations are not observed inside iframes, so there won't be a check after the "show" class is added to the modal
            // Force the check explicitly
            content: "Wait for the modal to open",
            trigger: "iframe body",
            run: () => {
                setTimeout(() => document.body.classList.add("iframe_modal_open"), 1000);
            },
        },
        {
            trigger: "iframe .modal_green_savings.show",
            run: () => {},
        },
    ],
});

return __exports;
});
;

/**************************************************************
*  Filepath: /sign/static/tests/tours/test_sign_flow_tour.js  *
*  Lines: 85                                                  *
**************************************************************/
odoo.define('@sign/../tests/tours/test_sign_flow_tour', ['@web/core/registry', '@web_tour/js/tour_step_utils'], async function (require) {
'use strict';
let __exports = {};
/** @odoo-module **/

const { registry } = require("@web/core/registry");
const { stepUtils } = require("@web_tour/js/tour_step_utils");

registry.category("web_tour.tours").add("test_sign_flow_tour",{
    test: true,
    url: "/web",
    steps: [stepUtils.showAppsMenuItem(), {
    content: "Open Sign APP",
    trigger: '.o_app[data-menu-xmlid="sign.menu_document"]',
    run: "click",
}, {
    content: "Remove My Favorites filter",
    trigger: ".o_cp_searchview .o_facet_remove",
    run: "click",
}, {
    content: 'Search template "template_1_roles"',
    trigger: ".o_cp_searchview input",
    run: "text template_1_role(2)",
    position: "bottom",
}, {
    content: "Search Document Name",
    trigger: ".o_searchview_autocomplete .o_menu_item:first",
    run: "click",
}, {
    content: "list view",
    trigger: 'button.o_list',
    run: "click",
}, {
    content: "Click Sign Now",
    extra_trigger: '.o_list_button button:contains("Sign Now")',
    trigger: "button:contains('Sign Now')",
    run: "click",
}, {
    content: "Click sign",
    trigger: "button[name='sign_directly']",
    run: "click",
}, {
    content: "Click to start",
    trigger: 'iframe .o_sign_sign_item_navigator:contains("Click to start")',
    position: "bottom",
}, {
    content: 'Fill the sign item',
    trigger: 'iframe input.o_sign_sign_item',
    run: 'text Mitchell Admin',
}, {
    content: "Click next 1",
    trigger: 'iframe .o_sign_sign_item_navigator:contains("next")',
    run: "click",
}, {
    content: "Click sign it",
    trigger: 'iframe .o_sign_sign_item_navigator:contains("next")',
    run: "click",
}, {
    content: "Click on auto button",
    trigger: '.o_web_sign_auto_button',
    run: 'click',
}, {
    content: "Sign",
    trigger: 'button.btn-primary:contains("Sign all")',
    extra_trigger: 'canvas.jSignature',
    run() {
        setTimeout(() => {
            this.$anchor.click();
        }, 1000);
    },
}, {
    content: 'Validate & Send Completed Document',
    extra_trigger: ".o_sign_validate_banner",
    trigger: "button:contains('Validate & Send Completed Document')",
    run: 'click',
}, {
    content: "view",
    extra_trigger: ".modal-dialog",
    trigger: ".modal-footer button.btn-primary",
    alt_trigger: ".modal-footer button.btn-secondary",
    run: "click",
}]});

return __exports;
});
;

/***************************************************************************
*  Filepath: /sign/static/tests/tours/translate_sign_instructions_tour.js  *
*  Lines: 19                                                               *
***************************************************************************/
odoo.define('@sign/../tests/tours/translate_sign_instructions_tour', ['@web/core/registry'], async function (require) {
'use strict';
let __exports = {};
/** @odoo-module **/

const { registry } = require("@web/core/registry");

registry.category("web_tour.tours").add('translate_sign_instructions', {
    test: true,
    steps: [
    {
        content: 'Translations must be loaded',
        trigger: 'iframe .o_sign_sign_item_navigator:contains("Cliquez pour commencer")',
        run: () => null, // it's a check
    }
]});

return __exports;
});
;

/*******************************************************************
*  Filepath: /planning/static/tests/tours/planning_tests_tours.js  *
*  Lines: 195                                                      *
*******************************************************************/
odoo.define('@planning/../tests/tours/planning_tests_tours', ['@web/core/registry'], async function (require) {
'use strict';
let __exports = {};
/** @odoo-module **/

const { registry } = require("@web/core/registry");

registry.category("web_tour.tours").add('planning_test_tour', {
    url: '/web',
    test: true,
    steps: [{
    trigger: '.o_app[data-menu-xmlid="planning.planning_menu_root"]',
    content: "Let's start managing your employees' schedule!",
    position: 'bottom',
}, {
    trigger: ".o_gantt_button_add",
    content: "Let's create your first <b>shift</b> by clicking on Add. <i>Tip: use the (+) shortcut available on each cell of the Gantt view to save time.</i>",
    id: 'project_planning_start',
}, {
    trigger: ".o_field_widget[name='resource_id'] input",
    content: "Assign this shift to your <b>resource</b>, or leave it open for the moment.",
    run: 'text Thibault',
}, {
    trigger: ".o-autocomplete--dropdown-item > a:contains('Thibault')",
    auto: true,
    in_modal: false,
}, {
    trigger: ".o_field_widget[name='role_id'] input",
    content: "Select the <b>role</b> your employee will have (<i>e.g. Chef, Bartender, Waiter, etc.</i>).",
    run: 'text Developer',
}, {
    trigger: ".o-autocomplete--dropdown-item > a:contains('Developer')",
    auto: true,
    in_modal: false,
}, {
    trigger: ".o_field_widget[name='start_datetime'] input",
    content: "Set start datetime",
    run: function (actions) {
        const input = this.$anchor[0];
        input.value = input.value.replace(/(\d{2}:){2}\d{2}/g, '08:00:00');
        input.dispatchEvent(new InputEvent('input', {
            bubbles: true,
        }));
        input.dispatchEvent(new Event("change", { bubbles: true, cancelable: false }));
    }
}, {
    trigger: ".o_field_widget[name='end_datetime'] input",
    content: "Set end datetime",
    run: function (actions) {
        const input = this.$anchor[0];
        input.value = input.value.replace(/(\d{2}:){2}\d{2}/g, '11:59:59');
        input.dispatchEvent(new InputEvent('input', {
            bubbles: true,
        }));
        input.dispatchEvent(new Event("change", { bubbles: true, cancelable: false }));
    }
}, {
    trigger: "div[name='template_creation'] input",
    content: "Save this shift as a template",
    run: function (actions) {
        if (!this.$anchor.prop('checked')) {
            actions.click(this.$anchor);
        }
    },
}, {
    trigger: "button[special='save']",
    content: "Save this shift once it is ready.",
}, {
    trigger: ".o_gantt_pill :contains('11:59')",
    content: "<b>Drag & drop</b> your shift to reschedule it. <i>Tip: hit CTRL (or Cmd) to duplicate it instead.</i> <b>Adjust the size</b> of the shift to modify its period.",
    auto: true,
    run: function () {
        if (this.$anchor.length) {
            const expected = "8:00 AM - 11:59 AM (4h)";
            // Without the replace below, this step could break since luxon
            // (via Intl) uses sometimes U+202f instead of a simple space.
            // Note: U+202f is a narrow non-break space.
            const actual = this.$anchor[0].textContent.replace(/\u202f/g, " ");
            if (!actual.startsWith(expected)) {
                console.error("Test in gantt view doesn't start as expected. Expected : '" + expected + "', actual : '" + actual + "'");
            }
        } else {
            console.error("Not able to select pill ending at 11h59");
        }
    }
}, {
    trigger: ".o_gantt_button_send_all",
    content: "If you are happy with your planning, you can now <b>send</b> it to your employees.",
}, {
    trigger: "button[name='action_check_emails']",
    content: "<b>Publish & send</b> your planning to make it available to your employees.",
}, {
    trigger: ".o_gantt_row_header:contains('Thibault') .o_gantt_progress_bar",
    content: "See employee progress bar",
    auto: true,
    run: function () {
        const $progressbar = this.$anchor;
        if ($progressbar.length) {
            if ($progressbar[0].querySelector("span").style.width === '') {
                console.error("Progress bar should be displayed");
            }
            if (!$progressbar[0].classList.contains("o_gantt_group_success")) {
                console.error("Progress bar should be displayed in success");
            }
        } else {
            console.error("Not able to select progressbar");
        }
    }
}, {
    trigger: ".o_gantt_button_copy_previous_week",
    content: "Copy previous week if you want to follow previous week planning schedule",
    run: 'click',
}, {
    id: "planning_check_format_step",
    trigger: ".o_gantt_pill span:contains(Developer)",
    content: "Check naming format of resource and role when grouped",
    auto: true,
    run: function () {}
}]});

registry.category("web_tour.tours").add('planning_shift_switching_backend', {
    url: '/web',
    test: true,
    steps: [{
    trigger: '.o_app[data-menu-xmlid="planning.planning_menu_root"]',
    content: "Get in the planning app",
}, {
    trigger: '.o_gantt_pill :contains("bert")',
    content: "Click on one of your shifts in the gantt view",
},
{
    trigger: ".popover-footer button",
    content: "Click on the 'Edit' button in the popover",
    run: 'click',
},
{
    trigger: 'button[name="action_switch_shift"]',
    content: "Click on the 'Switch Shift' button on the Gantt Form view modal",
}, {
    trigger: 'div.o_view_scale_selector > .scale_button_selection',
    content: 'Toggle the view scale selector',
}, {
    trigger: 'div.o_view_scale_selector > .dropdown-menu',
    content: 'Click on the dropdown button to change the scale of the gantt view',
    extra_trigger: 'div.o_view_scale_selector .o_scale_button_day',
}, {
    trigger: '.o_gantt_pill :contains("bert")',
    content: "Click on the unwanted shift in the gantt view again",
},
{
    trigger: ".popover-footer button",
    content: "Click again on the 'Edit' button in the popover",
    run: 'click',
},
{
    trigger: '.alert-warning:contains("The employee assigned would like to switch shifts with someone else.")',
    content: "Check that the warning has been shown",
}, {
    trigger: '.btn-close',
    content: "Click on the close button to hide the shift form modal",
}]});

registry.category("web_tour.tours").add('planning_assigning_unwanted_shift_backend', {
    url: '/web',
    test: true,
    steps: [{
    trigger: '.o_app[data-menu-xmlid="planning.planning_menu_root"]',
    content: "Get in the planning app",
}, {
    trigger: '.o_gantt_pill :contains("bert")',
    content: "Click on the unwanted shift of the employee",
},
{
    trigger: ".popover-footer button",
    content: "Click on the 'Edit' button in the popover",
    run: 'click',
},
{
    trigger: ".o_field_widget[name='resource_id'] input",
    content: "Assign this shift to another employee.",
    run: 'text joseph',
}, {
    trigger: ".o-autocomplete--dropdown-item > a:contains('joseph')",
    auto: true,
    in_modal: false,
}, {
    trigger: "button[special='save']",
    content: "Save this shift once it is ready.",
}, {
    trigger: '.o_gantt_pill :contains("joseph")',
    content: "Click again on the newly assigned shift",
}]});

return __exports;
});
;

/***********************************************************************************
*  Filepath: /im_livechat/static/tests/tours/im_livechat_channel_creation_tour.js  *
*  Lines: 43                                                                       *
***********************************************************************************/
odoo.define('@im_livechat/../tests/tours/im_livechat_channel_creation_tour', ['@web/core/registry'], async function (require) {
'use strict';
let __exports = {};
/** @odoo-module */

const { registry } = require("@web/core/registry");

const requestChatSteps = [
    {
        trigger: ".o_livechat_button",
        run: "click",
    },
    {
        trigger: ".o_thread_window",
    },
];

registry
    .category("web_tour.tours")
    .add("im_livechat_request_chat", { test: true, steps: requestChatSteps });

registry.category("web_tour.tours").add("im_livechat_request_chat_and_send_message", {
    test: true,
    steps: [
        ...requestChatSteps,
        {
            trigger: ".o_composer_text_field",
            run: "text Hello, I need help please !",
        },
        {
            trigger: ".o_composer_text_field",
            run() {
                $(".o_composer_text_field").trigger($.Event("keydown", { which: 13 }));
            },
        },
        {
            trigger: ".o_thread_message:contains('Hello, I need help')",
        },
    ],
});

return __exports;
});
;

/*****************************************************************************************
*  Filepath: /im_livechat/static/tests/tours/im_livechat_chatbot_steps_sequence_tour.js  *
*  Lines: 178                                                                            *
*****************************************************************************************/
odoo.define('@im_livechat/../tests/tours/im_livechat_chatbot_steps_sequence_tour', ['@web/core/registry', '@web_tour/js/tour_step_utils'], async function (require) {
'use strict';
let __exports = {};
/** @odoo-module */

const { registry } = require("@web/core/registry");
const { stepUtils } = require("@web_tour/js/tour_step_utils");

const commonSteps = [
    stepUtils.showAppsMenuItem(),
    {
        trigger: '.o_app[data-menu-xmlid="im_livechat.menu_livechat_root"]',
    },
    {
        trigger: 'button[data-menu-xmlid="im_livechat.livechat_config"]',
    },
    {
        trigger: 'a[data-menu-xmlid="im_livechat.chatbot_config"]',
    },
    {
        trigger: ".o_list_button_add",
    },
    {
        trigger: 'input[id="title"]',
        run: "text Test Chatbot Sequence",
    },
    {
        trigger: 'div[name="script_step_ids"] .o_field_x2many_list_row_add a',
    },
    {
        trigger: "textarea#message",
        run: "text Step 1",
    },
    {
        trigger: 'button:contains("Save & New")',
    },
    {
        trigger: 'tr:contains("Step 1")',
        in_modal: false,
        run: () => {},
    },
    {
        trigger: "textarea#message",
        run: "text Step 2",
    },
    {
        trigger: 'button:contains("Save & New")',
    },
    {
        trigger: 'tr:contains("Step 2")',
        in_modal: false,
        run: () => {},
    },
    {
        trigger: "textarea#message",
        run: "text Step 3",
    },
];

/**
 * Simply create a few steps in order to check the sequences.
 */
registry.category("web_tour.tours").add("im_livechat_chatbot_steps_sequence_tour", {
    test: true,
    url: "/web",
    steps: [
        ...commonSteps,
        {
            trigger: 'button:contains("Save & Close")',
        },
        {
            trigger: "body.o_web_client:not(.modal-open)",
            run() {},
        },
        ...stepUtils.discardForm(),
    ],
});

/**
 * Same as above, with an extra drag&drop at the end.
 */
registry.category("web_tour.tours").add("im_livechat_chatbot_steps_sequence_with_move_tour", {
    test: true,
    url: "/web",
    steps: [
        ...commonSteps,
        {
            trigger: 'button:contains("Save & New")',
        },
        {
            trigger: 'tr:contains("Step 3")',
            in_modal: false,
            run: () => {},
        },
        {
            trigger: "textarea#message",
            run: "text Step 4",
        },
        {
            trigger: 'button:contains("Save & New")',
        },
        {
            trigger: 'tr:contains("Step 4")',
            in_modal: false,
            run: () => {},
        },
        {
            trigger: "textarea#message",
            run: "text Step 5",
        },
        {
            trigger: 'button:contains("Save & Close")',
        },
        {
            trigger: "body.o_web_client:not(.modal-open)",
            run: () => {},
        },
        {
            trigger: 'tr:contains("Step 5") .o_row_handle',
            run: () => {
                // move 'step 5' between 'step 1' and 'step 2'
                const from = document.querySelector(
                    'div[name="script_step_ids"] tr:nth-child(5) .o_row_handle'
                );
                const fromPosition = from.getBoundingClientRect();
                fromPosition.x += from.offsetWidth / 2;
                fromPosition.y += from.offsetHeight / 2;

                const to = document.querySelector(
                    'div[name="script_step_ids"] tr:nth-child(2) .o_row_handle'
                );
                from.dispatchEvent(new Event("mouseenter", { bubbles: true }));
                from.dispatchEvent(
                    new MouseEvent("mousedown", {
                        bubbles: true,
                        which: 1,
                        button: 0,
                        clientX: fromPosition.x,
                        clientY: fromPosition.y,
                    })
                );
                from.dispatchEvent(new MouseEvent("mousemove", {
                    bubbles: true,
                    which: 1,
                    button: 0,
                    // dragging is only enabled when the mouse have moved from at least 10 pixels from the original position
                    clientX: fromPosition.x + 20,
                    clientY: fromPosition.y + 20,
                }));
                to.dispatchEvent(new Event("mouseenter", { bubbles: true }));
                from.dispatchEvent(new Event("mouseup", { bubbles: true }));
            },
        },
        {
            trigger: 'div[name="script_step_ids"] .o_field_x2many_list_row_add a',
        },
        {
            trigger: "textarea#message",
            run: "text Step 6",
        },
        {
            trigger: 'button:contains("Save & Close")',
        },
        {
            trigger: "body.o_web_client:not(.modal-open)",
            run: () => {},
        },
        {
            trigger: 'tr:contains("Step 6")',
            in_modal: false,
            run: () => {},
        },
        ...stepUtils.discardForm(),
    ],
});

return __exports;
});
;

/******************************************************************
*  Filepath: /survey/static/tests/tours/certification_failure.js  *
*  Lines: 109                                                     *
******************************************************************/
odoo.define('survey.tour_test_certification_failure', function (require) {
'use strict';

var SurveyFormWidget = require('survey.form');
/**
 * Speed up fade-in fade-out to avoid useless delay in tests.
 */
SurveyFormWidget.include({
    _submitForm: function () {
        this.fadeInOutDelay = 0;
        return this._super.apply(this, arguments);
    }
});

/**
 * This tour will test that, for the demo certification allowing 2 attempts, a user can
 * try and fail twice and will no longer be able to take the certification.
 */

const { registry } = require("@web/core/registry");

var failSteps = [{ // Page-1
    content: "Clicking on Start Certification",
    trigger: 'button.btn.btn-primary.btn-lg:contains("Start Certification")',
}, { // Question: Do we sell Acoustic Bloc Screens?
    content: "Selecting answer 'No'",
    trigger: 'div.js_question-wrapper:contains("Do we sell Acoustic Bloc Screens") label:contains("No")',
}, { // Question: Select all the existing products
    content: "Ticking answer 'Fanta'",
    trigger: 'div.js_question-wrapper:contains("Select all the existing products") label:contains("Fanta")'
}, {
    content: "Ticking answer 'Drawer'",
    trigger: 'div.js_question-wrapper:contains("Select all the existing products") label:contains("Drawer")'
}, {
    content: "Ticking answer 'Conference chair'",
    trigger: 'div.js_question-wrapper:contains("Select all the existing products") label:contains("Conference chair")'
}, { // Question: Select all the available customizations for our Customizable Desk
    content: "Ticking answer 'Color'",
    trigger: 'div.js_question-wrapper:contains("Select all the available customizations for our Customizable Desk") label:contains("Color")'
}, {
    content: "Ticking answer 'Height'",
    trigger: 'div.js_question-wrapper:contains("Select all the available customizations for our Customizable Desk") label:contains("Height")'
}, { // Question: How many versions of the Corner Desk do we have?
    content: "Selecting answer '2'",
    trigger: 'div.js_question-wrapper:contains("How many versions of the Corner Desk do we have") label:contains("2")',
}, { // Question: Do you think we have missing products in our catalog? (not rated)
    content: "Missing products",
    trigger: 'div.js_question-wrapper:contains("Do you think we have missing products in our catalog") textarea',
    run: "text I don't know products enough to be able to answer that",
}, { // Page-2 Question: How much do we sell our Cable Management Box?
    content: "Selecting answer '$80'",
    trigger: 'div.js_question-wrapper:contains("How much do we sell our Cable Management Box") label:contains("$80")',
}, { // Question: Select all the products that sell for $100 or more
    content: "Ticking answer 'Corner Desk Right Sit'",
    trigger: 'div.js_question-wrapper:contains("Select all the products that sell for $100 or more") label:contains("Corner Desk Right Sit")'
}, {
    content: "Ticking answer 'Desk Combination'",
    trigger: 'div.js_question-wrapper:contains("Select all the products that sell for $100 or more") label:contains("Desk Combination")'
}, {
    content: "Ticking answer 'Office Chair Black'",
    trigger: 'div.js_question-wrapper:contains("Select all the products that sell for $100 or more") label:contains("Office Chair Black")'
}, { // Question: What do you think about our prices (not rated)?
    trigger: 'div.js_question-wrapper:contains("What do you think about our prices") label:contains("Correctly priced")',
}, { // Page-3 Question: How many days is our money-back guarantee?
    content: "Inputting answer '60'",
    trigger: 'div.js_question-wrapper:contains("How many days is our money-back guarantee") input',
    run: 'text 60'
}, { // Question: If a customer purchases a product on 6 January 2020, what is the latest day we expect to ship it?
    content: "Inputting answer '01/06/2020'",
    trigger: 'div.js_question-wrapper:contains("If a customer purchases a product on 6 January 2020, what is the latest day we expect to ship it") input',
    run: 'text 01/06/2020'
}, { // Question: If a customer purchases a 1 year warranty on 6 January 2020, when do we expect the warranty to expire?
    content: "Inputting answer '01/06/2021 00:00:01'",
    trigger: 'div.js_question-wrapper:contains("If a customer purchases a 1 year warranty on 6 January 2020, when do we expect the warranty to expire") input',
    run: 'text 01/06/2021 00:00:01'
}, { // Question: What day to you think is best for us to start having an annual sale (not rated)?
    trigger: 'div.js_question-wrapper:contains("What day to you think is best for us to start having an annual sale (not rated)") input',
}, { // Question: What day and time do you think most customers are most likely to call customer service (not rated)?
    trigger: 'div.js_question-wrapper:contains("What day and time do you think most customers are most likely to call customer service (not rated)") input',
}, { // Question: How many chairs do you think we should aim to sell in a year (not rated)?
    content: "Inputting answer '0'",
    trigger: 'div.js_question-wrapper:contains("How many chairs do you think we should aim to sell in a year (not rated)") input',
    run: 'text 0'
}, {
    content: "Finish Survey",
    trigger: 'button[type="submit"]',
}];

var retrySteps = [{
    trigger: 'a:contains("Retry")'
}];

var lastSteps = [{
    trigger: 'h1:contains("Thank you!")',
    run: function () {
        if ($('a:contains("Retry")').length === 0) {
            $('h1:contains("Thank you!")').addClass('tour_success');
        }
    }
}, {
    trigger: 'h1.tour_success',
}];

registry.category("web_tour.tours").add('test_certification_failure', {
    test: true,
    url: '/survey/start/4ead4bc8-b8f2-4760-a682-1fde8daaaaac',
    steps: [].concat(failSteps, retrySteps, failSteps, lastSteps) });

});
;

/******************************************************************
*  Filepath: /survey/static/tests/tours/certification_success.js  *
*  Lines: 99                                                      *
******************************************************************/
odoo.define('survey.tour_test_certification_success', function (require) {
'use strict';

var SurveyFormWidget = require('survey.form');
/**
 * Speed up fade-in fade-out to avoid useless delay in tests.
 */
SurveyFormWidget.include({
    _submitForm: function () {
        this.fadeInOutDelay = 0;
        return this._super.apply(this, arguments);
    }
});

const { registry } = require("@web/core/registry");

registry.category("web_tour.tours").add('test_certification_success', {
    test: true,
    url: '/survey/start/4ead4bc8-b8f2-4760-a682-1fde8daaaaac',
    steps: [{ // Page-1
        content: "Clicking on Start Certification",
        trigger: 'button.btn.btn-primary.btn-lg:contains("Start Certification")',
    }, { // Question: Do we sell Acoustic Bloc Screens?
        content: "Selecting answer 'Yes'",
        trigger: 'div.js_question-wrapper:contains("Do we sell Acoustic Bloc Screens") label:contains("Yes")',
    }, { // Question: Select all the existing products
        content: "Ticking answer 'Chair floor protection'",
        trigger: 'div.js_question-wrapper:contains("Select all the existing products") label:contains("Chair floor protection")'
    }, {
        content: "Ticking answer 'Drawer'",
        trigger: 'div.js_question-wrapper:contains("Select all the existing products") label:contains("Drawer")'
    }, {
        content: "Ticking answer 'Conference chair'",
        trigger: 'div.js_question-wrapper:contains("Select all the existing products") label:contains("Conference chair")'
    }, { // Question: Select all the available customizations for our Customizable Desk
        content: "Ticking answer 'Color'",
        trigger: 'div.js_question-wrapper:contains("Select all the available customizations for our Customizable Desk") label:contains("Color")'
    }, {
        content: "Ticking answer 'Legs'",
        trigger: 'div.js_question-wrapper:contains("Select all the available customizations for our Customizable Desk") label:contains("Legs")'
    }, { // Question: How many versions of the Corner Desk do we have?
        content: "Selecting answer '2'",
        trigger: 'div.js_question-wrapper:contains("How many versions of the Corner Desk do we have") label:contains("2")',
    }, { // Question: Do you think we have missing products in our catalog? (not rated)
        content: "Missing products",
        trigger: 'div.js_question-wrapper:contains("Do you think we have missing products in our catalog") textarea',
        run: "text I think we should make more versions of the customizable desk, it's such an amazing product!",
    }, { // Page-2 Question: How much do we sell our Cable Management Box?
        content: "Selecting answer '$80' (wrong one)",
        trigger: 'div.js_question-wrapper:contains("How much do we sell our Cable Management Box") label:contains("$80")',
    }, { // Question: Select all the products that sell for $100 or more
        content: "Ticking answer 'Corner Desk Right Sit'",
        trigger: 'div.js_question-wrapper:contains("Select all the products that sell for $100 or more") label:contains("Corner Desk Right Sit")'
    }, {
        content: "Ticking answer 'Desk Combination'",
        trigger: 'div.js_question-wrapper:contains("Select all the products that sell for $100 or more") label:contains("Desk Combination")'
    }, {
        content: "Ticking answer 'Large Desk'",
        trigger: 'div.js_question-wrapper:contains("Select all the products that sell for $100 or more") label:contains("Large Desk")'
    }, { // Question: What do you think about our prices (not rated)?
        content: "Selecting answer 'Underpriced'",
        trigger: 'div.js_question-wrapper:contains("What do you think about our prices") label:contains("Underpriced")',
    }, { // Page-3 Question: How many days is our money-back guarantee?
        content: "Inputting answer '30'",
        trigger: 'div.js_question-wrapper:contains("How many days is our money-back guarantee") input',
        run: 'text 30'
    }, { // Question: If a customer purchases a product on 6 January 2020, what is the latest day we expect to ship it?
        content: "Inputting answer '01/08/2020'",
        trigger: 'div.js_question-wrapper:contains("If a customer purchases a product on 6 January 2020, what is the latest day we expect to ship it") input',
        run: 'text 01/08/2020'
    }, { // Question: If a customer purchases a 1 year warranty on 6 January 2020, when do we expect the warranty to expire?
        content: "Inputting answer '01/07/2021 00:00:01'",
        trigger: 'div.js_question-wrapper:contains("If a customer purchases a 1 year warranty on 6 January 2020, when do we expect the warranty to expire") input',
        run: 'text 01/07/2021 00:00:01'
    }, { // Question: What day to you think is best for us to start having an annual sale (not rated)?
        content: "Inputting answer '01/01/2021'",
        trigger: 'div.js_question-wrapper:contains("What day to you think is best for us to start having an annual sale (not rated)") input',
        run: 'text 01/01/2021'
    }, { // Question: What day and time do you think most customers are most likely to call customer service (not rated)?
        content: "Inputting answer '01/01/2021 13:00:01'",
        trigger: 'div.js_question-wrapper:contains("What day and time do you think most customers are most likely to call customer service (not rated)") input',
        run: 'text 01/01/2021 13:00:01'
    }, { // Question: How many chairs do you think we should aim to sell in a year (not rated)?
        content: "Inputting answer '1000'",
        trigger: 'div.js_question-wrapper:contains("How many chairs do you think we should aim to sell in a year (not rated)") input',
        run: 'text 1000'
    }, {
        content: "Finish Survey",
        trigger: 'button[type="submit"]',
    }, {
        content: "Thank you",
        trigger: 'h1:contains("Thank you!")',
    }, {
        content: "test passed",
        trigger: 'div:contains("Congratulations, you have passed the test!")',
    }
]});

});
;

/***************************************************
*  Filepath: /survey/static/tests/tours/survey.js  *
*  Lines: 70                                       *
***************************************************/
odoo.define('survey.tour_test_survey', function (require) {
'use strict';

const { registry } = require("@web/core/registry");

registry.category("web_tour.tours").add('test_survey', {
    test: true,
    url: '/survey/start/b137640d-14d4-4748-9ef6-344caaaaaae',
    steps: [
    // Page-1
    {
        content: 'Click on Start',
        trigger: 'button.btn:contains("Start")',
    }, {
        content: 'Answer Where do you live',
        trigger: 'div.js_question-wrapper:contains("Where do you live") input',
        run: 'text Mordor-les-bains',
    }, {
        content: 'Answer Where do you live',
        trigger: 'div.js_question-wrapper:contains("When is your date of birth") input',
        run: 'text 05/05/1980',
    }, {
        content: 'Answer How frequently do you buy products online',
        trigger: 'div.js_question-wrapper:contains("How frequently do you buy products online") label:contains("Once a month")',
    }, {
        content: 'Answer How many times did you order products on our website',
        trigger: 'div.js_question-wrapper:contains("How many times did you order products on our website") input',
        run: 'text 12',
    }, {
        content: 'Submit and go to Next Page',
        trigger: 'button[value="next"]',
    },
    // Page-2
    {
        content: 'Answer Which of the following words would you use to describe our products (High Quality)',
        trigger: 'div.js_question-wrapper:contains("Which of the following words would you use to describe our products") label:contains("High quality")',
    }, {
        content: 'Answer Which of the following words would you use to describe our products (Good value for money)',
        trigger: 'div.js_question-wrapper:contains("Which of the following words would you use to describe our products") label:contains("Good value for money")',
    }, {
        content: 'Answer What do your think about our new eCommerce (The new layout and design is fresh and up-to-date)',
        trigger: 'div.js_question-wrapper:contains("What do your think about our new eCommerce") tr:contains("The new layout and design is fresh and up-to-date") td:first',
    }, {
        content: 'Answer What do your think about our new eCommerce (It is easy to find the product that I want)',
        trigger: 'div.js_question-wrapper:contains("What do your think about our new eCommerce") tr:contains("It is easy to find the product that I want") td:eq(2)',
    }, {
        content: 'Answer What do your think about our new eCommerce (The tool to compare the products is useful to make a choice)',
        trigger: 'div.js_question-wrapper:contains("What do your think about our new eCommerce") tr:contains("The tool to compare the products is useful to make a choice") td:eq(3)',
    }, {
        content: 'Answer What do your think about our new eCommerce (The checkout process is clear and secure)',
        trigger: 'div.js_question-wrapper:contains("What do your think about our new eCommerce") tr:contains("The checkout process is clear and secure") td:eq(2)',
    }, {
        content: 'Answer What do your think about our new eCommerce (I have added products to my wishlist)',
        trigger: 'div.js_question-wrapper:contains("What do your think about our new eCommerce") tr:contains("I have added products to my wishlist") td:last',
    }, {
        content: 'Answer Do you have any other comments, questions, or concerns',
        trigger: 'div.js_question-wrapper:contains("Do you have any other comments, questions, or concerns") textarea',
        run: 'text This is great. Really.',
    }, {
        content: 'Click Submit and finish the survey',
        trigger: 'button[value="finish"]',
    },
    // Final page
    {
        content: 'Thank you',
        trigger: 'h1:contains("Thank you!")',
    }
]});

});
;

/*********************************************************************************
*  Filepath: /survey/static/tests/tours/survey_chained_conditional_questions.js  *
*  Lines: 46                                                                     *
*********************************************************************************/
odoo.define('survey.tour_test_survey_chained_conditional_questions', function (require) {
'use strict';

const { registry } = require("@web/core/registry");

registry.category("web_tour.tours").add('test_survey_chained_conditional_questions', {
    test: true,
    url: '/survey/start/3cfadce3-3f7e-41da-920d-10fa0eb19527',
    steps: [
    {
        content: 'Click on Start',
        trigger: 'button.btn:contains("Start")',
    }, {
        content: 'Answer Q1 with Answer 1',
        trigger: 'div.js_question-wrapper:contains("Q1") label:contains("Answer 1")',
    }, {
        content: 'Answer Q2 with Answer 1',
        trigger: 'div.js_question-wrapper:contains("Q2") label:contains("Answer 1")',
    }, {
        content: 'Answer Q3 with Answer 1',
        trigger: 'div.js_question-wrapper:contains("Q3") label:contains("Answer 1")',
    }, {
        content: 'Answer Q1 with Answer 2',  // This should hide all remaining questions.
        trigger: 'div.js_question-wrapper:contains("Q1") label:contains("Answer 2")',
    }, {
        content: 'Check that only question 1 is now visible',
        trigger: 'div.js_question-wrapper:contains("Q1")',
        run: () => {
            const selector = 'div.js_question-wrapper.d-none';
            if (document.querySelectorAll(selector).length !== 2) {
                throw new Error('Q2 and Q3 should have been hidden.');
            }
        }
    }, {
        content: 'Click Submit and finish the survey',
        trigger: 'button[value="finish"]',
    },
    // Final page
    {
        content: 'Thank you',
        trigger: 'h1:contains("Thank you!")',
    }

]});

});
;

/********************************************************
*  Filepath: /survey/static/tests/tours/survey_form.js  *
*  Lines: 284                                           *
********************************************************/
odoo.define('@survey/../tests/tours/survey_form', ['@web/core/registry', '@web_tour/js/tour_step_utils'], async function (require) {
'use strict';
let __exports = {};
/** @odoo-module **/

const { registry } = require("@web/core/registry");
const { stepUtils } = require("@web_tour/js/tour_step_utils");

registry.category("web_tour.tours").add('survey_tour_test_survey_form_triggers', {
    test: true,
    url: '/web',
    steps: [
    stepUtils.showAppsMenuItem(),
    {
        content: 'Go to Survey',
        trigger: '.o_app[data-menu-xmlid="survey.menu_surveys"]',
    }, {
        content: "Create a new survey",
        trigger: ".o-kanban-button-new",
    }, {
        content: "Set the Survey's title",
        trigger: ".o_field_widget[name=title] input",
        run: "text Test survey",
    }, {
        content: "Add a first question",
        trigger: "td.o_field_x2many_list_row_add a",
    }, {
        content: "Set the first question's title",
        trigger: ".modal-content .o_field_widget[name=title] input",
        run: "text Question 1",
    },
    ...addTwoAnswers(),
    ...saveAndNew(),
    {
        content: "Set the second question's title",
        trigger: ".o_field_widget[name=title] input",
        run: "text Question 2",
        in_modal: true,
    },
    ...addTwoAnswers(),
    ...toggleIsConditional(),
    {
        content: "Set a trigger question for the first question",
        trigger: ".o_field_widget[name=triggering_question_id] input",
        run: "click",
        in_modal: true,
    }, {
        content: "Set the first question as trigger",
        trigger: 'ul.ui-autocomplete a:contains("Question 1")',
        run: 'click',
        in_modal: true,
    }, {
        content: "Set a trigger answer for first question",
        trigger: ".modal-content .o_field_widget[name=triggering_answer_id] input",
        run: "click",
        in_modal: true,
    }, {
        content: "Set the first answer as trigger",
        trigger: 'ul.ui-autocomplete a:contains("Answer A")',
        run: 'click',
    },
    ...changeTab("answers"),
    ...saveAndNew(),
    {
        content: "Set the third question's title",
        trigger: ".o_field_widget[name=title] input",
        run: "text Question 3",
        in_modal: true,
    },
    ...addTwoAnswers(),
    ...toggleIsConditional(),
    {
        content: "Set a trigger question for the second question",
        trigger: ".o_field_widget[name=triggering_question_id] input",
        run: "click",
        in_modal: true,
    }, {
        content: "Set the second question as trigger",
        trigger: 'ul.ui-autocomplete a:contains("Question 2")',
        run: 'click',
        in_modal: true,
    }, {
        content: "Set a trigger answer for second question",
        trigger: ".modal-content .o_field_widget[name=triggering_answer_id] input",
        run: "click",
        in_modal: true,
    }, {
        content: "Set the second answer as trigger",
        trigger: 'ul.ui-autocomplete a:contains("Answer B")',
        run: 'click',
    },
    ...changeTab("answers"),
    ...stepUtils.saveForm(),
    // Q2 and Q3 should have fa-fork icons. Assumes that the Trigger widget's column is 2 places after the title's.
    {
        content: "Check that Question 2 has 'normal' trigger icon",
        trigger: "tr:contains('Question 2') button i.fa-code-fork",
        run: () => {}, // it's a check
    }, {
        content: "Check that Question 3 has 'normal' trigger icon",
        trigger: "tr:contains('Question 3') button i.fa-code-fork",
        run: () => {}, // it's a check
    }, {
        content: "Move Question 3 above its trigger (Question 2)",
        trigger: "tr.o_data_row:nth-child(3) td[name=sequence]",
        run: "drag_and_drop_native div[name=question_and_page_ids] table tbody tr:nth-child(2)",
    }, {
        content: "Check that Question 3 has 'warning' trigger icon",
        trigger: "tr:contains('Question 3') button i.fa-exclamation-triangle",
        run: () => {}, // it's a check
    }, {
        content: "Open that question to check the server's misplacement evaluation agrees",
        trigger: "tr.o_data_row td[data-tooltip='Question 3']",
        run: "click",
    }, {
        content: "Check that an alert is shown",
        trigger: ".o_form_sheet_bg div:first-child.alert-warning:contains('positioned before its trigger')",
        in_modal: true,
    },
    ...changeTab("options"),
    {
        content: "Change trigger question",
        trigger: ".o_field_widget[name=triggering_question_id] input",
        run: "click",
        in_modal: true,
    }, {
        content: "Set the first question as trigger instead",
        trigger: 'ul.ui-autocomplete a:contains("Question 1")',
        run: 'click',
        in_modal: true,
    }, {
        content: "Check that the alert is gone",
        trigger: `.o_form_sheet_bg div:first-child:not(.alert-warning).o_form_sheet`,
        in_modal: true,
        run: () => {}, // it's a check
    }, {
        content: "Change the trigger answer as well",
        trigger: ".modal-content .o_field_widget[name=triggering_answer_id] input",
        run: "click",
        in_modal: true,
    }, {
        content: "Set the second answer as trigger, then",
        trigger: 'ul.ui-autocomplete a:contains("Answer B")',
        run: 'click',
    },
    ...stepUtils.saveForm(),
     {
        content: "Check that Question 3 has its 'normal' trigger icon back",
        trigger: "tr:contains('Question 3') button i.fa-code-fork",
        run: () => {}, // it's a check
    }, {
        content: "Move Question 3 back below Question 2",
        trigger: "tr.o_data_row:nth-child(2) td[name=sequence]",
        run: "drag_and_drop_native div[name=question_and_page_ids] table tbody tr:nth-child(3)",
    }, {
        content: "Open that question again",
        trigger: "tr.o_data_row td[data-tooltip='Question 3']",
        run: "click",
    },
    ...changeTab("options"),
    {
        content: "Change trigger to confirm we can now use Question 2 again",
        trigger: ".modal-content .o_field_widget[name=triggering_question_id] input",
        run: "click",
        in_modal: true,
    }, {
        content: "Question 2 is allowed as trigger again",
        trigger: '.modal-content ul.ui-autocomplete a:contains("Question 2")',
        in_modal: true,
    }, {
        content: "Change the trigger answer back as well",
        trigger: ".modal-content .o_field_widget[name=triggering_answer_id] input",
        run: "text A",
        in_modal: true,
    }, {
        content: "Set the second answer as trigger, then",
        trigger: '.modal-content ul.ui-autocomplete a:contains("Answer B")',
        run: "click",
    },
    ...stepUtils.saveForm(),
    // Deleting trigger answers or whole question gracefully remove the trigger automatically
    {
        content: "Open Question 2 again",
        trigger: "tr.o_data_row td[data-tooltip='Question 2']",
        run: "click",
    }, {
        content: "Delete Answer B",
        trigger: "div[name=suggested_answer_ids] tr:contains('Answer B') button[name=delete]",
    },
    ...stepUtils.saveForm(),
    {
        content: "Check that Question 3 no longer has a trigger icon",
        trigger: "div[name=question_and_page_ids] tr:contains('Question 3') div.o_widget_survey_question_trigger:not(:has(button))",
        run: () => {}, // it's a check
    }, {
        content: "Check that Question 2 however still has a trigger icon",
        trigger: "tr:contains('Question 2') button i.fa-code-fork",
        run: () => {}, // it's a check
    }, {
        content: "Delete Question 1",
        trigger: "tr:contains('Question 1') button[name=delete]",
        run: "click",
    }, {
        content: "Check that now Question 2 too does no longer have a trigger icon",
        trigger: "tr:contains('Question 2') div.o_widget_survey_question_trigger:not(:has(button))",
        run: () => {}, // it's a check
    }, {
        content: 'Go back to Kanban View',
        trigger: 'a[data-menu-xmlid="survey.menu_surveys"]',
    }, {
        content: "Check that we arrived on the kanban view",
        trigger: ".o-kanban-button-new",
        run: () => {}, // it's a check
    }
]});

function addTwoAnswers() {
    return [
        {
            content: "Add the first answer",
            trigger: "div[name=suggested_answer_ids] .o_field_x2many_list_row_add a",
            in_modal: true,
        }, {
            trigger: 'tr.o_selected_row div[name=value] input',
            run: 'text Answer A',
            in_modal: true,
        }, {
            content: "Add the second answer",
            trigger: "div[name=suggested_answer_ids] .o_field_x2many_list_row_add a",
            in_modal: true,
        }, {
            trigger: 'tr.o_selected_row div[name=value] input',
            run: 'text Answer B',
            in_modal: true,
        }
    ];
}

function saveAndNew() {
    return [
        {
            content: "Click Save & New",
            trigger: "button.o_form_button_save_new",
            in_modal: true,
        }, {
            content: "Wait for the dialog to render new question form",
            // suggested_answer_ids required even though in_modal is specified...
            trigger: "div[name=suggested_answer_ids] .o_list_table tbody tr:first-child:not(.o_data_row)", // empty answers list
            in_modal: true,
            run: () => {}, // it's a check
        }
    ];
}

function toggleIsConditional() {
    return [
        ...changeTab("options"),
        {
            content: "Toggle is_conditional",
            trigger: "div[name=is_conditional] input",
            in_modal: true,
            run: "click",
        }
    ];
}

function changeTab(tabName) {
    // Currently, .modal-content is required even though "in_modal"
    return [
        {
            content: `Go to ${tabName} tab`,
            trigger: `.modal-content a[name=${tabName}].nav-link`,
            in_modal: true
        }, {
            content: `Wait for tab ${tabName} tab`,
            trigger: `.modal-content a[name=${tabName}].nav-link.active`,
            in_modal: true,
            run: () => {}, // it's a check
        }
    ];
}

return __exports;
});
;

/***********************************************************
*  Filepath: /survey/static/tests/tours/survey_prefill.js  *
*  Lines: 154                                              *
***********************************************************/
odoo.define('survey.tour_test_survey_prefill', function (require) {
'use strict';

const { registry } = require("@web/core/registry");

registry.category("web_tour.tours").add('test_survey_prefill', {
    test: true,
    url: '/survey/start/b137640d-14d4-4748-9ef6-344caaaaaae',
    steps: [{      // Page-1
        trigger: 'button.btn.btn-primary.btn-lg:contains("Start Survey")',
    }, { // Question: Where do you live?
        trigger: 'div.js_question-wrapper:contains("Where do you live?") input',
        run: 'text Grand-Rosiere',
    }, { // Question: When is your date of birth?
        trigger: 'div.js_question-wrapper:contains("When is your date of birth?") input',
        run: 'text 05/05/1980',
    }, { // Question: How frequently do you buy products online?
        trigger: 'div.js_question-wrapper:contains("How frequently do you buy products online?") label:contains("Once a week")',
    }, { // Question: How many times did you order products on our website?
        trigger: 'div.js_question-wrapper:contains("How many times did you order products on our website?") input',
        run: 'text 42',
    }, {
        content: 'Click on Next Page',
        trigger: 'button[value="next"]',
    },
    // Page-2
    { // Question: Which of the following words would you use to describe our products?
        content: 'Answer Which of the following words would you use to describe our products (High Quality)',
        trigger: 'div.js_question-wrapper:contains("Which of the following words would you use to describe our products") label:contains("High quality")',
    }, {
        content: 'Answer Which of the following words would you use to describe our products (Good value for money)',
        trigger: 'div.js_question-wrapper:contains("Which of the following words would you use to describe our products") label:contains("Good value for money")',
    }, {
        content: 'Answer What do your think about our new eCommerce (The new layout and design is fresh and up-to-date)',
        trigger: 'div.js_question-wrapper:contains("What do your think about our new eCommerce") tr:contains("The new layout and design is fresh and up-to-date") td:first',
    }, {
        content: 'Answer What do your think about our new eCommerce (It is easy to find the product that I want)',
        trigger: 'div.js_question-wrapper:contains("What do your think about our new eCommerce") tr:contains("It is easy to find the product that I want") td:eq(2)',
    }, {
        content: 'Answer What do your think about our new eCommerce (The tool to compare the products is useful to make a choice)',
        trigger: 'div.js_question-wrapper:contains("What do your think about our new eCommerce") tr:contains("The tool to compare the products is useful to make a choice") td:eq(3)',
    }, {
        content: 'Answer What do your think about our new eCommerce (The checkout process is clear and secure)',
        trigger: 'div.js_question-wrapper:contains("What do your think about our new eCommerce") tr:contains("The checkout process is clear and secure") td:eq(2)',
    }, {
        content: 'Answer What do your think about our new eCommerce (I have added products to my wishlist)',
        trigger: 'div.js_question-wrapper:contains("What do your think about our new eCommerce") tr:contains("I have added products to my wishlist") td:last',
    }, {
        content: 'Answer Do you have any other comments, questions, or concerns',
        trigger: 'div.js_question-wrapper:contains("Do you have any other comments, questions, or concerns") textarea',
        run: 'text Is the prefill working?',
    }, {
        // Go back to previous page
        content: 'Click on the previous page name in the breadcrumb',
        trigger: 'ol.breadcrumb a:first',
    }, {
        trigger: 'div.js_question-wrapper:contains("How many times did you order products on our website?") input',
        run: function () {
            var $inputQ3 = $('div.js_question-wrapper:contains("How many times did you order products on our website?") input');
            if ($inputQ3.val() === '42.0') {
                $('.o_survey_title').addClass('prefilled');
            }
        }
    }, {
        trigger: '.o_survey_title.prefilled',
        run: function () {
            // check that all the answers are prefilled in Page 1
            var $inputQ1 = $('div.js_question-wrapper:contains("Where do you live?") input');
            if ($inputQ1.val() !== 'Grand-Rosiere') {
                return;
            }

            var $inputQ2 = $('div.js_question-wrapper:contains("When is your date of birth?") input');
            if ($inputQ2.val() !== '05/05/1980') {
                return;
            }

            var $inputQ3 = $('div.js_question-wrapper:contains("How frequently do you buy products online?") label:contains("Once a week") input');
            if (!$inputQ3.is(':checked')) {
                return;
            }

            var $inputQ4 = $('div.js_question-wrapper:contains("How many times did you order products on our website?") input');
            if ($inputQ4.val() !== '42.0') {
                return;
            }

            $('.o_survey_title').addClass('tour_success');
        }
    }, {
        trigger: '.o_survey_title.tour_success'
    }, {
        content: 'Click on Next Page',
        trigger: 'button[value="next"]',
    }, {
        trigger: 'div.js_question-wrapper:contains("Do you have any other comments, questions, or concerns") textarea',
        run: function () {
            var $inputQ3 = $('div.js_question-wrapper:contains("Do you have any other comments, questions, or concerns") textarea');
            if ($inputQ3.val() === "Is the prefill working?") {
                $('.o_survey_title').addClass('prefilled2');
            }
        }
    }, {
        trigger: '.o_survey_title.prefilled2',
        run: function () {
            // check that all the answers are prefilled in Page 2
            var $input1Q1 = $('div.js_question-wrapper:contains("Which of the following words would you use to describe our products") label:contains("High quality") input');
            if (!$input1Q1.is(':checked')) {
                return;
            }

            var $input2Q1 = $('div.js_question-wrapper:contains("Which of the following words would you use to describe our products") label:contains("Good value for money") input');
            if (!$input2Q1.is(':checked')) {
                return;
            }

            var $input1Q2 = $('div.js_question-wrapper:contains("What do your think about our new eCommerce") tr:contains("The new layout and design is fresh and up-to-date") input:first');
            if (!$input1Q2.is(':checked')) {
                return;
            }

            var $input2Q2 = $('div.js_question-wrapper:contains("What do your think about our new eCommerce") tr:contains("It is easy to find the product that I want") input:eq(2)');
            if (!$input2Q2.is(':checked')) {
                return;
            }

            var $input3Q2 = $('div.js_question-wrapper:contains("What do your think about our new eCommerce") tr:contains("The tool to compare the products is useful to make a choice") input:eq(3)');
            if (!$input3Q2.is(':checked')) {
                return;
            }

            var $input4Q2 = $('div.js_question-wrapper:contains("What do your think about our new eCommerce") tr:contains("The checkout process is clear and secure") input:eq(2)');
            if (!$input4Q2.is(':checked')) {
                return;
            }

            var $input5Q2 = $('div.js_question-wrapper:contains("What do your think about our new eCommerce") tr:contains("I have added products to my wishlist") input:last');
            if (!$input5Q2.is(':checked')) {
                return;
            }

            var $inputQ3 = $('div.js_question-wrapper:contains("Do you have any other comments, questions, or concerns") textarea');
            if ($inputQ3.val() !== "Is the prefill working?") {
                return;
            }

            $('.o_survey_title').addClass('tour_success_2');
        }
    }, {
        trigger: '.o_survey_title.tour_success_2'
    }
]});

});
;

/***********************************************************************
*  Filepath: /survey/static/tests/tours/survey_session_manage_test.js  *
*  Lines: 37                                                           *
***********************************************************************/
odoo.define('survey.session_manage_test', function (require) {
"use strict";

var SessionManager = require('survey.session_manage');
/**
 * Small override for test/tour purposes.
 */
SessionManager.include({
    /**
     * - Trigger the fetch of answer results immediately at the start.
     * (Instead of wasting 2 seconds waiting after the start).
     * - Set the fade in/out time to 1 ms to avoid unnecessary delays.
     * - Avoid refreshing the results every 2 seconds
     */
    start: function () {
        var self = this;
        return this._super.apply(this, arguments)
            .then(this._refreshResults.bind(this))
            .then(function () {
                self.fadeInOutTime = 1;
                clearInterval(self.resultsRefreshInterval);
            });
    },

    /**
     * Force the timer to "now" to avoid introducing potential test breaking
     * timely variables (rpc/small server delay/...) if the start_question_time flickers.
     */
    _startTimer: function () {
        this.$el.data('timer', moment.utc());
        return this._super.apply(this, arguments);
    }
});

return SessionManager;

});
;

/***********************************************************************
*  Filepath: /survey/static/tests/tours/survey_tour_session_create.js  *
*  Lines: 20                                                           *
***********************************************************************/
odoo.define('survey.test_survey_session_create_tour', function (require) {
"use strict";

const { registry } = require("@web/core/registry");
var surveySessionTools = require('survey.session_tour_tools');

/**
 * Small tour that will simply start the session and wait for attendees.
 */
registry.category("web_tour.tours").add('test_survey_session_create_tour', {
    url: "/web",
    test: true,
    steps: [].concat(surveySessionTools.accessSurveySteps, [{
    trigger: 'button[name="action_start_session"]',
}, {
    trigger: '.o_survey_session_attendees_count:contains("0")',
    run: function () {} // check session is correctly started
}])});

});
;

/***********************************************************************
*  Filepath: /survey/static/tests/tours/survey_tour_session_manage.js  *
*  Lines: 462                                                          *
***********************************************************************/
odoo.define('survey.test_survey_session_manage_tour', function (require) {
"use strict";

const { registry } = require("@web/core/registry");
var surveySessionTools = require('survey.session_tour_tools');

/**
 * Since the chart is rendered using SVG, we can't use jQuery triggers to check if everything
 * is correctly rendered.
 * This helper method returns the chart data (Chartjs framework specific) in the following structure:
 * [{ value, backgroundColor, labelColor }]
 */
var getChartData = function () {
    var chartData = [];
    var rootWidget = odoo.__DEBUG__.services['root.widget'];
    var surveyManagePublicWidget = rootWidget.publicWidgets.find(function (widget) {
        return widget.$el.hasClass('o_survey_session_manage');
    });

    if (!surveyManagePublicWidget) {
        return chartData;
    }

    surveyManagePublicWidget.resultsChart.chart.data.datasets[0].data.forEach(function (value, index) {
        chartData.push({
            value: value,
            backgroundColor: surveyManagePublicWidget.resultsChart._getBackgroundColor({dataIndex: index}),
            labelColor: surveyManagePublicWidget.resultsChart._getLabelColor({dataIndex: index}),
        });
    });

    return chartData;
};

var nextScreen = function () {
    var e = $.Event('keydown');
    e.keyCode = 39; // arrow-right
    $(document).trigger(e);
};

var previousScreen = function () {
    var e = $.Event('keydown');
    e.keyCode = 37; // arrow-left
    $(document).trigger(e);
};

var REGULAR_ANSWER_COLOR = '#212529';
var CORRECT_ANSWER_COLOR = '#2CBB70';
var WRONG_ANSWER_COLOR = '#D9534F';

/**
 * A 'regular' answer is an answer that is nor correct, nor incorrect.
 * The check is based on the specific opacity (0.8) and color of those answers.
 */
var isRegularAnswer = function (answer) {
    return answer.backgroundColor.includes('0.8') &&
        answer.labelColor === REGULAR_ANSWER_COLOR;
};

/**
 * The check is based on the specific opacity (0.8) and color of correct answers.
 */
var isCorrectAnswer = function (answer) {
    return answer.backgroundColor.includes('0.8') &&
        answer.labelColor === CORRECT_ANSWER_COLOR;
};

/**
 * The check is based on the specific opacity (0.2) and color of incorrect answers.
 */
var isIncorrectAnswer = function (answer) {
    return answer.backgroundColor.includes('0.2') &&
        answer.labelColor === WRONG_ANSWER_COLOR;
};

/**
 * Tour that will test the whole survey session from the host point of view.
 *
 * Break down of the main points:
 * - Open the 'session manager' (the session was already created by a previous tour)
 * - Display the nickname question, and move to the next one (as answers are not displayed)
 * - Check answers are correctly displayed for the 3 'simple' question types (text, date, datetime)
 * - Move to the choice question and check that answers are displayed
 *   (The check is rather complex, see 'getChartData' for details)
 * - If everything is correctly displayed, move to the next question
 * - On the scored choice question, check that the screens are correctly chained:
 *   no results displayed -> results displayed -> correct/incorrect answers -> leaderboard
 * - On the scored + timed multiple choice question, check the same than previous question,
 *   except that the results are supposed to be displayed automatically when the question timer runs out
 * - Test the 'back' behavior and check that screens are reversed correctly
 * - Check that our final leaderboard is correct based on attendees answers
 * - Close the survey session
 */
registry.category("web_tour.tours").add('test_survey_session_manage_tour', {
    url: "/web",
    test: true,
    steps: [].concat(surveySessionTools.accessSurveySteps, [{
    trigger: 'button[name="action_open_session_manager"]',
}, {
    trigger: 'h1:contains("Nickname")',
    run: function () {} // check nickname question is displayed
}, {
    trigger: 'h1',
    run: nextScreen
}, {
    trigger: 'h1:contains("Text Question")',
    run: function () {} // check text question is displayed
}, {
    trigger: '.o_survey_session_progress_small:contains("3 / 3")',
    run: function () {} // check we have 3 answers
}, {
    trigger: '.o_survey_session_text_answer_container:contains("Attendee 1 is the best")',
    run: function () {} // check attendee 1 answer is displayed
}, {
    trigger: '.o_survey_session_text_answer_container:contains("Attendee 2 rulez")',
    run: function () {} // check attendee 2 answer is displayed
}, {
    trigger: '.o_survey_session_text_answer_container:contains("Attendee 3 will crush you")',
    run: function () {} // check attendee 3 answer is displayed
}, {
    trigger: 'h1',
    run: nextScreen
}, {
    trigger: '.o_survey_session_progress_small:contains("2 / 3")',
    run: function () {} // check we have 2 answers
}, {
    trigger: '.o_survey_session_text_answer_container:contains("10/10/2010")',
    run: function () {} // check attendee 1 answer is displayed
}, {
    trigger: '.o_survey_session_text_answer_container:contains("11/11/2011")',
    run: function () {} // check attendee 2 answer is displayed
}, {
    trigger: 'h1',
    run: previousScreen
}, {
    trigger: 'h1:contains("Text Question")',
    run: function () {} // check text question is displayed
}, {
    trigger: '.o_survey_session_progress_small:contains("3 / 3")',
    run: function () {} // check we have 3 answers
}, {
    trigger: '.o_survey_session_text_answer_container:contains("Attendee 1 is the best")',
    run: function () {} // check attendee 1 answer is displayed
}, {
    trigger: '.o_survey_session_text_answer_container:contains("Attendee 2 rulez")',
    run: function () {} // check attendee 2 answer is displayed
}, {
    trigger: '.o_survey_session_text_answer_container:contains("Attendee 3 will crush you")',
    run: function () {} // check attendee 3 answer is displayed
}, {
    trigger: 'h1',
    run: nextScreen
}, {
    trigger: '.o_survey_session_progress_small:contains("2 / 3")',
    run: function () {} // check we have 2 answers
}, {
    trigger: '.o_survey_session_text_answer_container:contains("10/10/2010")',
    run: function () {} // check attendee 1 answer is displayed
}, {
    trigger: '.o_survey_session_text_answer_container:contains("11/11/2011")',
    run: function () {} // check attendee 2 answer is displayed
}, {
    trigger: 'h1',
    run: nextScreen
}, {
    trigger: '.o_survey_session_progress_small:contains("2 / 3")',
    run: function () {} // check we have 2 answers
}, {
    trigger: '.o_survey_session_text_answer_container:contains("10/10/2010 10:00:00")',
    run: function () {} // check attendee 2 answer is displayed
}, {
    trigger: '.o_survey_session_text_answer_container:contains("11/11/2011 15:55:55")',
    run: function () {} // check attendee 3 answer is displayed
}, {
    trigger: 'h1',
    run: nextScreen
}, {
    trigger: 'h1:contains("Regular Simple Choice")',
    run: function () {
        var chartData = getChartData();
        if (chartData.length !== 3) {
            console.error('Chart data should contain 3 records!');
            return;
        }

        var firstAnswerData = chartData[0];
        if (firstAnswerData.value !== 2 || !isRegularAnswer(firstAnswerData)) {
            console.error('First answer should be picked by 2 users!');
            return;
        }

        var secondAnswerData = chartData[1];
        if (secondAnswerData.value !== 1 || !isRegularAnswer(secondAnswerData)) {
            console.error('Second answer should be picked by 1 user!');
            return;
        }

        var thirdAnswerData = chartData[2];
        if (thirdAnswerData.value !== 0 || !isRegularAnswer(thirdAnswerData)) {
            console.error('Third answer should be picked by no users!');
            return;
        }

        nextScreen();
    }
}, {
    trigger: 'h1:contains("Scored Simple Choice")',
    run: function () {
        var chartData = getChartData();
        if (chartData.length !== 4) {
            console.error('Chart data should contain 4 records!');
            return;
        }

        for (var i = 0; i < chartData.length; i++) {
            if (chartData[i].value !== 0) {
                console.error(
                    'Chart data should all be 0 because "next screen" that shows ' +
                    'answers values is not triggered yet!');
                return;
            }
        }

        nextScreen();
        chartData = getChartData();

        var firstAnswerData = chartData[0];
        if (firstAnswerData.value !== 1 || !isRegularAnswer(firstAnswerData)) {
            console.error(
                'First answer should be picked by 1 user and its correctness should not be shown yet!'
            );
            return;
        }

        var secondAnswerData = chartData[1];
        if (secondAnswerData.value !== 1 || !isRegularAnswer(secondAnswerData)) {
            console.error(
                'Second answer should be picked by 1 user and its correctness should not be shown yet!'
            );
            return;
        }

        var thirdAnswerData = chartData[2];
        if (thirdAnswerData.value !== 1 || !isRegularAnswer(thirdAnswerData)) {
            console.error(
                'Third answer should be picked by 1 user and its correctness should not be shown yet!'
            );
            return;
        }

        var fourthAnswerData = chartData[3];
        if (fourthAnswerData.value !== 0 || !isRegularAnswer(fourthAnswerData)) {
            console.error(
                'Fourth answer should be picked by no users and its correctness should not be shown yet!'
            );
            return;
        }

        nextScreen();
        chartData = getChartData();

        firstAnswerData = chartData[0];
        if (firstAnswerData.value !== 1 || !isCorrectAnswer(firstAnswerData)) {
            console.error(
                'First answer should be picked by 1 user and it should be correct!'
            );
            return;
        }

        secondAnswerData = chartData[1];
        if (secondAnswerData.value !== 1 || !isIncorrectAnswer(secondAnswerData)) {
            console.error(
                'Second answer should be picked by 1 user and it should be incorrect!'
            );
            return;
        }

        thirdAnswerData = chartData[2];
        if (thirdAnswerData.value !== 1 || !isIncorrectAnswer(thirdAnswerData)) {
            console.error(
                'Third answer should be picked by 1 user and it should be incorrect!'
            );
            return;
        }

        fourthAnswerData = chartData[3];
        if (fourthAnswerData.value !== 0 || !isIncorrectAnswer(fourthAnswerData)) {
            console.error(
                'Fourth answer should be picked by no users and it should be incorrect!'
            );
            return;
        }

        nextScreen();
        nextScreen();
    }
}, {
    trigger: 'h1:contains("Timed Scored Multiple Choice")',
    run: function () {
        var chartData = getChartData();
        if (chartData.length !== 3) {
            console.error('Chart data should contain 4 records!');
            return;
        }

        for (var i = 0; i < chartData.length; i++) {
            if (chartData[i].value !== 0) {
                console.error(
                    'Chart data should all be 0 because "next screen" that shows ' +
                    'answers values is not triggered yet!');
                return;
            }
        }

        // after 1 second, results are displayed automatically because question timer runs out
        // we add 1 extra second because of the way the timer works:
        // it only triggers the time_up event 1 second AFTER the delay is passed
        setTimeout(function () {
            chartData = getChartData();
            var firstAnswerData = chartData[0];
            if (firstAnswerData.value !== 2 || !isRegularAnswer(firstAnswerData)) {
                console.error(
                    'First answer should be picked by 2 users and its correctness should not be shown yet!'
                );
                return;
            }

            var secondAnswerData = chartData[1];
            if (secondAnswerData.value !== 2 || !isRegularAnswer(secondAnswerData)) {
                console.error(
                    'Second answer should be picked by 2 users and its correctness should not be shown yet!'
                );
                return;
            }

            var thirdAnswerData = chartData[2];
            if (thirdAnswerData.value !== 1 || !isRegularAnswer(thirdAnswerData)) {
                console.error(
                    'Third answer should be picked by 1 user and its correctness should not be shown yet!'
                );
                return;
            }

            nextScreen();
            chartData = getChartData();

            firstAnswerData = chartData[0];
            if (firstAnswerData.value !== 2 || !isCorrectAnswer(firstAnswerData)) {
                console.error(
                    'First answer should be picked by 2 users and it should be correct!'
                );
                return;
            }

            secondAnswerData = chartData[1];
            if (secondAnswerData.value !== 2 || !isCorrectAnswer(secondAnswerData)) {
                console.error(
                    'Second answer should be picked by 2 users and it should be correct!'
                );
                return;
            }

            thirdAnswerData = chartData[2];
            if (thirdAnswerData.value !== 1 || !isIncorrectAnswer(thirdAnswerData)) {
                console.error(
                    'Third answer should be picked by 1 user and it should be incorrect!'
                );
                return;
            }

            nextScreen();
        }, 2100);
    }
}, {
    trigger: 'h1:contains("Final Leaderboard")',
    run: function () {} // Final Leaderboard is displayed
}, {
    trigger: 'h1',
    run: function () {
        // previous screen testing
        previousScreen();
        var chartData = getChartData();

        var firstAnswerData = chartData[0];
        if (firstAnswerData.value !== 2 || !isCorrectAnswer(firstAnswerData)) {
            console.error(
                'First answer should be picked by 2 users and it should be correct!'
            );
            return;
        }

        var secondAnswerData = chartData[1];
        if (secondAnswerData.value !== 2 || !isCorrectAnswer(secondAnswerData)) {
            console.error(
                'Second answer should be picked by 2 users and it should be correct!'
            );
            return;
        }

        var thirdAnswerData = chartData[2];
        if (thirdAnswerData.value !== 1 || !isIncorrectAnswer(thirdAnswerData)) {
            console.error(
                'Third answer should be picked by 1 user and it should be incorrect!'
            );
            return;
        }

        previousScreen();
        chartData = getChartData();

        firstAnswerData = chartData[0];
        if (firstAnswerData.value !== 2 || !isRegularAnswer(firstAnswerData)) {
            console.error(
                'First answer should be picked by 2 users and its correctness should not be shown!'
            );
            return;
        }

        secondAnswerData = chartData[1];
        if (secondAnswerData.value !== 2 || !isRegularAnswer(secondAnswerData)) {
            console.error(
                'Second answer should be picked by 2 users and its correctness should not be shown!'
            );
            return;
        }

        thirdAnswerData = chartData[2];
        if (thirdAnswerData.value !== 1 || !isRegularAnswer(thirdAnswerData)) {
            console.error(
                'Third answer should be picked by 1 user and its correctness should not be shown!'
            );
            return;
        }

        previousScreen();
        chartData = getChartData();

        for (var i = 0; i < chartData.length; i++) {
            if (chartData[i].value !== 0) {
                console.error(
                    'Chart data should all be 0 because "next screen" that shows ' +
                    'answers values is not triggered yet!');
                return;
            }
        }

        // Now we go forward to the "Final Leaderboard" again (3 times)
        for (i = 0; i < 3; i++) {
            nextScreen();
        }
    }
}, {
    trigger: 'h1:contains("Final Leaderboard")',
    run: function () {} // Final Leaderboard is displayed
}, {
    trigger: '.o_survey_session_close:has("i.fa-close")'
}, {
    trigger: 'button[name="action_start_session"]',
    run: function () {} // check that we can start another session
}])});

});
;

/**********************************************************************
*  Filepath: /survey/static/tests/tours/survey_tour_session_start.js  *
*  Lines: 32                                                          *
**********************************************************************/
odoo.define('survey.test_survey_session_start_tour', function (require) {
"use strict";

const { registry } = require("@web/core/registry");
var surveySessionTools = require('survey.session_tour_tools');

/**
 * Small tour that will open the session manager and check
 * that the attendees are accounted for, then start the session
 * by going to the first question.
 */
registry.category("web_tour.tours").add('test_survey_session_start_tour', {
    url: "/web",
    test: true,
    steps: [].concat(surveySessionTools.accessSurveySteps, [{
    trigger: 'button[name="action_open_session_manager"]',
}, {
    trigger: '.o_survey_session_attendees_count:contains("3")',
    run: function () {} // check attendees count
}, {
    trigger: 'h1',
    run: function () {
        var e = $.Event('keydown');
        e.keyCode = 39; // arrow-right
        $(document).trigger(e); // start session
    }
}, {
    trigger: 'h1:contains("Nickname")',
    run: function () {} // check first question is displayed
}])});

});
;

/**********************************************************************
*  Filepath: /survey/static/tests/tours/survey_tour_session_tools.js  *
*  Lines: 21                                                          *
**********************************************************************/
odoo.define('survey.session_tour_tools', function (require) {
'use strict';

const { stepUtils } = require('@web_tour/js/tour_step_utils');

/**
 * Tool that gathers common steps to every 'survey session' tours.
 */
return {
    accessSurveySteps: [stepUtils.showAppsMenuItem(), {
        trigger: '.o_app[data-menu-xmlid="survey.menu_surveys"]',
        edition: 'community'
    }, {
        trigger: '.o_app[data-menu-xmlid="survey.menu_surveys"]',
        edition: 'enterprise'
    }, {
        trigger: '.oe_kanban_card:contains("User Session Survey")',
    }]
};

});
;

/****************************************************************************
*  Filepath: /account_reports/static/tests/tours/account_reports_search.js  *
*  Lines: 48                                                                *
****************************************************************************/
odoo.define('@account_reports/../tests/tours/account_reports_search', ['@web/core/registry'], async function (require) {
'use strict';
let __exports = {};
/** @odoo-module **/

const { registry } = require("@web/core/registry");

registry.category("web_tour.tours").add('account_reports_search', {
    test: false,
    url: '/web?#action=account_reports.action_account_report_general_ledger',
    steps: [
        {
            content: "click search",
            trigger: '.o_searchview_input',
            run: 'click',
        },
        {
            content: 'insert text in the searchbar',
            trigger: '.o_searchview_input',
            run: 'text 40'
        },
        {
            content: 'test if the product sale line is present',
            trigger: '.account_report_line_name:contains("400000 Product Sales")',
        },
        {
            content: "click search",
            trigger: '.o_searchview_input',
            run: 'click',
        },
        {
            content: 'insert text in the search bar',
            trigger: '.o_searchview_input',
            run: 'text Account'
        },
        {
            content: 'test if the receivable line is present',
            trigger: '.account_report_line_name:contains("121000 Account Receivable")',
        },
        {
            content: 'check that the product sale line is not present',
            trigger: '.account_report_line_name:not(:contains("400000 Product Sales"))',
        },
    ]
});

return __exports;
});
;

/*****************************************************************************
*  Filepath: /account_reports/static/tests/tours/account_reports_widgets.js  *
*  Lines: 101                                                                *
*****************************************************************************/
odoo.define('account_reports_widgets.tour', function (require) {
"use strict";

const { registry } = require("@web/core/registry");

registry.category("web_tour.tours").add('account_reports_widgets', {
    test: true,
    url: '/web?#action=account_reports.action_account_report_pl',
    steps: [
        {
            content: "wait web client",
            trigger: ".o_account_reports_body",
            extra_trigger: ".breadcrumb",
            run: function () {}
        },
        {
            content: "unfold line",
            trigger: '.js_account_report_foldable:first',
            extra_trigger: '.js_account_report_foldable:first',
            run: 'click',
        },
        {
            content: "check that line has been unfolded",
            trigger: '[data-parent-id]',
            extra_trigger: '[data-parent-id]',
        },
        {
            content: 'Open dropdown menu of one of the unfolded line',
            trigger: '[data-parent-id] .o_account_report_line .dropdown a span',
            extra_trigger: '[data-parent-id] .o_account_report_line .dropdown a span',
            run: 'click',
        },
        {
            content: 'click on the annotate action',
            trigger: '[data-parent-id] .o_account_report_line .dropdown .o_account_reports_domain_dropdown .js_account_reports_add_footnote',
            extra_trigger: '[data-parent-id] .o_account_report_line .dropdown .o_account_reports_domain_dropdown .js_account_reports_add_footnote',
            run: 'click',
        },
        {
            content: 'insert footnote text',
            trigger: '.js_account_reports_footnote_note',
            extra_trigger: '.js_account_reports_footnote_note',
            run: 'text My awesome footnote!'
        },
        {
            content: 'save footnote',
            trigger: '.modal-footer .btn-primary',
            extra_trigger: '.modal-footer .btn-primary',
            run: 'click'
        },
        {
            content: 'wait for footnote to be saved',
            trigger: '.footnote#footnote1 .text:contains(1. My awesome footnote!)',
            extra_trigger: '.o_account_reports_footnote_sup a[href="#footnote1"]',
            run: function(){},
        },
        {
            content: "change date filter",
            trigger: ".o_account_reports_filter_date > button",
            extra_trigger: ".o_account_reports_filter_date > button",
        },
        {
            content: "change date filter",
            trigger: ".o_account_reports_filter_date .dropdown-item.js_account_report_date_filter[data-filter='last_year']",
            extra_trigger: ".o_account_reports_filter_date > button.show",
            run: 'click'
        },
        {
            content: "wait refresh",
            trigger: ".o_account_reports_filter_date button:contains('2019')",
            run: function(){},
        },
        {
            content: "change comparison filter",
            trigger: ".o_account_reports_filter_date_cmp > button",
        },
        {
            content: "change comparison filter",
            trigger: ".dropdown-item.js_foldable_trigger[data-filter='previous_period']",
            extra_trigger: ".o_account_reports_filter_date_cmp > button.show",
        },
        {
            content: "wait for Apply button and click on it",
            trigger: ".js_account_report_date_cmp_filter[data-filter='previous_period']",
            run: 'click',
        },
        {
            content: "wait refresh, report should have 4 columns",
            trigger: "th + th + th + th",
            run: function(){},
        },
        {
            title: "export xlsx",
            trigger: 'button[action_param="export_to_xlsx"]',
            extra_trigger: 'button[action_param="export_to_xlsx"]',
            run: 'click'
        },
    ]
});

});
;

/*************************************************************
*  Filepath: /website_crm/static/tests/tours/website_crm.js  *
*  Lines: 85                                                 *
*************************************************************/
odoo.define('website_crm.tour', function(require) {
    'use strict';

    const { registry } = require("@web/core/registry");
    const wTourUtils = require('website.tour_utils');

    wTourUtils.registerWebsitePreviewTour('website_crm_pre_tour', {
        test: true,
        url: '/contactus',
        edition: true,
    }, [{
        content: "Select contact form",
        trigger: "iframe #wrap.o_editable section.s_website_form",
    }, {
        content: "Open action select",
        trigger: "we-select:has(we-button:contains('Create an Opportunity')) we-toggler",
        extra_trigger: "#oe_snippets .o_we_customize_snippet_btn.active",
    }, {
        content: "Select 'Create an Opportunity' as form action",
        trigger: "we-select we-button:contains('Create an Opportunity')",
    }, {
        content: "Save the settings",
        trigger: "button[data-action=save]",
    }, {
        content: "Ensure form model has changed and page reload is done after save",
        trigger: "iframe section.s_website_form form[data-model_name='crm.lead']",
        extra_trigger: "iframe body:not(.editor_enable)",
    }]);

    registry.category("web_tour.tours").add('website_crm_tour', {
        test: true,
        url: '/contactus',
        steps: [{
        content: "Complete name",
        trigger: "input[name=contact_name]",
        run: "text John Smith",
    }, {
        content: "Complete phone number",
        trigger: "input[name=phone]",
        run: "text +32 485 118.218"
    }, {
        content: "Complete Email",
        trigger: "input[name=email_from]",
        run: "text john@smith.com"
    }, {
        content: "Complete Company",
        trigger: "input[name=partner_name]",
        run: "text Odoo S.A."
    }, {
        content: "Complete Subject",
        trigger: "input[name=name]",
        run: "text Useless message"
    }, {
        content: "Complete Subject",
        trigger: "textarea[name=description]",
        run: "text ### TOUR DATA ###"
    }, {
        content: "Send the form",
        trigger: ".s_website_form_send"
    }, {
        content: "Check we were redirected to the success page",
        trigger: "#wrap:has(h1:contains('Thank You!'))"
    }]});

    registry.category("web_tour.tours").add('website_crm_catch_logged_partner_info_tour', {
        test: true,
        url: '/contactus',
        steps: [{
        content: "Complete Subject",
        trigger: "input[name=name]",
        run: "text Useless subject"
    }, {
        content: "Complete Subject",
        trigger: "textarea[name=description]",
        run: "text ### TOUR DATA PREFILL ###"
    }, {
        content: "Send the form",
        trigger: ".s_website_form_send"
    }, {
        content: "Check we were redirected to the success page",
        trigger: "#wrap:has(h1:contains('Thank You!'))"
    }]});

    return {};
});
;

/***************************************************
*  Filepath: /auth_totp/static/tests/totp_flow.js  *
*  Lines: 340                                      *
***************************************************/
odoo.define('auth_totp.tours', function(require) {
"use strict";

const ajax = require('web.ajax');
const { registry } = require("@web/core/registry");
const { stepUtils } = require('@web_tour/js/tour_step_utils');

function openRoot() {
    return [{
        content: "return to client root to avoid race condition",
        trigger: 'body',
        run() {
            $('body').addClass('wait');
            window.location = '/web';
        }
    }, {
        content: "wait for client reload",
        trigger: 'body:not(.wait)',
        run() {}
    }];
}
function openUserProfileAtSecurityTab() {
    return [{
        content: 'Open user account menu',
        trigger: '.o_user_menu .oe_topbar_name',
        run: 'click',
    }, {
        content: "Open preferences / profile screen",
        trigger: '[data-menu=settings]',
        run: 'click',
    }, {
        content: "Switch to security tab",
        trigger: 'a[role=tab]:contains("Account Security")',
        run: 'click',
    }];
}

/**
 * Checks that the TOTP button is in the specified state (true = enabled =
 * can disable, false = disabled = can enable), then closes the profile dialog
 * if it's one (= hr not installed).
 *
 * If no totp state is provided, just checks that the toggle exists.
 */
function closeProfileDialog({content, totp_state}) {
    let trigger;
    switch (totp_state) {
    case true: trigger = 'button[name=action_totp_disable]'; break;
    case false: trigger = 'button[name=action_totp_enable_wizard]'; break;
    case undefined: trigger = 'button.o_auth_2fa_btn'; break;
    default: throw new Error(`Invalid totp state ${totp_state}`)
    }

    return [{
        content,
        trigger,
        run() {
            const $modal = this.$anchor.parents('.o_dialog_container');
            if ($modal.length) {
                $modal.find('button[name=preference_cancel]').click()
            }
        }
    }, {
        trigger: 'body',
        async run() {
            while (document.querySelector('.o_dialog_container .o_dialog')) {
                await Promise.resolve();
            }
            this.$anchor.addClass('dialog-closed');
        },
    }, {
        trigger: 'body.dialog-closed',
        run() {},
    }];
}

registry.category("web_tour.tours").add('totp_tour_setup', {
    test: true,
    url: '/web',
    steps: [...openUserProfileAtSecurityTab(), {
    content: "Open totp wizard",
    trigger: 'button[name=action_totp_enable_wizard]',
}, {
    content: "Check that we have to enter enhanced security mode and input password",
    extra_trigger: 'div:contains("enter your password")',
    trigger: '[name=password] input',
    run: 'text demo',
}, {
    content: "Confirm",
    trigger: "button:contains(Confirm Password)",
}, {
    content: "Check the wizard has opened",
    trigger: 'li:contains("When requested to do so")',
    run() {}
}, {
    content: "Get secret from collapsed div",
    trigger: 'a:contains("Cannot scan it?")',
    async run(helpers) {
        const $secret = this.$anchor.closest('div').find('[name=secret] span:first-child');
        const $copyBtn = $secret.find('button');
        $copyBtn.remove();
        const token = await ajax.jsonRpc('/totphook', 'call', {
            secret: $secret.text()
        });
        helpers.text(token, '[name=code] input');
        helpers.click('button.btn-primary:contains(Activate)');
        $('body').addClass('got-token')
    }
}, {
    content: 'wait for rpc',
    trigger: 'body.got-token',
    run() {}
},
...openRoot(),
...openUserProfileAtSecurityTab(),
...closeProfileDialog({
    content: "Check that the button has changed",
    totp_state: true,
}),
]});

registry.category("web_tour.tours").add('totp_login_enabled', {
    test: true,
    url: '/',
    steps: [{
    content: "check that we're on the login page or go to it",
    trigger: 'input#login, a:contains(Sign in)'
}, {
    content: "input login",
    trigger: 'input#login',
    run: 'text demo',
}, {
    content: 'input password',
    trigger: 'input#password',
    run: 'text demo',
}, {
    content: "click da button",
    trigger: 'button:contains("Log in")',
}, {
    content: "expect totp screen",
    trigger: 'label:contains(Authentication Code)',
}, {
    content: "input code",
    trigger: 'input[name=totp_token]',
    async run(helpers) {
        // TODO: if tours are ever async-aware the click should get moved out,
        //       but currently there's no great way to make the tour wait until
        //       we've retrieved and set the token: `:empty()` is aboutthe text
        //       content of the HTML element, not the JS value property. We
        //       could set a class but that's really no better than
        //       procedurally clicking the button after we've set the input.
        const token = await ajax.jsonRpc('/totphook', 'call', {});
        helpers.text(token);
        helpers.click('button:contains("Log in")');
    }
}, {
    content: "check we're logged in",
    trigger: ".o_user_menu .oe_topbar_name",
    run() {}
}]});

registry.category("web_tour.tours").add('totp_login_device', {
    test: true,
    url: '/',
    steps: [{
    content: "check that we're on the login page or go to it",
    trigger: 'input#login, a:contains(Sign in)'
}, {
    content: "input login",
    trigger: 'input#login',
    run: 'text demo',
}, {
    content: 'input password',
    trigger: 'input#password',
    run: 'text demo',
}, {
    content: "click da button",
    trigger: 'button:contains("Log in")',
}, {
    content: "expect totp screen",
    trigger: 'label:contains(Authentication Code)',
}, {
    content: "check remember device box",
    trigger: 'label[for=switch-remember]',
}, {
    content: "input code",
    trigger: 'input[name=totp_token]',
    async run(helpers) {
        const token = await ajax.jsonRpc('/totphook', 'call', {})
        helpers.text(token);
        helpers.click('button:contains("Log in")');
    }
}, {
    content: "check we're logged in",
    trigger: ".o_user_menu .oe_topbar_name",
    run: 'click',
}, {
    content: "click the Log out button",
    trigger: '.dropdown-item[data-menu=logout]',
}, {
    content: "check that we're back on the login page or go to it",
    trigger: 'input#login, a:contains(Log in)'
}, {
    content: "input login again",
    trigger: 'input#login',
    run: 'text demo',
}, {
    content: 'input password again',
    trigger: 'input#password',
    run: 'text demo',
}, {
    content: "click da button again",
    trigger: 'button:contains("Log in")',
},  {
    content: "check we're logged in without 2FA",
    trigger: ".o_user_menu .oe_topbar_name",
    run() {}
},
// now go and disable two-factor authentication would be annoying to do in a separate tour
// because we'd need to login & totp again as HttpCase.authenticate can't
// succeed w/ totp enabled
...openUserProfileAtSecurityTab(),
{
    content: "Open totp wizard",
    trigger: 'button[name=action_totp_disable]',
}, {
    content: "Check that we have to enter enhanced security mode and input password",
    extra_trigger: 'div:contains("enter your password")',
    trigger: '[name=password] input',
    run: 'text demo',
}, {
    content: "Confirm",
    trigger: "button:contains(Confirm Password)",
},
...openRoot(),
...openUserProfileAtSecurityTab(),
...closeProfileDialog({
    content: "Check that the button has changed",
    totp_state: false
}),
]});

registry.category("web_tour.tours").add('totp_login_disabled', {
    test: true,
    url: '/',
    steps: [{
    content: "check that we're on the login page or go to it",
    trigger: 'input#login, a:contains(Sign in)'
}, {
    content: "input login",
    trigger: 'input#login',
    run: 'text demo',
}, {
    content: 'input password',
    trigger: 'input#password',
    run: 'text demo',
}, {
    content: "click da button",
    trigger: 'button:contains("Log in")',
},
// normally we'd end the tour here as it's all we care about but there are a
// bunch of ongoing queries from the loading of the web client which cause
// issues, so go and open the preferences / profile screen to make sure
// everything settles down
...openUserProfileAtSecurityTab(),
// close the dialog if that makes sense
...closeProfileDialog({})
]});

const columns = {};
registry.category("web_tour.tours").add('totp_admin_disables', {
    test: true,
    url: '/web',
    steps: [stepUtils.showAppsMenuItem(), {
    content: 'Go to settings',
    trigger: '[data-menu-xmlid="base.menu_administration"]'
}, {
    content: 'Wait for page',
    trigger: '.o_menu_brand:contains("Settings")',
    run() {}
}, {
    content: "Open Users menu",
    trigger: '[data-menu-xmlid="base.menu_users"]'
}, {
    content: "Open Users view",
    trigger: '[data-menu-xmlid="base.menu_action_res_users"]',
    run(helpers) {
        // funny story: the users view we're trying to reach, sometimes we're
        // already there, but if we re-click the next step executes before the
        // action has the time to re-load, the one after that doesn't, and our
        // selection get discarded by the action reloading, so here try to
        // see if we're already on the users action through the breadcrumb and
        // just close the menu if so
        const $crumb = $('.breadcrumb');
        if ($crumb.text().indexOf('Users') === -1) {
            // on general settings page, click menu
            helpers.click();
        } else {
            // else close menu
            helpers.click($('[data-menu-xmlid="base.menu_users"]'));
        }
    }
}, {
    content: "Find Demo User",
    trigger: 'td.o_data_cell:contains("demo")',
    run(helpers) {
        const $titles = this.$anchor.closest('table').find('tr:first th');
        for (let i=0; i<$titles.length; ++i) {
            columns[$titles[i].getAttribute('data-name')] = i;
        }
        const $row = this.$anchor.closest('tr');
        const sel = $row.find('.o_list_record_selector input[type=checkbox]');
        helpers.click(sel);
    }
}, {
    content: "Open Actions menu",
    trigger: 'button.dropdown-toggle:contains("Action")'
}, {
    content: "Select totp remover",
    trigger: 'span.dropdown-item:contains(Disable two-factor authentication)'
}, { // enhanced security yo
    content: "Check that we have to enter enhanced security mode & input password",
    extra_trigger: 'div:contains("enter your password")',
    trigger: '[name=password] input',
    run: 'text admin',
}, {
    content: "Confirm",
    trigger: "button:contains(Confirm Password)",
}, {
    content: "open the user's form",
    trigger: "td.o_data_cell:contains(demo)",
}, {
    content: "go to Account security Tab",
    trigger: "a.nav-link:contains(Account Security)",
}, ...closeProfileDialog({
    content: "check that demo user has been de-totp'd",
    totp_state: false,
}),
]})
});
;

/********************************************************
*  Filepath: /auth_totp_mail/static/tests/totp_flow.js  *
*  Lines: 76                                            *
********************************************************/
odoo.define('auth_totp_mail.tours', function(require) {
"use strict";

const { registry } = require("@web/core/registry");
const { stepUtils } = require('@web_tour/js/tour_step_utils');

function openAccountSettingsTab() {
    return [{
        content: 'Go to settings',
        trigger: '[data-menu-xmlid="base.menu_administration"]'
    }, {
        content: 'Wait for page',
        trigger: '.o_menu_brand:contains("Settings")',
        run: () => {}
    }, {
        content: "Open Users menu",
        trigger: '[data-menu-xmlid="base.menu_users"]'
    }, {
        content: "Open Users view",
        trigger: '[data-menu-xmlid="base.menu_action_res_users"]',
        run: function (helpers) {
            // funny story: the users view we're trying to reach, sometimes we're
            // already there, but if we re-click the next step executes before the
            // action has the time to re-load, the one after that doesn't, and our
            // selection get discarded by the action reloading, so here try to
            // see if we're already on the users action through the breadcrumb and
            // just close the menu if so
            const $crumb = $('.breadcrumb');
            if ($crumb.text().indexOf('Users') === -1) {
                // on general settings page, click menu
                helpers.click();
            } else {
                // else close menu
                helpers.click($('[data-menu-xmlid="base.menu_users"]'));
            }
        }
    }];
}

registry.category("web_tour.tours").add('totp_admin_self_invite', {
    test: true,
    url: '/web',
    steps: [stepUtils.showAppsMenuItem(), ...openAccountSettingsTab(), {
    content: "open the user's form",
    trigger: "td.o_data_cell:contains(admin)",
}, {
    content: "go to Account security Tab",
    trigger: "a.nav-link:contains(Account Security)",
}, {
    content: "check that user cannot invite themselves to use 2FA.",
    trigger: "body",
    run: function () {
        const inviteBtn = $('button:contains(Invite to use 2FA)')[0];
        if (!inviteBtn) {
            $('body').addClass('CannotInviteYourself');
        }
    }
}, {
    content: "check that user cannot invite themself.",
    trigger: "body.CannotInviteYourself"
}]});

registry.category("web_tour.tours").add('totp_admin_invite', {
    test: true,
    url: '/web',
    steps: [stepUtils.showAppsMenuItem(), ...openAccountSettingsTab(), {
    content: "open the user's form",
    trigger: "td.o_data_cell:contains(demo)",
}, {
    content: "go to Account security Tab",
    trigger: "a.nav-link:contains(Account Security)",
}, {
    content: "check that demo user can be invited to use 2FA.",
    trigger: "button:contains(Invite to use 2FA)",
}]});

});;

/************************************************************
*  Filepath: /auth_totp_portal/static/tests/totp_portal.js  *
*  Lines: 124                                               *
************************************************************/
odoo.define('auth_totp_portal.tours', function(require) {
"use strict";

const ajax = require('web.ajax');
const { registry } = require("@web/core/registry");

registry.category("web_tour.tours").add('totportal_tour_setup', {
    test: true,
    url: '/my/security',
    steps: [{
    content: "Open totp wizard",
    trigger: 'button#auth_totp_portal_enable',
}, {
    content: "Check that we have to enter enhanced security mode",
    trigger: 'div:contains("enter your password")',
    run: () => {},
}, {
    content: "Input password",
    trigger: '[name=password]',
    run: 'text portal', // FIXME: better way to do this?
}, {
    content: "Confirm",
    trigger: "button:contains(Confirm Password)",
}, {
    content: "Check the wizard has opened",
    trigger: 'li:contains("scan the barcode below")',
    run: () => {}
}, {
    content: "Get secret from collapsed div",
    trigger: 'a:contains("Cannot scan it?")',
    run: async function(helpers) {
        const secret = this.$anchor.closest('div').find('span[name="secret"]').text();
        const token = await ajax.jsonRpc('/totphook', 'call', {
            secret
        });
        helpers._text(helpers._get_action_values('input[name=code]'), token);
        helpers._click(helpers._get_action_values('button.btn-primary:contains(Activate)'));
    }
}, {
    content: "Check that the button has changed",
    trigger: 'button:contains(Disable two-factor authentication)',
    run: () => {}
}]});

registry.category("web_tour.tours").add('totportal_login_enabled', {
    test: true,
    url: '/',
    steps: [{
    content: "check that we're on the login page or go to it",
    trigger: 'input#login, a:contains(Sign in)'
}, {
    content: "input login",
    trigger: 'input#login',
    run: 'text portal',
}, {
    content: 'input password',
    trigger: 'input#password',
    run: 'text portal',
}, {
    content: "click da button",
    trigger: 'button:contains("Log in")',
}, {
    content: "expect totp screen",
    trigger: 'label:contains(Authentication Code)',
}, {
    content: "input code",
    trigger: 'input[name=totp_token]',
    run: async function (helpers) {
        const token = await ajax.jsonRpc('/totphook', 'call', {});
        helpers._text(helpers._get_action_values(), token);
        // FIXME: is there a way to put the button as its own step trigger without
        //        the tour straight blowing through and not waiting for this?
        helpers._click(helpers._get_action_values('button:contains("Log in")'));
    }
}, {
    content: "check we're logged in",
    trigger: "h3:contains(Documents)",
    run: () => {}
}, {
    content: "go back to security",
    trigger: "a:contains(Security)",
},{
    content: "Open totp wizard",
    trigger: 'button#auth_totp_portal_disable',
}, {
    content: "Check that we have to enter enhanced security mode",
    trigger: 'div:contains("enter your password")',
    run: () => {},
}, {
    content: "Input password",
    trigger: '[name=password]',
    run: 'text portal', // FIXME: better way to do this?
}, {
    content: "Confirm",
    trigger: "button:contains(Confirm Password)",
}, {
    content: "Check that the button has changed",
    trigger: 'button:contains(Enable two-factor authentication)',
    run: () => {}
}]});

registry.category("web_tour.tours").add('totportal_login_disabled', {
    test: true,
    url: '/',
    steps: [{
    content: "check that we're on the login page or go to it",
    trigger: 'input#login, a:contains(Sign in)'
}, {
    content: "input login",
    trigger: 'input#login',
    run: 'text portal',
}, {
    content: 'input password',
    trigger: 'input#password',
    run: 'text portal',
}, {
    content: "click da button",
    trigger: 'button:contains("Log in")',
}, {
    content: "check we're logged in",
    trigger: "h3:contains(Documents)",
    run: () => {}
}]});
});
;

/****************************************************************
*  Filepath: /documents_spreadsheet/static/tests/utils/tour.js  *
*  Lines: 68                                                    *
****************************************************************/
odoo.define('@documents_spreadsheet/../tests/utils/tour', ['@web/core/registry'], async function (require) {
'use strict';
let __exports = {};
/** @odoo-module */

const { registry } = require("@web/core/registry");

/**
 * @param {string} tourName
 * @param {string} templateName
 */
__exports.registerTemplateTour = registerTemplateTour; function registerTemplateTour(tourName, templateName) {
    registry.category("web_tour.tours").add(
        tourName,
        {
            test: true,
            url: "/web",
            steps: [
            {
                trigger: '.o_app[data-menu-xmlid="documents.menu_root"]',
                content: "Open document app",
                run: "click",
            },
            {
                trigger: 'button[data-menu-xmlid="documents.Config"]',
                content: "Open Configuration menu",
                run: "click",
            },
            {
                trigger:
                    '.dropdown-item[data-menu-xmlid="documents_spreadsheet.menu_technical_spreadsheet_template"]',
                content: "Open Configuration menu",
                run: "click",
            },
            {
                trigger: ".o_searchview .o_facet_remove",
                content: 'Remove "My templates" filter',
                run: "click",
            },
            {
                trigger: "input.o_searchview_input",
                content: "Search the template",
                run: `text ${templateName}`,
            },
            {
                trigger: ".o_menu_item.focus",
                content: "Validate search",
                run: "click",
            },
            {
                trigger: `tr.o_data_row:first-child td[data-tooltip="${templateName}"]`,
                content: "Wait search to complete",
            },
            {
                trigger: "button.o-new-spreadsheet",
                content: "Create spreadsheet from template",
                run: "click",
            },
            {
                trigger: ".o-spreadsheet",
                content: "Redirected to spreadsheet",
            },
        ]
    });
}

return __exports;
});
;

/***********************************************************************************
*  Filepath: /documents_spreadsheet/static/tests/tours/create_empty_sheet_tour.js  *
*  Lines: 96                                                                       *
***********************************************************************************/
odoo.define("documents_spreadsheet.create_empty_sheet_tour", function (require) {
    "use strict";

    require("web.dom_ready");
    const { registry } = require("@web/core/registry");
    const { stepUtils } = require("@web_tour/js/tour_step_utils");

    registry.category("web_tour.tours").add("spreadsheet_create_empty_sheet", {
        test: true,
        steps: [
            stepUtils.showAppsMenuItem(),
            {
                trigger: '.o_app[data-menu-xmlid="documents.menu_root"]',
                content: "Open document app",
                run: "click",
            },
            {
                trigger: ".o_documents_kanban_spreadsheet",
                content: "Open template dialog",
                run: "click",
            },
            {
                trigger: ".o-spreadsheet-create",
                content: "Create new spreadsheet",
                run: "click",
            },
            {
                trigger: 'div[title="Fill Color"]',
                content: "Choose a color",
                run: "click",
            },
            {
                trigger: '.o-color-picker-line-item[data-color="#990000"]',
                content: "Choose a color",
                run: "click",
            },
            {
                trigger: ".o_menu_brand",
                content: "Go back to the menu",
                run: "click",
            },
            {
                trigger: ".o_document_spreadsheet:first",
                content: "Reopen the sheet",
                run: "click",
            },
        ],
    });
    registry.category("web_tour.tours").add("spreadsheet_create_list_view", {
        test: true,
        steps: [
            stepUtils.showAppsMenuItem(),
            {
                trigger: '.o_app[data-menu-xmlid="documents.menu_root"]',
                content: "Open document app",
                run: "click",
            },
            {
                trigger: "button.o_switch_view.o_list",
                content: "Switch to list view",
                run: "click",
            },
            {
                trigger: ".o_favorite_menu button",
                extra_trigger: ".o_list_view",
                content: "Open the favorites menu",
                run: "click",
            },
            {
                trigger: ".o_insert_list_spreadsheet_menu",
                content: "Insert in spreadsheet",
                run: "click",
            },
            {
                trigger: ".modal-footer .btn-primary",
                content: "Confirm",
                run: "click",
            },
            {
                trigger: ".o-topbar-topleft .o-topbar-menu[data-id='data']",
                content: "Open Data menu",
                run: "click",
            },
            {
                trigger: ".o-menu-item[data-name='item_list_1']",
                content: "Open List Side Panel",
                run: "click",
            },
            {
                trigger: ".o_pivot_cancel",
                content: "Go back to the list of lists",
                run: "click",
            },
        ],
    });
});
;

/********************************************************************************
*  Filepath: /documents_spreadsheet/static/tests/tours/create_template_tour.js  *
*  Lines: 92                                                                    *
********************************************************************************/
odoo.define('@documents_spreadsheet/../tests/tours/create_template_tour', ['@web/core/registry', '@web_tour/js/tour_step_utils'], async function (require) {
'use strict';
let __exports = {};
/** @odoo-module */

const { registry } = require("@web/core/registry");
const { stepUtils } = require("@web_tour/js/tour_step_utils");

const SHEET_NAME = "Partner Spreadsheet Test";
const TEMPLATE_NAME = `${SHEET_NAME} - Template`;

registry.category("web_tour.tours").add(
    "documents_spreadsheet_create_template_tour",
    {
        test: true,
        url: "/web",
        steps: [
        ...stepUtils.goToAppSteps("documents.menu_root", "Open Document app"),
        {
            trigger: `div[title="${SHEET_NAME}"]`,
            content: "Select Test Sheet",
            run: "click",
        },
        {
            trigger: `button.o_switch_view.o_list`,
            content: "Switch to list view",
            run: "click",
        },
        {
            trigger: `img[title="${SHEET_NAME}"]`,
            content: "Open the sheet",
            run: "click",
        },
        {
            trigger: `.o-topbar-menu[data-id="file"]`,
            content: "Open the file menu",
            run: "click",
        },
        {
            trigger: `.o-menu-item[data-name="save_as_template"]`,
            content: "Save as template",
            run: "click",
        },
        {
            trigger: `button[name="save_template"]`,
            content: "Save as template",
            run: "click",
        },
        {
            trigger: 'button[data-menu-xmlid="documents.Config"]',
            content: "Open Configuration menu",
            run: "click",
        },
        {
            trigger:
                '.dropdown-item[data-menu-xmlid="documents_spreadsheet.menu_technical_spreadsheet_template"]',
            content: "Open Templates menu",
            run: "click",
        },
        {
            trigger: ".o_searchview .o_facet_remove",
            content: 'Remove "My templates" filter',
            run: "click",
        },
        {
            trigger: "input.o_searchview_input",
            content: "Search the template",
            run: `text ${TEMPLATE_NAME}`,
        },
        {
            trigger: ".o_menu_item.focus",
            content: "Validate search",
            run: "click",
        },
        {
            trigger: `tr.o_data_row:first-child td[data-tooltip="${TEMPLATE_NAME}"]`,
            content: "Wait search to complete",
        },
        {
            trigger: "button.o-new-spreadsheet",
            content: "Create spreadsheet from template",
            run: "click",
        },
        {
            trigger: ".o-spreadsheet",
            content: "Redirected to spreadsheet",
        },
    ]
});

return __exports;
});
;

/*********************************************************************************
*  Filepath: /documents_spreadsheet/static/tests/tours/open_pivot_sheet_tour.js  *
*  Lines: 108                                                                    *
*********************************************************************************/
odoo.define("documents_spreadsheet.open_pivot_sheet_tour", function (require) {
    "use strict";

    require("web.dom_ready");
    const { registry } = require("@web/core/registry");

    function assert(current, expected, info) {
        if (current !== expected) {
            fail(info + ': "' + current + '" instead of "' + expected + '".');
        }
    }

    function fail(errorMessage) {
        const tour = registry.get("tourManager");
        tour._consume_tour(tour.running_tour, errorMessage);
    }

    const SHEETNAME = "Partner Spreadsheet Test";
    registry.category("web_tour.tours").add(
        "spreadsheet_open_pivot_sheet",
        {
            test: true,
            steps: [
            {
                trigger: '.o_app[data-menu-xmlid="documents.menu_root"]',
                content: "Open document app",
                run: "click",
            },
            {
                trigger: `div[title="${SHEETNAME}"]`,
                content: "Select Test Sheet",
                run: "click",
            },
            {
                trigger: `button.o_switch_view.o_list`,
                content: "Switch to list view",
                run: "click",
            },
            {
                trigger: `img[title="${SHEETNAME}"]`,
                content: "Open the sheet",
                run: "click",
            },
            {
                trigger: "div.o_topbar_filter_icon",
                content: "Open Filters",
                run: "click",
            },
            {
                trigger: "div.pivot_filter",
                content: "",
                run: function (actions) {
                    const pivots = document.querySelectorAll("div.pivot_filter");
                    assert(pivots.length, 1, "There should be one filter");
                    const pivot = pivots[0];
                    assert(
                        pivot.querySelector("div.o_side_panel_title").textContent,
                        "MyFilter1",
                        "Invalid filter name"
                    );
                    assert(
                        Boolean(
                            pivot.querySelector(
                                'div.o_field_many2many_tags span.badge[title="Azure Interior"]'
                            )
                        ),
                        true,
                        "Wrong default filter value"
                    );
                    actions.click(pivot.querySelector(".o_side_panel_filter_icon.fa-cog"));
                },
            },
            {
                trigger: ".o_spreadsheet_filter_editor_side_panel",
                content: "Check filter values",
                run: function () {
                    const defaultFilterValue = document.querySelectorAll(
                        'div.o_field_many2many_tags span.badge[title="Azure Interior"]'
                    );
                    assert(
                        defaultFilterValue.length,
                        1,
                        "There should be a default value in the filter..."
                    );
                    assert(
                        document.querySelector(".o_side_panel_related_model input").value,
                        "Contact",
                        "Wrong model selected"
                    );

                    const fieldsValue = document.querySelector(
                        "div.o_field_selector_value span.o_field_selector_chain_part"
                    );
                    assert(fieldsValue.textContent.trim(), "Related Company");
                },
            },
            {
                trigger: ".o_menu_brand",
                content: "Go back to the menu",
                run: "click",
            },
            {
                trigger: ".o_document_spreadsheet:first",
                content: "Sheet is visible in Documents",
            },
        ]
    });
});
;

/*********************************************************************************************
*  Filepath: /documents_spreadsheet_account/static/tests/tours/spreadsheet_account_tours.js  *
*  Lines: 11                                                                                 *
*********************************************************************************************/
odoo.define('@documents_spreadsheet_account/../tests/tours/spreadsheet_account_tours', ['@documents_spreadsheet/../tests/utils/tour'], async function (require) {
'use strict';
let __exports = {};
/** @odoo-module */

const { registerTemplateTour } = require("@documents_spreadsheet/../tests/utils/tour");

registerTemplateTour("spreadsheet_template_features", "Template with special characters");

return __exports;
});
;

/*********************************************************************************
*  Filepath: /documents_spreadsheet_crm/static/tests/tours/insert_pivot_tour.js  *
*  Lines: 42                                                                     *
*********************************************************************************/
odoo.define('@documents_spreadsheet_crm/../tests/tours/insert_pivot_tour', ['web.dom_ready', '@web/core/registry'], async function (require) {
'use strict';
let __exports = {};
/** @odoo-module */
require("web.dom_ready");
const { registry } = require("@web/core/registry");

registry.category("web_tour.tours").add(
    "insert_crm_pivot_in_spreadsheet",
    {
        test: true,
        url: "/web",
        steps: [
        {
            trigger: '.o_app[data-menu-xmlid="crm.crm_menu_root"]',
            content: "Open CRM app",
            run: "click",
        },
        {
            trigger: 'button[data-tooltip="Pivot"]',
            content: "Open Pivot view",
            run: "click",
        },
        {
            trigger: ".o_pivot_add_spreadsheet",
            content: "Insert pivot in the spreadsheet",
            run: "click",
        },
        {
            trigger: ".modal-footer .btn-primary",
            content: "Insert in a new spreadsheet",
            run: "click",
        },
        {
            trigger: ".o-spreadsheet",
            content: "Redirected to spreadsheet",
        },
    ]
});

return __exports;
});
;

/*****************************************************************************
*  Filepath: /project_enterprise/static/tests/tours/task_gantt_tour_test.js  *
*  Lines: 117                                                                *
*****************************************************************************/
odoo.define('@project_enterprise/../tests/tours/task_gantt_tour_test', ['@web/core/registry', '@web_tour/js/tour_step_utils'], async function (require) {
'use strict';
let __exports = {};
/** @odoo-module **/

const { registry } = require("@web/core/registry");
const { stepUtils } = require("@web_tour/js/tour_step_utils");

function openProjectUpdateAndReturnToTasks(view, viewClass) {
    return [{
            trigger: '.o_project_updates_breadcrumb',
            content: 'Open Project Update from view : ' + view,
            extra_trigger: "." + viewClass,
        }, {
            trigger: ".o-kanban-button-new",
            content: "Create a new update from project task view : " + view,
            extra_trigger: '.o_project_update_kanban_view',
        }, {
            trigger: "button.o_form_button_cancel",
            content: "Discard project update from project task view : " + view,
        }, {
            trigger: ".o_switch_view.o_list",
            content: "Go to list of project update from view " + view,
        }, {
            trigger: '.o_back_button',
            content: 'Go back to the task view : ' + view,
            // extra_trigger: '.o_list_table', // FIXME: [XBO] uncomment it when sample data will be displayed after discarding creation of project update record.
        },
    ];
}

registry.category("web_tour.tours").add('project_enterprise_tour', {
    test: true,
    url: '/web',
    steps: [
    stepUtils.showAppsMenuItem(), {
        trigger: '.o_app[data-menu-xmlid="project.menu_main_pm"]',
    }, {
        trigger: '.o-kanban-button-new',
        extra_trigger: '.o_project_kanban',
        width: 200,
    }, {
        trigger: '.o_project_name input',
        run: 'text New Project'
    }, {
        trigger: '.o_open_tasks',
        run: function (actions) {
            actions.auto('.modal:visible .btn.btn-primary');
        },
    }, {
        trigger: ".o_kanban_project_tasks .o_column_quick_create .input-group",
        run: function (actions) {
            actions.text("New", this.$anchor.find("input"));
        },
    }, {
        trigger: ".o_kanban_project_tasks .o_column_quick_create .o_kanban_add",
        auto: true,
    }, {
        trigger: ".o_kanban_project_tasks .o_column_quick_create .input-group",
        extra_trigger: '.o_kanban_group',
        run: function (actions) {
            actions.text("Done", this.$anchor.find("input"));
        },
    }, {
        trigger: ".o_kanban_project_tasks .o_column_quick_create .o_kanban_add",
        auto: true,
    }, {
        trigger: '.o-kanban-button-new',
        extra_trigger: '.o_kanban_group:eq(0)'
    }, {
        trigger: '.o_kanban_quick_create div.o_field_char[name=display_name] input',
        extra_trigger: '.o_kanban_project_tasks',
        run: 'text New task'
    }, {
        trigger: '.o_kanban_quick_create .o_kanban_add',
        extra_trigger: '.o_kanban_project_tasks'
    }, {
        trigger: '.o_switch_view.o_gantt',
        content: 'Open Gantt View',
    }, {
        trigger: '.o_gantt_button_add',
        content: 'Add a task in gantt',
    }, {
        trigger: '.o_field_char[name="name"] input',
        content: 'Set task name',
        run: 'text New task',
    }, {
        trigger: 'button[name="action_assign_to_me"]',
        content: 'Assign the task to you',
    }, {
        trigger: 'button span:contains("Save")',
        extra_trigger: '.o_field_many2many_tags_avatar .rounded-pill',
        content: 'Save task',
    }, {
        trigger: ".o_gantt_progress_bar",
        content: "See user progress bar",
        run: function () {
            const $progressbar = $(".o_gantt_progress_bar:eq(0)");
            if ($progressbar.length) {
                if ($progressbar.find("span:eq(0)")[0].style.width === '') {
                    console.error("Progress bar should be displayed");
                }
                if (!$progressbar[0].classList.contains("o_gantt_group_danger")) {
                    console.error("Progress bar should be displayed in danger");
                }
            } else {
                console.error("Not able to select progressbar");
            }
        }
    }, ...openProjectUpdateAndReturnToTasks("Gantt", "o_gantt_view"), {
        trigger: '.o_switch_view.o_map',
        content: 'Open Map View',
    }, ...openProjectUpdateAndReturnToTasks("Map", "o_map_view"),
]});

return __exports;
});
;

/****************************************************************************
*  Filepath: /project_forecast/static/tests/tours/project_planning_tour.js  *
*  Lines: 49                                                                *
****************************************************************************/
odoo.define('@project_forecast/../tests/tours/project_planning_tour', ['@web/core/registry'], async function (require) {
'use strict';
let __exports = {};
/** @odoo-module **/

const { registry } = require("@web/core/registry");

const planningTestTour = registry.category("web_tour.tours").get("planning_test_tour")
const projectPlanningStartStepIndex = planningTestTour.steps.findIndex((step) => step.id && step.id === 'project_planning_start');

planningTestTour.steps.splice(projectPlanningStartStepIndex + 1, 0, {
    trigger: ".o_field_many2one[name='project_id'] input",
    content: "Create project named-'New Project' for this shift",
    run: "text New Project",
}, {
    trigger: "ul.ui-autocomplete a:contains(New Project)",
    auto: true,
    in_modal: false,
});

const projectPlanningEndStepIndex = planningTestTour.steps.findIndex((step) => step.id && step.id === 'planning_check_format_step');

planningTestTour.steps.splice(projectPlanningEndStepIndex + 1, 0, {
    trigger: ".o_gantt_button_add",
    content: "Click Add record to verify the naming format of planning template",
},
{
    trigger: "span.o_selection_badge:contains('[New Project]')",
    content: "Check the naming format of planning template",
    run() {}
},
{
    content: "exit the shift modal",
    trigger: "button[special=cancel]",
    in_modal: true,
    auto: true,
},
{
    content: 'wait for the modal to be removed',
    // the dialog container has an empty div child, and the actual modal gets
    // added afterwards, so we can check by asserting the nature of the last
    // child
    trigger: ".o_dialog_container > :last-child:not([role=dialog])",
    auto: true,
    run() {},
});

return __exports;
});
;

/**************************************************************************
*  Filepath: /saas_trial/static/tests/tours/tour_plan_change_warnings.js  *
*  Lines: 358                                                             *
**************************************************************************/
odoo.define('odoo.test.trial.tours.plan.change.warnings', ['web_tour.tour'], function (require) {
"use strict";

var tour = require("web_tour.tour");

function checkPricingChangeWarningShown(options) {
    let modalTitle = (options || {}).modal_title || "You are about to modify your pricing plan";
    return {
        content: "Check that a warning about plan change is shown",
        trigger: ".modal-header:contains(" + modalTitle + ")",
        extra_trigger: ".modal-header:contains(" + modalTitle + ")",
        run: function() {}, // this is a check
        isCheck: true,
        variant: (options || {}).variant,
        warning_step: true,
    };
}

function confirmPricingChange(options) {
    let btnText = (options || {}).button || "Confirm";
    return {
        content: "Click on Confirm",
        trigger: ".modal-footer .btn-primary:contains(" + btnText + ")",
        variant: (options || {}).variant,
        warning_step: true,
    };
}

/* ----------------------------------------------------------------------
 * Test Studio promote dialog warning
 */

var tourPromoteStudioInstallWarnSteps = [
    {
        content: "Open 'Apps' app",
        trigger: '.o_app[data-menu-xmlid="base.menu_management"]',
    },
    {
        content: "Switch to List view",
        trigger: '.o_switch_view.o_list',
    },
    {
        content: "Open optional fields dropdown",
        trigger: '.o_list_view .o_optional_columns_dropdown_toggle, ' +
                 '.o_list_view .o_optional_columns_dropdown .dropdown-toggle',
    },
    {
        content: "Click on 'Add Custom field'",
        trigger: '.o_list_view .o_optional_columns_dropdown.dropdown-menu .dropdown-item-studio, ' +
                 '.o_list_view .o_optional_columns_dropdown .dropdown-menu .dropdown-item-studio',
    },
    {
        content: "Click on 'Install Odoo Studio'",
        trigger: "button.o_install_studio",
    },
    checkPricingChangeWarningShown(),
    confirmPricingChange(),
    {
        content: "Check that page reloads and we're still on the list view",
        trigger: ".o_list_view",
    }
];

tour.register('trial_user_install_studio_warning', {test: true},
    tourPromoteStudioInstallWarnSteps,
);
tour.register('trial_user_install_studio_no_warning', {test: true},
    tourPromoteStudioInstallWarnSteps.filter(step => !step.warning_step),
);

/* ----------------------------------------------------------------------
 * Test User invitation warning from Settings dashboard
 */

var tourInviteUserFromSettingDashboardSteps = [
    {
        content: "Open 'Settings' app",
        trigger: '.o_app[data-menu-xmlid="base.menu_administration"]',
    },
    {
        content: "Fill new users to invite",
        trigger: "input.o_user_emails",
        run: "text user1@example.net,user2@example.net"
    },
    {
        content: "Click on 'Invite'",
        trigger: ".o_web_settings_dashboard_invite, .o_web_settings_invite",
    },
    checkPricingChangeWarningShown({modal_title: "Users Invitation"}),
    confirmPricingChange({button: "Invite User(s)"}),
    {
        content: "Check that page reloads and we're still on settings dahsboard",
        trigger: ".o_web_settings_dashboard, .oe_form_configuration",
        run: function() {}, // this is a check
        isCheck: true,
    }
];

tour.register('trial_user_invite_from_setting_dashboard_warning', {test: true},
    tourInviteUserFromSettingDashboardSteps,
);
tour.register('trial_user_invite_from_setting_dashboard_no_warning', {test: true},
    tourInviteUserFromSettingDashboardSteps.filter(step => !step.warning_step),
);


/* ----------------------------------------------------------------------
 * Test Module installation warning from General Settings
 */

var tourSettingsInstallModuleSteps = [
    {
        content: "Open 'Settings' app",
        trigger: '.o_app[data-menu-xmlid="base.menu_administration"]',
    },
    {
        content: "Open 'General Settings' menu",
        trigger: ".o_web_settings_dashboard, " +
                 ".oe_form_configuration.o_base_settings, " +
                 ".oe_form_configuration.o_base_settings_view",
        run: function (actions) {
            if ($('.o_web_settings_dashboard').length) {
                // in v12.0 the "Settings" app open by default the custom dashboard
                // which is not yet merged with the "General Settings", so we need
                // to open that menu
                actions.click('a[data-menu-xmlid="base_setup.menu_config"]');
            }
        }
    },
    {
        content: "Wait for 'General Settings' to be displayed",
        trigger: ".oe_form_configuration.o_base_settings, " +
                 ".oe_form_configuration.o_base_settings_view",
        run: function() {}, // this is a check
        isCheck: true,
    },
    {
        content: "Enable OAuth module",
        trigger: 'label[for*="module_auth_oauth"], #module_auth_oauth label.o_form_label',
    },
    // < 16.0: warning should be displayed right after clicking on the settings
    checkPricingChangeWarningShown({variant: 'onChange'}),
    confirmPricingChange({variant: 'onChange', button: 'I get it'}),
    {
        content: "Click on 'Save'",
        trigger: ".o_form_button_save, button.btn-primary[type=button][name=execute]",
    },
    // >= 16.0: warning should be displayed only when saving the settings
    checkPricingChangeWarningShown({variant: 'onSave'}),
    confirmPricingChange({variant: 'onSave'}),
    {
        content: "Wait for the save to complete",
        trigger: ".o_form_button_save:not(:disabled), button.btn-primary[type=button][name=execute]:not(:disabled)",
        run: function() {}, // this is a check
        isCheck: true,
    },
];

tour.register('trial_settings_install_module_on_change_warning', {test: true},
    tourSettingsInstallModuleSteps.filter(step => (step.variant || 'onChange') == 'onChange'),
);
tour.register('trial_settings_install_module_on_change_no_warning', {test: true},
    tourSettingsInstallModuleSteps.filter(step => (step.variant || 'onChange') == 'onChange' && !step.warning_step),
);
tour.register('trial_settings_install_module_on_save_warning', {test: true},
    tourSettingsInstallModuleSteps.filter(step => (step.variant || 'onSave') == 'onSave'),
);
tour.register('trial_settings_install_module_on_save_no_warning', {test: true},
    tourSettingsInstallModuleSteps.filter(step => (step.variant || 'onSave') == 'onSave' && !step.warning_step),
);

/* ----------------------------------------------------------------------
 * Test Module installation warning from Apps
 */

var tourAppsModuleInstallSteps = [
    {
        content: "Open 'Apps' app",
        trigger: '.o_app[data-menu-xmlid="base.menu_management"]',
    },
    // For kanban
    {
        content: "Click on 'Install' button",
        trigger: '.o_kanban_record .button_immediate_install',
        variant: 'view_kanban',
    },
    // For form
    {
        content: "Open app record dropdown",
        trigger: '.o_kanban_record:has(.button_immediate_install):first .dropdown-toggle',
        variant: 'view_form',
    },
    {
        content: "Open app 'Module info'",
        trigger: ".o_kanban_record:has(.button_immediate_install):first .oe_kanban_action_a",
        variant: 'view_form',
    },
    {
        content: "Click on 'Install' button",
        trigger: '.o_form_view .button_immediate_install',
        variant: 'view_form',
    },
    checkPricingChangeWarningShown(),
    confirmPricingChange(),
    {
        content: "Wait for completion",
        // saas_trial custom. will force button text to "Installed" after
        // button_immediate_install() returns, wait for it
        trigger: "body:not(.o_ui_blocked) .button_immediate_install:contains(Installed)",
        run: function() {}, // this is a check
        isCheck: true,
    }
];

tour.register('trial_apps_install_module_kanban_warning', {test: true},
    tourAppsModuleInstallSteps.filter(step => (step.variant || 'view_kanban') == 'view_kanban'),
);
tour.register('trial_apps_install_module_kanban_no_warning', {test: true},
    tourAppsModuleInstallSteps.filter(step => (step.variant || 'view_kanban') == 'view_kanban' && !step.warning_step),
);
tour.register('trial_apps_install_module_form_warning', {test: true},
    tourAppsModuleInstallSteps.filter(step => (step.variant || 'view_form') == 'view_form'),
);
tour.register('trial_apps_install_module_form_no_warning', {test: true},
    tourAppsModuleInstallSteps.filter(step => (step.variant || 'view_form') == 'view_form' && !step.warning_step),
);

/* ----------------------------------------------------------------------
 * Test Company creation warning
 */

var tourCompanyCreationSteps = [
    {
        content: "Open 'Settings' app",
        trigger: '.o_app[data-menu-xmlid="base.menu_administration"]',
    },
    {
        content: "Click on 'Users & Companies' menu",
        trigger: '.dropdown-toggle[data-menu-xmlid="base.menu_users"]',
    },
    {
        content: "Click on 'Companies' menu",
        trigger: '.dropdown-item[data-menu-xmlid="base.menu_action_res_company_form"]',
    },
    {
        content: "Click on 'Create' button",
        trigger: '.o_list_button_add',
    },
    {
        content: "Fill company name",
        trigger: 'div[name="name"] input',
        run: function (actions) {
            let companyName = "MyNewCompany-" + Date.now();
            if (actions.text_blur) {
                actions.text_blur(companyName);
            } else {  // version <= saas~13.1
                actions.text(companyName);
                this.$anchor.trigger('focusout');
                this.$anchor.trigger('blur');
            }
        }
    },
    {
        content: "Click on 'Save' button",
        trigger: '.o_form_button_save',
        run: function (actions) {
            if (!window.localStorage.getItem("running_tour")) {
                // >= saas~16.3: ensure "running_tour" is set in local storage
                // to avoid the page being reloaded once the company is created
                window.localStorage.setItem("running_tour", "_dummy_to_skip_page_reload_");
            }
            actions.click();
        }
    },
    checkPricingChangeWarningShown(),
    confirmPricingChange(),
    {
        content: "Wait for record save to complete",
        trigger: '.o_form_saved, .o_form_button_edit',
        run: function() {}, // this is a check
        isCheck: true,
    }
];

tour.register('trial_company_creation_warning', {test: true},
    tourCompanyCreationSteps,
);
tour.register('trial_company_creation_no_warning', {test: true},
    tourCompanyCreationSteps.filter(step => !step.warning_step),
);

/* ----------------------------------------------------------------------
 * Test Module installation warning from Helpdesk Team
 */

var tourHelpdeskTeamModuleOptionSteps = [
    {
        content: "Open 'Helpdesk' app",
        trigger: '.o_app[data-menu-xmlid="helpdesk.menu_helpdesk_root"]',
    },
    {
        content: "Open 'Configuration' menu",
        trigger: '.dropdown-toggle[data-menu-xmlid="helpdesk.helpdesk_menu_config"]',
    },
    {
        content: "Open 'Helpdesk Team' menu",
        trigger: '.dropdown-item[data-menu-xmlid="helpdesk.helpdesk_team_menu"]',
    },
    {
        content: "Click on 'Create' button",
        trigger: '.o_list_button_add',
    },
    {
        content: "Fill Helpdesk Team's name",
        trigger: 'div[name=name] textarea, input#name, input[name=name]',
        run: function (actions) {
            // append epoch to ensure team name is unique
            // (required to avoid duplicated mail.alias error   )
            actions.text("warning_team" + "_" + Date.now());
        },
    },
    {
        content: "Enable 'eLearning' option (website_helpdesk_slides)",
        trigger: 'label[for=use_website_helpdesk_slides], div[name=use_website_helpdesk_slides] input',
        run: 'click',
    },
    // < 16.0: warning should be displayed right after clicking on the settings
    checkPricingChangeWarningShown({variant: 'onChange'}),
    confirmPricingChange({variant: 'onChange', button: 'I get it'}),
    {
        content: "Click on 'Save'",
        trigger: ".o_form_button_save",
    },
    // >= 16.0: warning should be displayed only when saving the settings
    checkPricingChangeWarningShown({variant: 'onSave'}),
    confirmPricingChange({variant: 'onSave'}),
    {
        content: "Wait for the save to complete",
        trigger: ".o_form_button_save:not(:disabled), .o_form_button_edit",
        run: function() {}, // this is a check
        isCheck: true,
    },
];

tour.register('trial_helpdesk_team_install_module_on_change_warning', {test: true},
    tourHelpdeskTeamModuleOptionSteps.filter(step => (step.variant || 'onChange') == 'onChange'),
);
tour.register('trial_helpdesk_team_install_module_on_change_no_warning', {test: true},
    tourHelpdeskTeamModuleOptionSteps.filter(step => (step.variant || 'onChange') == 'onChange' && !step.warning_step),
);
tour.register('trial_helpdesk_team_install_module_on_save_warning', {test: true},
    tourHelpdeskTeamModuleOptionSteps.filter(step => (step.variant || 'onSave') == 'onSave'),
);
tour.register('trial_helpdesk_team_install_module_on_save_no_warning', {test: true},
    tourHelpdeskTeamModuleOptionSteps.filter(step => (step.variant || 'onSave') == 'onSave' && !step.warning_step),
);

});
;

/************************************************************
*  Filepath: /saas_trial/static/tests/tours/tour_trials.js  *
*  Lines: 102                                               *
************************************************************/
odoo.define('odoo.test.trial.tours', ['web_tour.tour'], function (require) {
"use strict";

var tour = require("web_tour.tour");

tour.register('trial_resend_activation_email_backend', {url: '/web', test: true}, [
    {
        content: "Click on navbar Pending Activation button",
        trigger: ".o_main_navbar .oe_expiration_tag a",
    },
    {
        content: "Fill the modal",
        trigger: 'input[name=email]',
        run: 'text customer@example.net',
    },
    {
        content: "Click on modal resend button",
        trigger: 'input[type=submit], button:contains(Resend)',
    },
    {
        content: "Check that email was successfully sent.",
        trigger: '*:contains(An activation email has been successfully sent)',
        run: function () { }, // this is a check
    }
]);

tour.register('trial_rr_upgrade_available_user', {url: '/web', test: true}, [
    // Employee should see that an upgrade is available (in the statusbar) but should see any upgrade button
    {
        content: "Click on the upgrade navbar button",
        trigger: ".o_main_navbar .o_rr_widget a",
    },
    {
        content: "Check that there is no button",
        trigger: ".o_main_navbar .o_rr_widget .rr-widget-dropdown",
        run: function () {
            var $btns = this.$anchor.find('a.btn:visible, button:visible');
            if ($btns.length !== 0) {
                console.error('User should not see any upgrade button (' + $btns.length + ' found)');
            }
        }
    },
    {
        content: "Check that user should ask their admin for upgrade",
        trigger: ".o_main_navbar .o_rr_widget .rr_users_only:contains(Contact the administrator)",
        run: function () {} // this is a check
    },
]);


tour.register('trial_rr_upgrade_available_admin', {url: '/web', test: true}, [
    // Admin see that there is a new upgrade availabe, open upgrade and cancel it (not sure as he has not tested yet)
    {
        content: "Click on the upgrade navbar button",
        trigger: ".o_main_navbar .o_rr_widget a",
    },
    {
        content: "Click on Upgrade Now",
        trigger: 'button.o_prod_upgrade',
    },
    {
        content: "Hum, not sure yet, click on Cancel",
        trigger: '.o_prod_upgrade_cancel',
    },
    // Admin has now propertly tested the upgrade (don't they?) and start real production upgrade
    {
        content: "Click on the upgrade navbar button",
        trigger: ".o_main_navbar .o_rr_widget a",
    },
    {
        content: "Click on 'Upgrade Now'",
        trigger: 'button.o_prod_upgrade',
    },
    {
        content: "Click on 'Confirm Upgrade'",
        trigger: '.o_prod_upgrade_confirm',
    },
    {
        content: "Check that upgrade has been queued",
        trigger: '.modal-body:contains(Production upgrade requested successfully)',
    },
]);

tour.register('trial_rr_upgrade_dismiss', {url: '/web', test: true}, [
    // Admin see that there is a new upgrade available, open upgrade but dismiss it
    // (he want to stay on LTS version-for now)
    {
        content: "Click on the upgrade navbar button",
        trigger: ".o_main_navbar .o_rr_widget a",
    },
    {
        content: "Click on 'Upgrade Later'",
        trigger: "button.o_prod_dismiss",
    },
    {
        // dummy check only to ensure dismiss RPC are completed
        trigger: ".o_main_navbar",
        run: function () {},
    },
]);

});
;

/****************************************************************************
*  Filepath: /saas_website/static/tests/tours/tour_website_configurator.js  *
*  Lines: 90                                                                *
****************************************************************************/
odoo.define('@saas_website/../tests/tours/tour_website_configurator', ['web_tour.tour'], async function (require) {
'use strict';
let __exports = {};
/** @odoo-module **/

const tour = require('web_tour.tour');

const unselectAllFeatures = function() {
    return {
        content: "Unselect all features",
        trigger: ".page_feature_selection.o_configurator_show",
        run: function () {
            this.$anchor.find(".o_configurator_feature_status.fa-check-circle").click();
        }
    };
};

const selectionFeature = function(name) {
    return {
        content: "Selecting feature: " + name,
        trigger: ".card .card-title:contains(" + name + ")",
    };
};

tour.register('trial_website_configurator', {url: "/website/configurator", test: true}, [
    // Configurator first screen
    {
        content: "click next",
        trigger: 'button.o_configurator_show',
    },
    // Description screen
    {
        content: "select a website type",
        trigger: 'a.o_change_website_type',
    }, {
        content: "insert a website industry",
        trigger: '.o_configurator_industry input',
        run: 'text ab',
    }, {
        content: "select a website industry from the autocomplete",
        trigger: '.o_configurator_industry_wrapper ul li a:contains("abbey")',
    }, {
        content: "select an objective",
        trigger: '.o_configurator_purpose_dd a',
    }, {
        content: "choose from the objective list",
        trigger: 'a.o_change_website_purpose',
    },
    // Palette screen
    {
        content: "chose a palette card",
        trigger: '.palette_card',
    },
    // Features screen
    {
        content: "Check that we're on Free Plan by default",
        trigger: "p:contains(Free Plan)",
        run: function () {}, // this is check
    },
    // - check for app that force out of 1-app-free mode (to trial mode)
    unselectAllFeatures(),
    selectionFeature("Appointment"),
    {
        content: "Check that Appointment force to Standard Plan (trial mode)",
        trigger: "p:contains(Standard Plan (15 days trial))",
        run: function () {}, // this is a check
    },
    // - check for single free app
    unselectAllFeatures(),
    selectionFeature("Shop"),
    {
        content: "Check that selecting only Shop keep in 1-app-free mode",
        trigger: "p:contains(Free Plan)",
        run: function () {}, // this is a check
    },
    selectionFeature("Events"),
    {
        content: "Check that selecting both Shop and Events force to Standard Plan (trial mode)",
        trigger: "p:contains(Standard Plan (15 days trial))",
        run: function () {}, // this is a check
    },
    // Exit configurator
    {
        content: "Skip configurator",
        trigger: "button:contains(Skip and start from scratch)",
    },
]);

return __exports;
});
;

/**********************************************************************
*  Filepath: /sale_planning/static/tests/tours/sale_planning_tour.js  *
*  Lines: 38                                                          *
**********************************************************************/
odoo.define('@sale_planning/../tests/tours/sale_planning_tour', ['@web/core/registry'], async function (require) {
'use strict';
let __exports = {};
/** @odoo-module */

const { registry } = require("@web/core/registry");

const planningTestTour = registry.category("web_tour.tours").get("planning_test_tour");
const salePlanningStartStepIndex = planningTestTour.steps.findIndex((step) => step.id && step.id === 'planning_check_format_step');

planningTestTour.steps.splice(salePlanningStartStepIndex + 1, 0, {
        trigger: ".o_gantt_button_plan_so",
        content: "Click on Plan Orders button to assign sale order to employee",
        run: 'click',
    }, {
        trigger: ".o_gantt_cell.o_gantt_hoverable",
        content: "Click on magnify icon to see list of sale order",
        run: function () {
            this.$anchor[0].dispatchEvent(new MouseEvent("mousemove", { bubbles: true }));
        },
    },
    {
        trigger: ".o_gantt_cells .o_gantt_cell_plan",
        run: 'click',
    },
    {
        trigger: "tr.o_data_row td[data-tooltip='Developer']",
        content: "Select the slot and plan orders",
        run: 'click',
    }, {
        trigger: ".o_gantt_pill span:contains(Developer)",
        content: "Check the naming format when SO is selected from magnify icon",
        run: function () {}
    }
);

return __exports;
});
;

/**********************************************************************************************************
*  Filepath: /spreadsheet_dashboard_documents/static/tests/tours/add_document_to_dashboard_group_tour.js  *
*  Lines: 107                                                                                             *
**********************************************************************************************************/
odoo.define('@spreadsheet_dashboard_documents/../tests/tours/add_document_to_dashboard_group_tour', ['web.dom_ready', '@web/core/registry'], async function (require) {
'use strict';
let __exports = {};
/** @odoo-module */
require("web.dom_ready");
const { registry } = require("@web/core/registry");

let startingNumberOfSheetsInGroup = 0;

function assertNSheetsInGroup(number) {
    const tour = registry.get("tourManager");
    const actualNumber = document.querySelectorAll(".o_list_table tr.o_data_row").length;
    if (actualNumber !== number) {
        tour._consume_tour(
            tour.running_tour,
            `Expected ${number} sheets in the dashbord group, got ${actualNumber}`
        );
    }
}

function focusFirstSheetInModal() {
    const sheetImg = document.querySelector("img.o-sp-dialog-item-img");
    sheetImg.dispatchEvent(new MouseEvent("focus"));
}

registry.category("web_tour.tours").add(
    "spreadsheet_dashboard_document_add_document_to_dashboard_group",
    {
        test: true,
        url: "/web",
        steps: [
        {
            trigger:
                '.o_app[data-menu-xmlid="spreadsheet_dashboard.spreadsheet_dashboard_menu_root"]',
            content: "Open dashboard app",
            run: "click",
        },
        {
            trigger:
                'button[data-menu-xmlid="spreadsheet_dashboard.spreadsheet_dashboard_menu_configuration"]',
            content: "Open configuration menu",
            run: "click",
        },
        {
            trigger:
                'a[data-menu-xmlid="spreadsheet_dashboard.spreadsheet_dashboard_menu_configuration_dashboards"]',
            content: "Open dashboard configuration menu",
            run: "click",
        },
        {
            trigger: 'tbody tr td[name="name"]',
            content: "Open a dashboard group from list view",
            run: "click",
        },
        {
            trigger: 'button[name="action_add_document_spreadsheet_to_dashboard"]',
            run: () => {
                startingNumberOfSheetsInGroup = document.querySelectorAll(
                    ".o_list_table tr.o_data_row"
                ).length;
            },
        },
        {
            trigger: 'button[name="action_add_document_spreadsheet_to_dashboard"]',
            content: "Open add document to dashboard modal",
            run: "click",
        },
        {
            trigger: "img.o-sp-dialog-item-img",
            content: "Focus a spreadsheet",
            run: focusFirstSheetInModal,
        },
        {
            trigger: "button.btn-primary",
            content: "Click confirm button",
            run: "click",
        },
        {
            trigger: `.o_data_row`,
            content: "A spreadsheet was added as dashboard",
            run: () => assertNSheetsInGroup(startingNumberOfSheetsInGroup + 1),
        },
        {
            trigger: 'button[name="action_add_document_spreadsheet_to_dashboard"]',
            content: "Open add document to dashboard modal",
            run: "click",
        },
        {
            trigger: "img.o-sp-dialog-item-img",
            content: "Focus a spreadsheet",
            run: focusFirstSheetInModal,
        },
        {
            trigger: "img.o-sp-dialog-item-img",
            content: "Double click a spreadsheet",
            run: "dblclick",
        },
        {
            trigger: `.o_data_row`,
            content: "A spreadsheet was added as dashboard",
            run: () => assertNSheetsInGroup(startingNumberOfSheetsInGroup + 2),
        },
    ]
});

return __exports;
});
;

/*****************************************************************
*  Filepath: /website_links/static/tests/tours/website_links.js  *
*  Lines: 80                                                     *
*****************************************************************/
odoo.define('website_links.website_links_tour', function (require) {
'use strict';

const { registry } = require("@web/core/registry");

registry.category("web_tour.tours").add('website_links_tour', {
    test: true,
    url: '/r',
    steps: [
        // 1. Create a tracked URL
        {
            content: "check that existing links are shown",
            trigger: '#o_website_links_recent_links .btn_shorten_url_clipboard',
            run: function () {}, // it's a check
        },
        {
            content: "fill the form and submit it",
            trigger: '#o_website_links_link_tracker_form input#url',
            run: function () {
                var url = window.location.host + '/contactus';
                $('#o_website_links_link_tracker_form input#url').val(url);
                $('.o_website_links_utm_forms input#campaign-select').val(1).change();
                $('.o_website_links_utm_forms input#channel-select').val(1).change();
                $('.o_website_links_utm_forms input#source-select').val(1).change();
                $('#btn_shorten_url').click();
            },
        },
        // 2. Visit it
        {
            content: "check that link was created and visit it",
            extra_trigger: '#o_website_links_recent_links .truncate_text:first():contains("Contact Us")',
            trigger: '#o_website_links_link_tracker_form #generated_tracked_link:contains("/r/")',
            run: function () {
                window.location.href = $('#generated_tracked_link').text();
            },
        },
        {
            content: "check that we landed on correct page with correct query strings",
            trigger: '.s_title h1:containsExact("Contact us")',
            run: function () {
                var expectedUrl = "/contactus?utm_campaign=Sale&utm_source=Search+engine&utm_medium=Website";
                if (window.location.pathname + window.location.search !== expectedUrl) {
                    console.error("The link was not correctly created.");
                }
                window.location.href = '/r';
            },
        },
        // 3. Check that counter got incremented and charts are correctly displayed
        {
            content: "filter recently used links",
            trigger: '#filter-recently-used-links',
        },
        {
            content: "visit link stats page",
            trigger: '#o_website_links_recent_links a:containsExact("Stats"):first',
        },
        {
            content: "check click number and ensure graphs are initialized",
            extra_trigger: '.website_links_click_chart .title:contains("1 clicks")',
            trigger: 'canvas',
            run: function () {}, // it's a check
        },
        {
            content: "click on Last Month tab",
            trigger: '.o_website_links_chart .graph-tabs a:contains("Last Month")',
        },
        {
            content: "ensure tab is correctly resized",
            trigger: '#last_month_charts #last_month_clicks_chart',
            run: function () {
                var width = $('#last_month_charts #last_month_clicks_chart').width();
                if (width < 50) {
                    console.error("The graphs are probably not resized on tab change.");
                }
            },
        },
    ]
});

});
;

/***************************************************************************
*  Filepath: /website_mass_mailing/static/tests/tours/newsletter_block.js  *
*  Lines: 71                                                               *
***************************************************************************/
odoo.define('@website_mass_mailing/../tests/tours/newsletter_block', ['website.tour_utils'], async function (require) {
'use strict';
let __exports = {};
/** @odoo-module */

const wTourUtils = require('website.tour_utils');

wTourUtils.registerWebsitePreviewTour('newsletter_block_edition', {
    test: true,
    url: '/',
    edition: true,
}, [
    // Put a Newsletter block.
    wTourUtils.dragNDrop({
        id: 's_newsletter_block',
        name: 'Newsletter Block',
    }),
    {
        content: 'Wait for the list id to be set.',
        trigger: 'iframe .s_newsletter_block[data-list-id]:not([data-list-id="0"]) .s_newsletter_subscribe_form',
        run: () => null, // it's a check
    },
    ...wTourUtils.clickOnSave(),
    // Subscribe to the newsletter.
    {
        content: 'Wait for the email to be loaded in the newsletter input',
        trigger: 'iframe .s_newsletter_block .js_subscribe_btn',
        extra_trigger: 'iframe .s_newsletter_block input:propValue(admin@yourcompany.example.com)',
    },
    // Change the link style.
    ...wTourUtils.clickOnEditAndWaitEditMode(),
    {
        content: 'Click on the Subscribe button',
        trigger: 'iframe .s_newsletter_block .js_subscribe_btn',
    },
    {
        content: 'Toggle the option to display the Thanks button',
        trigger: 'we-button[data-toggle-thanks-button] we-checkbox',
    },
    {
        content: 'Click on the Thanks button',
        trigger: 'iframe .s_newsletter_block .js_subscribed_btn',
    },
    {
        content: 'Click on the link style button',
        trigger: '.dropdown:has([name="link_style_color"]) > button',
    },
    {
        content: 'Click on the primary style button',
        trigger: '[data-value="primary"]',
    },
    {
        content: 'Change the shape of the button',
        trigger: '.dropdown:has([name="link_style_shape"]) > button',
    },
    {
        content: 'Click on the flat shape button',
        trigger: '[data-value="flat"]',
    },
    ...wTourUtils.clickOnSave(),
    // Check if the button style is correct (make sure that the 'btn-success'
    // class which is not suggested as a valid style in the editor panel did not
    // prevent to edit the button).
    {
        content: 'Check that the link style is correct',
        trigger: 'iframe .s_newsletter_block .js_subscribed_btn.btn.btn-primary.flat:not(.btn-success)',
    },
]);

return __exports;
});
;

/***************************************************************************
*  Filepath: /website_mass_mailing/static/tests/tours/newsletter_popup.js  *
*  Lines: 81                                                               *
***************************************************************************/
odoo.define("website_mass_mailing.tour.newsletter_popup_edition", function (require) {
"use strict";

const wTourUtils = require('website.tour_utils');
const newsletterPopupUseTour = require('website_mass_mailing.tour.newsletter_popup_use');

wTourUtils.registerWebsitePreviewTour("newsletter_popup_edition", {
    test: true,
    url: "/",
    edition: true,
}, [
    wTourUtils.dragNDrop({
        id: 's_newsletter_subscribe_popup',
        name: 'Newsletter Popup',
    }),
    {
        content: "Check the modal is opened for edition",
        trigger: 'iframe .o_newsletter_popup .modal:visible',
        in_modal: false,
        run: () => null,
    },
    ...wTourUtils.clickOnSave(),
    {
        content: "Check the modal has been saved, closed",
        trigger: 'iframe body:has(.o_newsletter_popup)',
        extra_trigger: 'iframe body:not(.editor_enable)',
        run: newsletterPopupUseTour.ensurePopupNotVisible,
    }
]);
});

odoo.define("website_mass_mailing.tour.newsletter_popup_use", function (require) {
"use strict";

const { registry } = require("@web/core/registry");

function ensurePopupNotVisible() {
    const $modal = this.$anchor.find('.o_newsletter_popup .modal');
    if ($modal.length !== 1) {
        // Avoid the tour to succeed if the modal can't be found while
        // it should. Indeed, if the selector ever becomes wrong and the
        // expected element is actually not found anymore, the test
        // won't be testing anything anymore as the visible check will
        // always be truthy on empty jQuery element.
        console.error("Modal couldn't be found in the DOM. The tour is not working as expected.");
    }
    if ($modal.is(':visible')) {
        console.error('Modal should not be opened.');
    }
}

registry.category("web_tour.tours").add('newsletter_popup_use', {
    test: true,
    url: '/',
    steps: [
    {
        content: "Check the modal is not yet opened and force it opened",
        trigger: 'body:has(.o_newsletter_popup)',
        run: ensurePopupNotVisible,
    },
    {
        content: "Check the modal is now opened and enter text in the subscribe input",
        trigger: '.o_newsletter_popup .modal input',
        in_modal: false,
        run: 'text hello@world.com',
    },
    {
        content: "Subscribe",
        trigger: '.modal-dialog .btn-primary',
    },
    {
        content: "Check the modal is now closed",
        trigger: 'body:has(.o_newsletter_popup)',
        run: ensurePopupNotVisible,
    }
]});

return {
    ensurePopupNotVisible: ensurePopupNotVisible,
};
});
;

/**********************************************************************************
*  Filepath: /website_appointment/static/tests/tours/website_appointment_tour.js  *
*  Lines: 86                                                                      *
**********************************************************************************/
odoo.define('website_appointment.website_appointment_tour', function(require) {
"use strict";

const { registry } = require("@web/core/registry");
const { stepUtils } = require('@web_tour/js/tour_step_utils');

registry.category("web_tour.tours").add('website_appointment_tour', {
    test: true,
    url: '/web',
    steps: [
    stepUtils.showAppsMenuItem(),
    {
        trigger: '.o_app[data-menu-xmlid="calendar.mail_menu_calendar"]',
        content: 'click on calendar app',
    }, {
        trigger: 'a[data-menu-xmlid="appointment.appointment_type_menu"]',
        content: 'click on Online Appointment',
    }, {
        trigger: '.o-kanban-button-new',
        content: 'click on Create button',
    }, {
        trigger: 'input[name="name"]',
        content: 'set name of appointment type',
    }, {
        trigger: 'input[name="max_schedule_days"]',
        content: 'set max scheduled days',
        run: 'text 45',
    }, {
        trigger: 'div[name="staff_user_ids"] a',
        content: 'add users to the appointment_type',
    }, {
        trigger: '.o_list_record_selector',
        content: 'select users',
    }, {
        trigger: '.o_select_button',
        content: 'save new users for the appointment type',
    }, {
        trigger: 'a:contains("Availability")',
        content: 'go to slots tab',
    }, {
        trigger: 'div[name="slot_ids"] a',
        content: 'click on add a line',
    }, {
        trigger: '.o_form_button_save',
        content: 'save appointment type',
    }, {
        trigger: 'button[name="is_published"]',
        extra_trigger: 'button.o_form_button_create',
        content: 'go to the frontend',
    }, {
        trigger: 'iframe td.o_day:first',
        content: 'click on first date available',
    }, {
        trigger: 'iframe .o_slots_list a:first',
        content: 'click on first slot available',
    }, {
        trigger: 'iframe input[id="phone_field"]',
        content: 'fill tel field',
        run: 'text 0123456789'
    }, {
        trigger: 'iframe button[type="submit"]',
        content: 'confirm appointment',
        run: 'click',
    }, {
        trigger: 'iframe a:contains("Cancel") i',
        content: 'cancel appointment',
        run: 'click',
    }, {
        trigger: '.o_website_edit_in_backend > a',
        content: 'return in backend',
        run: 'click',
    }, {
        trigger: 'button.dropdown-toggle',
        content: 'click on Action dropdown',
        run: 'click',
    }, {
        trigger: 'a:contains("Delete")',
        content: 'delete appointment type',
        run: 'click',
    }, {
        trigger: 'button.btn-primary:contains("Ok")',
        content: 'confirm delete',
        run: 'click',
    }
]});
});
;

/*********************************************************************
*  Filepath: /appointment_crm/static/tests/tours/appointment_crm.js  *
*  Lines: 45                                                         *
*********************************************************************/
odoo.define('@appointment_crm/../tests/tours/appointment_crm', ['@web/core/registry', '@web_tour/js/tour_step_utils'], async function (require) {
'use strict';
let __exports = {};
/** @odoo-module **/

const { registry } = require("@web/core/registry");
const { stepUtils } = require("@web_tour/js/tour_step_utils");

const oldWriteText = navigator.clipboard.writeText;

registry.category("web_tour.tours").add('appointment_crm_meeting_tour', {
    url: '/web',
    test: true,
    steps : [stepUtils.showAppsMenuItem(), {
        trigger: '.o_app[data-menu-xmlid="crm.crm_menu_root"]',
        run: 'click',
    }, {
        trigger: '.o_kanban_record:contains("Test Opportunity")',
        extra_trigger: '.o_opportunity_kanban',
        run: 'click',
    }, {
        trigger: 'button[name="action_schedule_meeting"]',
        run: 'click',
    }, {
        trigger: 'button[id="dropdownAppointmentLink"]',
        run: 'click',
    }, {
        trigger: '.o_appointment_button_link:contains("Test AppointmentCRM")',
        run: () => {
            // Patch and ignore write on clipboard in tour as we don't have permissions
            navigator.clipboard.writeText = () => { console.info('Copy in clipboard ignored!') };
            $('.o_appointment_button_link:contains("Test AppointmentCRM")').click();
        },
    }, {
        trigger: '.o_appointment_discard_slots',
        run: () => {
            $('.o_appointment_discard_slots').click();
            // Re-patch the function with the previous writeText
            navigator.clipboard.writeText = oldWriteText;
        },
    }],
});

return __exports;
});
;

/************************************************************
*  Filepath: /web/static/tests/ignore_missing_deps_stop.js  *
*  Lines: 1                                                 *
************************************************************/
window.__odooIgnoreMissingDependencies = false;


//# sourceMappingURL=/web/assets/1514-dc12e10/1/web.__assets_tests_call__.js.map